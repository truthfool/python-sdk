# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V11VmOpenApiServiceChannels(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'electronic_channel': 'V11VmOpenApiElectronicChannel',
        'phone_channel': 'V11VmOpenApiPhoneChannel',
        'printable_form_channel': 'V11VmOpenApiPrintableFormChannel',
        'location_channel': 'V11VmOpenApiServiceLocationChannel',
        'web_page_channel': 'V11VmOpenApiWebPageChannel'
    }

    attribute_map = {
        'electronic_channel': 'electronicChannel',
        'phone_channel': 'phoneChannel',
        'printable_form_channel': 'printableFormChannel',
        'location_channel': 'locationChannel',
        'web_page_channel': 'webPageChannel'
    }

    def __init__(self, electronic_channel=None, phone_channel=None, printable_form_channel=None, location_channel=None, web_page_channel=None):  # noqa: E501
        """V11VmOpenApiServiceChannels - a model defined in Swagger"""  # noqa: E501
        self._electronic_channel = None
        self._phone_channel = None
        self._printable_form_channel = None
        self._location_channel = None
        self._web_page_channel = None
        self.discriminator = None
        if electronic_channel is not None:
            self.electronic_channel = electronic_channel
        if phone_channel is not None:
            self.phone_channel = phone_channel
        if printable_form_channel is not None:
            self.printable_form_channel = printable_form_channel
        if location_channel is not None:
            self.location_channel = location_channel
        if web_page_channel is not None:
            self.web_page_channel = web_page_channel

    @property
    def electronic_channel(self):
        """Gets the electronic_channel of this V11VmOpenApiServiceChannels.  # noqa: E501


        :return: The electronic_channel of this V11VmOpenApiServiceChannels.  # noqa: E501
        :rtype: V11VmOpenApiElectronicChannel
        """
        return self._electronic_channel

    @electronic_channel.setter
    def electronic_channel(self, electronic_channel):
        """Sets the electronic_channel of this V11VmOpenApiServiceChannels.


        :param electronic_channel: The electronic_channel of this V11VmOpenApiServiceChannels.  # noqa: E501
        :type: V11VmOpenApiElectronicChannel
        """

        self._electronic_channel = electronic_channel

    @property
    def phone_channel(self):
        """Gets the phone_channel of this V11VmOpenApiServiceChannels.  # noqa: E501


        :return: The phone_channel of this V11VmOpenApiServiceChannels.  # noqa: E501
        :rtype: V11VmOpenApiPhoneChannel
        """
        return self._phone_channel

    @phone_channel.setter
    def phone_channel(self, phone_channel):
        """Sets the phone_channel of this V11VmOpenApiServiceChannels.


        :param phone_channel: The phone_channel of this V11VmOpenApiServiceChannels.  # noqa: E501
        :type: V11VmOpenApiPhoneChannel
        """

        self._phone_channel = phone_channel

    @property
    def printable_form_channel(self):
        """Gets the printable_form_channel of this V11VmOpenApiServiceChannels.  # noqa: E501


        :return: The printable_form_channel of this V11VmOpenApiServiceChannels.  # noqa: E501
        :rtype: V11VmOpenApiPrintableFormChannel
        """
        return self._printable_form_channel

    @printable_form_channel.setter
    def printable_form_channel(self, printable_form_channel):
        """Sets the printable_form_channel of this V11VmOpenApiServiceChannels.


        :param printable_form_channel: The printable_form_channel of this V11VmOpenApiServiceChannels.  # noqa: E501
        :type: V11VmOpenApiPrintableFormChannel
        """

        self._printable_form_channel = printable_form_channel

    @property
    def location_channel(self):
        """Gets the location_channel of this V11VmOpenApiServiceChannels.  # noqa: E501


        :return: The location_channel of this V11VmOpenApiServiceChannels.  # noqa: E501
        :rtype: V11VmOpenApiServiceLocationChannel
        """
        return self._location_channel

    @location_channel.setter
    def location_channel(self, location_channel):
        """Sets the location_channel of this V11VmOpenApiServiceChannels.


        :param location_channel: The location_channel of this V11VmOpenApiServiceChannels.  # noqa: E501
        :type: V11VmOpenApiServiceLocationChannel
        """

        self._location_channel = location_channel

    @property
    def web_page_channel(self):
        """Gets the web_page_channel of this V11VmOpenApiServiceChannels.  # noqa: E501


        :return: The web_page_channel of this V11VmOpenApiServiceChannels.  # noqa: E501
        :rtype: V11VmOpenApiWebPageChannel
        """
        return self._web_page_channel

    @web_page_channel.setter
    def web_page_channel(self, web_page_channel):
        """Sets the web_page_channel of this V11VmOpenApiServiceChannels.


        :param web_page_channel: The web_page_channel of this V11VmOpenApiServiceChannels.  # noqa: E501
        :type: V11VmOpenApiWebPageChannel
        """

        self._web_page_channel = web_page_channel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V11VmOpenApiServiceChannels, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V11VmOpenApiServiceChannels):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
