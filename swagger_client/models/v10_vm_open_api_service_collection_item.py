# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V10VmOpenApiServiceCollectionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'service_collection_names': 'list[VmOpenApiLanguageItem]',
        'service_collection_descriptions': 'list[VmOpenApiLocalizedListItem]',
        'services': 'list[VmOpenApiServiceCollectionService]',
        'service_channels': 'list[VmOpenApiServiceCollectionChannel]',
        'name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'service_collection_names': 'serviceCollectionNames',
        'service_collection_descriptions': 'serviceCollectionDescriptions',
        'services': 'services',
        'service_channels': 'serviceChannels',
        'name': 'name'
    }

    def __init__(self, id=None, service_collection_names=None, service_collection_descriptions=None, services=None, service_channels=None, name=None):  # noqa: E501
        """V10VmOpenApiServiceCollectionItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._service_collection_names = None
        self._service_collection_descriptions = None
        self._services = None
        self._service_channels = None
        self._name = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if service_collection_names is not None:
            self.service_collection_names = service_collection_names
        if service_collection_descriptions is not None:
            self.service_collection_descriptions = service_collection_descriptions
        if services is not None:
            self.services = services
        if service_channels is not None:
            self.service_channels = service_channels
        if name is not None:
            self.name = name

    @property
    def id(self):
        """Gets the id of this V10VmOpenApiServiceCollectionItem.  # noqa: E501

        Id of the item.  # noqa: E501

        :return: The id of this V10VmOpenApiServiceCollectionItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V10VmOpenApiServiceCollectionItem.

        Id of the item.  # noqa: E501

        :param id: The id of this V10VmOpenApiServiceCollectionItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def service_collection_names(self):
        """Gets the service_collection_names of this V10VmOpenApiServiceCollectionItem.  # noqa: E501

        List of localized service collection names.  # noqa: E501

        :return: The service_collection_names of this V10VmOpenApiServiceCollectionItem.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._service_collection_names

    @service_collection_names.setter
    def service_collection_names(self, service_collection_names):
        """Sets the service_collection_names of this V10VmOpenApiServiceCollectionItem.

        List of localized service collection names.  # noqa: E501

        :param service_collection_names: The service_collection_names of this V10VmOpenApiServiceCollectionItem.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """

        self._service_collection_names = service_collection_names

    @property
    def service_collection_descriptions(self):
        """Gets the service_collection_descriptions of this V10VmOpenApiServiceCollectionItem.  # noqa: E501

        List of localized service collection descriptions.  # noqa: E501

        :return: The service_collection_descriptions of this V10VmOpenApiServiceCollectionItem.  # noqa: E501
        :rtype: list[VmOpenApiLocalizedListItem]
        """
        return self._service_collection_descriptions

    @service_collection_descriptions.setter
    def service_collection_descriptions(self, service_collection_descriptions):
        """Sets the service_collection_descriptions of this V10VmOpenApiServiceCollectionItem.

        List of localized service collection descriptions.  # noqa: E501

        :param service_collection_descriptions: The service_collection_descriptions of this V10VmOpenApiServiceCollectionItem.  # noqa: E501
        :type: list[VmOpenApiLocalizedListItem]
        """

        self._service_collection_descriptions = service_collection_descriptions

    @property
    def services(self):
        """Gets the services of this V10VmOpenApiServiceCollectionItem.  # noqa: E501

        List of service collection services.  # noqa: E501

        :return: The services of this V10VmOpenApiServiceCollectionItem.  # noqa: E501
        :rtype: list[VmOpenApiServiceCollectionService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this V10VmOpenApiServiceCollectionItem.

        List of service collection services.  # noqa: E501

        :param services: The services of this V10VmOpenApiServiceCollectionItem.  # noqa: E501
        :type: list[VmOpenApiServiceCollectionService]
        """

        self._services = services

    @property
    def service_channels(self):
        """Gets the service_channels of this V10VmOpenApiServiceCollectionItem.  # noqa: E501

        List of service collection services.  # noqa: E501

        :return: The service_channels of this V10VmOpenApiServiceCollectionItem.  # noqa: E501
        :rtype: list[VmOpenApiServiceCollectionChannel]
        """
        return self._service_channels

    @service_channels.setter
    def service_channels(self, service_channels):
        """Sets the service_channels of this V10VmOpenApiServiceCollectionItem.

        List of service collection services.  # noqa: E501

        :param service_channels: The service_channels of this V10VmOpenApiServiceCollectionItem.  # noqa: E501
        :type: list[VmOpenApiServiceCollectionChannel]
        """

        self._service_channels = service_channels

    @property
    def name(self):
        """Gets the name of this V10VmOpenApiServiceCollectionItem.  # noqa: E501


        :return: The name of this V10VmOpenApiServiceCollectionItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V10VmOpenApiServiceCollectionItem.


        :param name: The name of this V10VmOpenApiServiceCollectionItem.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V10VmOpenApiServiceCollectionItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V10VmOpenApiServiceCollectionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
