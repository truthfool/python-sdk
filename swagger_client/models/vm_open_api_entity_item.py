# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VmOpenApiEntityItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'modified': 'datetime',
        'created': 'datetime',
        'general_description_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'modified': 'modified',
        'created': 'created',
        'general_description_id': 'generalDescriptionId'
    }

    def __init__(self, id=None, type=None, modified=None, created=None, general_description_id=None):  # noqa: E501
        """VmOpenApiEntityItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._modified = None
        self._created = None
        self._general_description_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if modified is not None:
            self.modified = modified
        if created is not None:
            self.created = created
        if general_description_id is not None:
            self.general_description_id = general_description_id

    @property
    def id(self):
        """Gets the id of this VmOpenApiEntityItem.  # noqa: E501

        Id of the item.  # noqa: E501

        :return: The id of this VmOpenApiEntityItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VmOpenApiEntityItem.

        Id of the item.  # noqa: E501

        :param id: The id of this VmOpenApiEntityItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this VmOpenApiEntityItem.  # noqa: E501

        Type of the item. For version 10 (and up) the type for service can be Service, PermitOrObligation or ProfessionalQualification  and for service channel EChannel, WebPage, PrintableForm, Phone or ServiceLocation.  In older versions type can only be either Service or ServiceChannel.  # noqa: E501

        :return: The type of this VmOpenApiEntityItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VmOpenApiEntityItem.

        Type of the item. For version 10 (and up) the type for service can be Service, PermitOrObligation or ProfessionalQualification  and for service channel EChannel, WebPage, PrintableForm, Phone or ServiceLocation.  In older versions type can only be either Service or ServiceChannel.  # noqa: E501

        :param type: The type of this VmOpenApiEntityItem.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def modified(self):
        """Gets the modified of this VmOpenApiEntityItem.  # noqa: E501

        Date when item was modified/created (UTC).  # noqa: E501

        :return: The modified of this VmOpenApiEntityItem.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this VmOpenApiEntityItem.

        Date when item was modified/created (UTC).  # noqa: E501

        :param modified: The modified of this VmOpenApiEntityItem.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def created(self):
        """Gets the created of this VmOpenApiEntityItem.  # noqa: E501

        Date when item was modified/created (UTC).  # noqa: E501

        :return: The created of this VmOpenApiEntityItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this VmOpenApiEntityItem.

        Date when item was modified/created (UTC).  # noqa: E501

        :param created: The created of this VmOpenApiEntityItem.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def general_description_id(self):
        """Gets the general_description_id of this VmOpenApiEntityItem.  # noqa: E501

        General description id for a service. Used only internally.  # noqa: E501

        :return: The general_description_id of this VmOpenApiEntityItem.  # noqa: E501
        :rtype: str
        """
        return self._general_description_id

    @general_description_id.setter
    def general_description_id(self, general_description_id):
        """Sets the general_description_id of this VmOpenApiEntityItem.

        General description id for a service. Used only internally.  # noqa: E501

        :param general_description_id: The general_description_id of this VmOpenApiEntityItem.  # noqa: E501
        :type: str
        """

        self._general_description_id = general_description_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VmOpenApiEntityItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VmOpenApiEntityItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
