# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V9VmOpenApiOrganizationInBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_id': 'str',
        'business_code': 'str',
        'business_name': 'str',
        'emails': 'list[V4VmOpenApiEmail]',
        'web_pages': 'list[V9VmOpenApiWebPage]',
        'electronic_invoicings': 'list[VmOpenApiOrganizationEInvoicing]',
        'business_id': 'str',
        'version_id': 'str',
        'oid': 'str',
        'municipality': 'str',
        'addresses': 'list[V9VmOpenApiAddressIn]',
        'parent_organization_id': 'str',
        'delete_all_emails': 'bool',
        'delete_all_phones': 'bool',
        'delete_all_web_pages': 'bool',
        'delete_all_addresses': 'bool',
        'delete_all_electronic_invoicings': 'bool',
        'valid_from': 'datetime',
        'valid_to': 'datetime',
        'id': 'str',
        'current_publishing_status': 'str',
        'user_name': 'str',
        'available_languages': 'list[str]',
        'required_properties_available_languages': 'list[str]',
        'organization_names': 'list[VmOpenApiLocalizedListItem]',
        'organization_descriptions': 'list[VmOpenApiLocalizedListItem]',
        'display_name_type': 'list[VmOpenApiNameTypeByLanguage]',
        'organization_type': 'str',
        'area_type': 'str',
        'sub_area_type': 'str',
        'areas': 'list[str]',
        'phone_numbers': 'list[V4VmOpenApiPhone]',
        'publishing_status': 'str'
    }

    attribute_map = {
        'source_id': 'sourceId',
        'business_code': 'businessCode',
        'business_name': 'businessName',
        'emails': 'emails',
        'web_pages': 'webPages',
        'electronic_invoicings': 'electronicInvoicings',
        'business_id': 'businessId',
        'version_id': 'versionId',
        'oid': 'oid',
        'municipality': 'municipality',
        'addresses': 'addresses',
        'parent_organization_id': 'parentOrganizationId',
        'delete_all_emails': 'deleteAllEmails',
        'delete_all_phones': 'deleteAllPhones',
        'delete_all_web_pages': 'deleteAllWebPages',
        'delete_all_addresses': 'deleteAllAddresses',
        'delete_all_electronic_invoicings': 'deleteAllElectronicInvoicings',
        'valid_from': 'validFrom',
        'valid_to': 'validTo',
        'id': 'id',
        'current_publishing_status': 'currentPublishingStatus',
        'user_name': 'userName',
        'available_languages': 'availableLanguages',
        'required_properties_available_languages': 'requiredPropertiesAvailableLanguages',
        'organization_names': 'organizationNames',
        'organization_descriptions': 'organizationDescriptions',
        'display_name_type': 'displayNameType',
        'organization_type': 'organizationType',
        'area_type': 'areaType',
        'sub_area_type': 'subAreaType',
        'areas': 'areas',
        'phone_numbers': 'phoneNumbers',
        'publishing_status': 'publishingStatus'
    }

    def __init__(self, source_id=None, business_code=None, business_name=None, emails=None, web_pages=None, electronic_invoicings=None, business_id=None, version_id=None, oid=None, municipality=None, addresses=None, parent_organization_id=None, delete_all_emails=None, delete_all_phones=None, delete_all_web_pages=None, delete_all_addresses=None, delete_all_electronic_invoicings=None, valid_from=None, valid_to=None, id=None, current_publishing_status=None, user_name=None, available_languages=None, required_properties_available_languages=None, organization_names=None, organization_descriptions=None, display_name_type=None, organization_type=None, area_type=None, sub_area_type=None, areas=None, phone_numbers=None, publishing_status=None):  # noqa: E501
        """V9VmOpenApiOrganizationInBase - a model defined in Swagger"""  # noqa: E501
        self._source_id = None
        self._business_code = None
        self._business_name = None
        self._emails = None
        self._web_pages = None
        self._electronic_invoicings = None
        self._business_id = None
        self._version_id = None
        self._oid = None
        self._municipality = None
        self._addresses = None
        self._parent_organization_id = None
        self._delete_all_emails = None
        self._delete_all_phones = None
        self._delete_all_web_pages = None
        self._delete_all_addresses = None
        self._delete_all_electronic_invoicings = None
        self._valid_from = None
        self._valid_to = None
        self._id = None
        self._current_publishing_status = None
        self._user_name = None
        self._available_languages = None
        self._required_properties_available_languages = None
        self._organization_names = None
        self._organization_descriptions = None
        self._display_name_type = None
        self._organization_type = None
        self._area_type = None
        self._sub_area_type = None
        self._areas = None
        self._phone_numbers = None
        self._publishing_status = None
        self.discriminator = None
        if source_id is not None:
            self.source_id = source_id
        if business_code is not None:
            self.business_code = business_code
        if business_name is not None:
            self.business_name = business_name
        if emails is not None:
            self.emails = emails
        if web_pages is not None:
            self.web_pages = web_pages
        if electronic_invoicings is not None:
            self.electronic_invoicings = electronic_invoicings
        if business_id is not None:
            self.business_id = business_id
        if version_id is not None:
            self.version_id = version_id
        if oid is not None:
            self.oid = oid
        if municipality is not None:
            self.municipality = municipality
        if addresses is not None:
            self.addresses = addresses
        if parent_organization_id is not None:
            self.parent_organization_id = parent_organization_id
        if delete_all_emails is not None:
            self.delete_all_emails = delete_all_emails
        if delete_all_phones is not None:
            self.delete_all_phones = delete_all_phones
        if delete_all_web_pages is not None:
            self.delete_all_web_pages = delete_all_web_pages
        if delete_all_addresses is not None:
            self.delete_all_addresses = delete_all_addresses
        if delete_all_electronic_invoicings is not None:
            self.delete_all_electronic_invoicings = delete_all_electronic_invoicings
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if id is not None:
            self.id = id
        if current_publishing_status is not None:
            self.current_publishing_status = current_publishing_status
        if user_name is not None:
            self.user_name = user_name
        if available_languages is not None:
            self.available_languages = available_languages
        if required_properties_available_languages is not None:
            self.required_properties_available_languages = required_properties_available_languages
        if organization_names is not None:
            self.organization_names = organization_names
        if organization_descriptions is not None:
            self.organization_descriptions = organization_descriptions
        if display_name_type is not None:
            self.display_name_type = display_name_type
        if organization_type is not None:
            self.organization_type = organization_type
        if area_type is not None:
            self.area_type = area_type
        if sub_area_type is not None:
            self.sub_area_type = sub_area_type
        if areas is not None:
            self.areas = areas
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        self.publishing_status = publishing_status

    @property
    def source_id(self):
        """Gets the source_id of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Organization external system identifier. User needs to be logged in to be able to get/set value.  # noqa: E501

        :return: The source_id of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this V9VmOpenApiOrganizationInBase.

        Organization external system identifier. User needs to be logged in to be able to get/set value.  # noqa: E501

        :param source_id: The source_id of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def business_code(self):
        """Gets the business_code of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Organization business code (Y-tunnus).  # noqa: E501

        :return: The business_code of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._business_code

    @business_code.setter
    def business_code(self, business_code):
        """Sets the business_code of this V9VmOpenApiOrganizationInBase.

        Organization business code (Y-tunnus).  # noqa: E501

        :param business_code: The business_code of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """

        self._business_code = business_code

    @property
    def business_name(self):
        """Gets the business_name of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Organization business name (name used for business code). This property is not used in the API anymore. Do not use.  # noqa: E501

        :return: The business_name of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this V9VmOpenApiOrganizationInBase.

        Organization business name (name used for business code). This property is not used in the API anymore. Do not use.  # noqa: E501

        :param business_name: The business_name of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """

        self._business_name = business_name

    @property
    def emails(self):
        """Gets the emails of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        List of email addresses.  # noqa: E501

        :return: The emails of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: list[V4VmOpenApiEmail]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this V9VmOpenApiOrganizationInBase.

        List of email addresses.  # noqa: E501

        :param emails: The emails of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: list[V4VmOpenApiEmail]
        """

        self._emails = emails

    @property
    def web_pages(self):
        """Gets the web_pages of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        List of organizations web pages.  # noqa: E501

        :return: The web_pages of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: list[V9VmOpenApiWebPage]
        """
        return self._web_pages

    @web_pages.setter
    def web_pages(self, web_pages):
        """Sets the web_pages of this V9VmOpenApiOrganizationInBase.

        List of organizations web pages.  # noqa: E501

        :param web_pages: The web_pages of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: list[V9VmOpenApiWebPage]
        """

        self._web_pages = web_pages

    @property
    def electronic_invoicings(self):
        """Gets the electronic_invoicings of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        List of organizations electronic invoicing information.  # noqa: E501

        :return: The electronic_invoicings of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: list[VmOpenApiOrganizationEInvoicing]
        """
        return self._electronic_invoicings

    @electronic_invoicings.setter
    def electronic_invoicings(self, electronic_invoicings):
        """Sets the electronic_invoicings of this V9VmOpenApiOrganizationInBase.

        List of organizations electronic invoicing information.  # noqa: E501

        :param electronic_invoicings: The electronic_invoicings of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: list[VmOpenApiOrganizationEInvoicing]
        """

        self._electronic_invoicings = electronic_invoicings

    @property
    def business_id(self):
        """Gets the business_id of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Business code entity identifier.  # noqa: E501

        :return: The business_id of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._business_id

    @business_id.setter
    def business_id(self, business_id):
        """Sets the business_id of this V9VmOpenApiOrganizationInBase.

        Business code entity identifier.  # noqa: E501

        :param business_id: The business_id of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """

        self._business_id = business_id

    @property
    def version_id(self):
        """Gets the version_id of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        The identifier for current version.  # noqa: E501

        :return: The version_id of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this V9VmOpenApiOrganizationInBase.

        The identifier for current version.  # noqa: E501

        :param version_id: The version_id of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def oid(self):
        """Gets the oid of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Organization OID. - must match the regex @\"^[A-Za-z0-9.-]*$\" (Max.Length: 100).  # noqa: E501

        :return: The oid of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this V9VmOpenApiOrganizationInBase.

        Organization OID. - must match the regex @\"^[A-Za-z0-9.-]*$\" (Max.Length: 100).  # noqa: E501

        :param oid: The oid of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """

        self._oid = oid

    @property
    def municipality(self):
        """Gets the municipality of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Municipality code (like 491 or 091).  # noqa: E501

        :return: The municipality of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._municipality

    @municipality.setter
    def municipality(self, municipality):
        """Sets the municipality of this V9VmOpenApiOrganizationInBase.

        Municipality code (like 491 or 091).  # noqa: E501

        :param municipality: The municipality of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """

        self._municipality = municipality

    @property
    def addresses(self):
        """Gets the addresses of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        List of addresses.  # noqa: E501

        :return: The addresses of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: list[V9VmOpenApiAddressIn]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this V9VmOpenApiOrganizationInBase.

        List of addresses.  # noqa: E501

        :param addresses: The addresses of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: list[V9VmOpenApiAddressIn]
        """

        self._addresses = addresses

    @property
    def parent_organization_id(self):
        """Gets the parent_organization_id of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Parent organization identifier.  # noqa: E501

        :return: The parent_organization_id of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._parent_organization_id

    @parent_organization_id.setter
    def parent_organization_id(self, parent_organization_id):
        """Sets the parent_organization_id of this V9VmOpenApiOrganizationInBase.

        Parent organization identifier.  # noqa: E501

        :param parent_organization_id: The parent_organization_id of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """

        self._parent_organization_id = parent_organization_id

    @property
    def delete_all_emails(self):
        """Gets the delete_all_emails of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Set to true to delete all existing emails (the EmailAddresses collection for this object should be empty collection when this option is used).  # noqa: E501

        :return: The delete_all_emails of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: bool
        """
        return self._delete_all_emails

    @delete_all_emails.setter
    def delete_all_emails(self, delete_all_emails):
        """Sets the delete_all_emails of this V9VmOpenApiOrganizationInBase.

        Set to true to delete all existing emails (the EmailAddresses collection for this object should be empty collection when this option is used).  # noqa: E501

        :param delete_all_emails: The delete_all_emails of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: bool
        """

        self._delete_all_emails = delete_all_emails

    @property
    def delete_all_phones(self):
        """Gets the delete_all_phones of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Set to true to delete all existing phone numbers (the PhoneNumbers collection for this object should be empty collection when this option is used).  # noqa: E501

        :return: The delete_all_phones of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: bool
        """
        return self._delete_all_phones

    @delete_all_phones.setter
    def delete_all_phones(self, delete_all_phones):
        """Sets the delete_all_phones of this V9VmOpenApiOrganizationInBase.

        Set to true to delete all existing phone numbers (the PhoneNumbers collection for this object should be empty collection when this option is used).  # noqa: E501

        :param delete_all_phones: The delete_all_phones of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: bool
        """

        self._delete_all_phones = delete_all_phones

    @property
    def delete_all_web_pages(self):
        """Gets the delete_all_web_pages of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Set to true to delete all existing web pages (the WebPages collection for this object should be empty collection when this option is used).  # noqa: E501

        :return: The delete_all_web_pages of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: bool
        """
        return self._delete_all_web_pages

    @delete_all_web_pages.setter
    def delete_all_web_pages(self, delete_all_web_pages):
        """Sets the delete_all_web_pages of this V9VmOpenApiOrganizationInBase.

        Set to true to delete all existing web pages (the WebPages collection for this object should be empty collection when this option is used).  # noqa: E501

        :param delete_all_web_pages: The delete_all_web_pages of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: bool
        """

        self._delete_all_web_pages = delete_all_web_pages

    @property
    def delete_all_addresses(self):
        """Gets the delete_all_addresses of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Set to true to delete all existing addresses (the Addresses collection for this object should be empty collection when this option is used).  # noqa: E501

        :return: The delete_all_addresses of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: bool
        """
        return self._delete_all_addresses

    @delete_all_addresses.setter
    def delete_all_addresses(self, delete_all_addresses):
        """Sets the delete_all_addresses of this V9VmOpenApiOrganizationInBase.

        Set to true to delete all existing addresses (the Addresses collection for this object should be empty collection when this option is used).  # noqa: E501

        :param delete_all_addresses: The delete_all_addresses of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: bool
        """

        self._delete_all_addresses = delete_all_addresses

    @property
    def delete_all_electronic_invoicings(self):
        """Gets the delete_all_electronic_invoicings of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Set to true to delete all existing electronic invoicing addresses (the ElectronicInvoicings collection for this object should be empty collection when this option is used).  # noqa: E501

        :return: The delete_all_electronic_invoicings of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: bool
        """
        return self._delete_all_electronic_invoicings

    @delete_all_electronic_invoicings.setter
    def delete_all_electronic_invoicings(self, delete_all_electronic_invoicings):
        """Sets the delete_all_electronic_invoicings of this V9VmOpenApiOrganizationInBase.

        Set to true to delete all existing electronic invoicing addresses (the ElectronicInvoicings collection for this object should be empty collection when this option is used).  # noqa: E501

        :param delete_all_electronic_invoicings: The delete_all_electronic_invoicings of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: bool
        """

        self._delete_all_electronic_invoicings = delete_all_electronic_invoicings

    @property
    def valid_from(self):
        """Gets the valid_from of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Date when item should be published.  # noqa: E501

        :return: The valid_from of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this V9VmOpenApiOrganizationInBase.

        Date when item should be published.  # noqa: E501

        :param valid_from: The valid_from of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Date when item should be archived.  # noqa: E501

        :return: The valid_to of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this V9VmOpenApiOrganizationInBase.

        Date when item should be archived.  # noqa: E501

        :param valid_to: The valid_to of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    @property
    def id(self):
        """Gets the id of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Entity identifier.  # noqa: E501

        :return: The id of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V9VmOpenApiOrganizationInBase.

        Entity identifier.  # noqa: E501

        :param id: The id of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def current_publishing_status(self):
        """Gets the current_publishing_status of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Current version publishing status.  # noqa: E501

        :return: The current_publishing_status of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._current_publishing_status

    @current_publishing_status.setter
    def current_publishing_status(self, current_publishing_status):
        """Sets the current_publishing_status of this V9VmOpenApiOrganizationInBase.

        Current version publishing status.  # noqa: E501

        :param current_publishing_status: The current_publishing_status of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """

        self._current_publishing_status = current_publishing_status

    @property
    def user_name(self):
        """Gets the user_name of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        User name.  # noqa: E501

        :return: The user_name of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this V9VmOpenApiOrganizationInBase.

        User name.  # noqa: E501

        :param user_name: The user_name of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def available_languages(self):
        """Gets the available_languages of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Gets or sets available languages  # noqa: E501

        :return: The available_languages of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_languages

    @available_languages.setter
    def available_languages(self, available_languages):
        """Sets the available_languages of this V9VmOpenApiOrganizationInBase.

        Gets or sets available languages  # noqa: E501

        :param available_languages: The available_languages of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: list[str]
        """

        self._available_languages = available_languages

    @property
    def required_properties_available_languages(self):
        """Gets the required_properties_available_languages of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Internal property to check the languages within required lists: OrganizationNames and OrganizationDescriptions  # noqa: E501

        :return: The required_properties_available_languages of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_properties_available_languages

    @required_properties_available_languages.setter
    def required_properties_available_languages(self, required_properties_available_languages):
        """Sets the required_properties_available_languages of this V9VmOpenApiOrganizationInBase.

        Internal property to check the languages within required lists: OrganizationNames and OrganizationDescriptions  # noqa: E501

        :param required_properties_available_languages: The required_properties_available_languages of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: list[str]
        """

        self._required_properties_available_languages = required_properties_available_languages

    @property
    def organization_names(self):
        """Gets the organization_names of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        List of organization names. Possible type values are: Name, AlternativeName.  # noqa: E501

        :return: The organization_names of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: list[VmOpenApiLocalizedListItem]
        """
        return self._organization_names

    @organization_names.setter
    def organization_names(self, organization_names):
        """Sets the organization_names of this V9VmOpenApiOrganizationInBase.

        List of organization names. Possible type values are: Name, AlternativeName.  # noqa: E501

        :param organization_names: The organization_names of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: list[VmOpenApiLocalizedListItem]
        """

        self._organization_names = organization_names

    @property
    def organization_descriptions(self):
        """Gets the organization_descriptions of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Localized list of organization descriptions. Possible type values are: Description, Summary. (Max.Length: 2500 Description). (Max.Length: 150 Summary).  # noqa: E501

        :return: The organization_descriptions of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: list[VmOpenApiLocalizedListItem]
        """
        return self._organization_descriptions

    @organization_descriptions.setter
    def organization_descriptions(self, organization_descriptions):
        """Sets the organization_descriptions of this V9VmOpenApiOrganizationInBase.

        Localized list of organization descriptions. Possible type values are: Description, Summary. (Max.Length: 2500 Description). (Max.Length: 150 Summary).  # noqa: E501

        :param organization_descriptions: The organization_descriptions of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: list[VmOpenApiLocalizedListItem]
        """

        self._organization_descriptions = organization_descriptions

    @property
    def display_name_type(self):
        """Gets the display_name_type of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        List of Display name types (Name or AlternativeName) for each language version of OrganizationNames.  # noqa: E501

        :return: The display_name_type of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: list[VmOpenApiNameTypeByLanguage]
        """
        return self._display_name_type

    @display_name_type.setter
    def display_name_type(self, display_name_type):
        """Sets the display_name_type of this V9VmOpenApiOrganizationInBase.

        List of Display name types (Name or AlternativeName) for each language version of OrganizationNames.  # noqa: E501

        :param display_name_type: The display_name_type of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: list[VmOpenApiNameTypeByLanguage]
        """

        self._display_name_type = display_name_type

    @property
    def organization_type(self):
        """Gets the organization_type of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Organization type (State, Municipality, RegionalOrganization, Organization, Company, SotePublic, SotePrivate, Region).  # noqa: E501

        :return: The organization_type of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._organization_type

    @organization_type.setter
    def organization_type(self, organization_type):
        """Sets the organization_type of this V9VmOpenApiOrganizationInBase.

        Organization type (State, Municipality, RegionalOrganization, Organization, Company, SotePublic, SotePrivate, Region).  # noqa: E501

        :param organization_type: The organization_type of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """

        self._organization_type = organization_type

    @property
    def area_type(self):
        """Gets the area_type of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).  # noqa: E501

        :return: The area_type of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._area_type

    @area_type.setter
    def area_type(self, area_type):
        """Sets the area_type of this V9VmOpenApiOrganizationInBase.

        Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).  # noqa: E501

        :param area_type: The area_type of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """

        self._area_type = area_type

    @property
    def sub_area_type(self):
        """Gets the sub_area_type of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Sub area type (Municipality, Region, BusinessSubRegion, HospitalDistrict).  # noqa: E501

        :return: The sub_area_type of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._sub_area_type

    @sub_area_type.setter
    def sub_area_type(self, sub_area_type):
        """Sets the sub_area_type of this V9VmOpenApiOrganizationInBase.

        Sub area type (Municipality, Region, BusinessSubRegion, HospitalDistrict).  # noqa: E501

        :param sub_area_type: The sub_area_type of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """

        self._sub_area_type = sub_area_type

    @property
    def areas(self):
        """Gets the areas of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Area codes related to sub area type. For example if SubAreaType = Municipality, Areas-list need to include municipality codes like 491 or 091.  # noqa: E501

        :return: The areas of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: list[str]
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this V9VmOpenApiOrganizationInBase.

        Area codes related to sub area type. For example if SubAreaType = Municipality, Areas-list need to include municipality codes like 491 or 091.  # noqa: E501

        :param areas: The areas of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: list[str]
        """

        self._areas = areas

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        List of organizations phone numbers.  # noqa: E501

        :return: The phone_numbers of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: list[V4VmOpenApiPhone]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this V9VmOpenApiOrganizationInBase.

        List of organizations phone numbers.  # noqa: E501

        :param phone_numbers: The phone_numbers of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: list[V4VmOpenApiPhone]
        """

        self._phone_numbers = phone_numbers

    @property
    def publishing_status(self):
        """Gets the publishing_status of this V9VmOpenApiOrganizationInBase.  # noqa: E501

        Organization publishing status. Values: Draft, Published, Deleted or Modified.  # noqa: E501

        :return: The publishing_status of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :rtype: str
        """
        return self._publishing_status

    @publishing_status.setter
    def publishing_status(self, publishing_status):
        """Sets the publishing_status of this V9VmOpenApiOrganizationInBase.

        Organization publishing status. Values: Draft, Published, Deleted or Modified.  # noqa: E501

        :param publishing_status: The publishing_status of this V9VmOpenApiOrganizationInBase.  # noqa: E501
        :type: str
        """
        if publishing_status is None:
            raise ValueError("Invalid value for `publishing_status`, must not be `None`")  # noqa: E501

        self._publishing_status = publishing_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V9VmOpenApiOrganizationInBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V9VmOpenApiOrganizationInBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
