# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V10VmOpenApiOrganization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'oid': 'str',
        'source_id': 'str',
        'organization_type': 'str',
        'business_code': 'str',
        'business_name': 'str',
        'organization_names': 'list[VmOpenApiLocalizedListItem]',
        'display_name_type': 'list[VmOpenApiNameTypeByLanguage]',
        'area_type': 'str',
        'organization_descriptions': 'list[VmOpenApiLocalizedListItem]',
        'emails': 'list[V4VmOpenApiEmail]',
        'phone_numbers': 'list[V4VmOpenApiPhone]',
        'web_pages': 'list[V9VmOpenApiWebPage]',
        'electronic_invoicings': 'list[VmOpenApiOrganizationEInvoicing]',
        'business_id': 'str',
        'version_id': 'str',
        'parent_organization_id': 'str',
        'organization_root_id': 'str',
        'municipality': 'VmOpenApiMunicipality',
        'areas': 'list[VmOpenApiArea]',
        'area_municipalities': 'list[VmOpenApiMunicipality]',
        'addresses': 'list[V9VmOpenApiAddress]',
        'publishing_status': 'str',
        'services': 'list[V10VmOpenApiOrganizationService]',
        'responsible_organization_services': 'list[VmOpenApiItem]',
        'producer_organization_services': 'list[V10VmOpenApiOrganizationService]',
        'modified': 'datetime',
        'sub_organizations': 'list[VmOpenApiItem]',
        'available_languages': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'oid': 'oid',
        'source_id': 'sourceId',
        'organization_type': 'organizationType',
        'business_code': 'businessCode',
        'business_name': 'businessName',
        'organization_names': 'organizationNames',
        'display_name_type': 'displayNameType',
        'area_type': 'areaType',
        'organization_descriptions': 'organizationDescriptions',
        'emails': 'emails',
        'phone_numbers': 'phoneNumbers',
        'web_pages': 'webPages',
        'electronic_invoicings': 'electronicInvoicings',
        'business_id': 'businessId',
        'version_id': 'versionId',
        'parent_organization_id': 'parentOrganizationId',
        'organization_root_id': 'organizationRootId',
        'municipality': 'municipality',
        'areas': 'areas',
        'area_municipalities': 'areaMunicipalities',
        'addresses': 'addresses',
        'publishing_status': 'publishingStatus',
        'services': 'services',
        'responsible_organization_services': 'responsibleOrganizationServices',
        'producer_organization_services': 'producerOrganizationServices',
        'modified': 'modified',
        'sub_organizations': 'subOrganizations',
        'available_languages': 'availableLanguages'
    }

    def __init__(self, id=None, oid=None, source_id=None, organization_type=None, business_code=None, business_name=None, organization_names=None, display_name_type=None, area_type=None, organization_descriptions=None, emails=None, phone_numbers=None, web_pages=None, electronic_invoicings=None, business_id=None, version_id=None, parent_organization_id=None, organization_root_id=None, municipality=None, areas=None, area_municipalities=None, addresses=None, publishing_status=None, services=None, responsible_organization_services=None, producer_organization_services=None, modified=None, sub_organizations=None, available_languages=None):  # noqa: E501
        """V10VmOpenApiOrganization - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._oid = None
        self._source_id = None
        self._organization_type = None
        self._business_code = None
        self._business_name = None
        self._organization_names = None
        self._display_name_type = None
        self._area_type = None
        self._organization_descriptions = None
        self._emails = None
        self._phone_numbers = None
        self._web_pages = None
        self._electronic_invoicings = None
        self._business_id = None
        self._version_id = None
        self._parent_organization_id = None
        self._organization_root_id = None
        self._municipality = None
        self._areas = None
        self._area_municipalities = None
        self._addresses = None
        self._publishing_status = None
        self._services = None
        self._responsible_organization_services = None
        self._producer_organization_services = None
        self._modified = None
        self._sub_organizations = None
        self._available_languages = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if oid is not None:
            self.oid = oid
        if source_id is not None:
            self.source_id = source_id
        if organization_type is not None:
            self.organization_type = organization_type
        if business_code is not None:
            self.business_code = business_code
        if business_name is not None:
            self.business_name = business_name
        if organization_names is not None:
            self.organization_names = organization_names
        if display_name_type is not None:
            self.display_name_type = display_name_type
        if area_type is not None:
            self.area_type = area_type
        if organization_descriptions is not None:
            self.organization_descriptions = organization_descriptions
        if emails is not None:
            self.emails = emails
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if web_pages is not None:
            self.web_pages = web_pages
        if electronic_invoicings is not None:
            self.electronic_invoicings = electronic_invoicings
        if business_id is not None:
            self.business_id = business_id
        if version_id is not None:
            self.version_id = version_id
        if parent_organization_id is not None:
            self.parent_organization_id = parent_organization_id
        if organization_root_id is not None:
            self.organization_root_id = organization_root_id
        if municipality is not None:
            self.municipality = municipality
        if areas is not None:
            self.areas = areas
        if area_municipalities is not None:
            self.area_municipalities = area_municipalities
        if addresses is not None:
            self.addresses = addresses
        if publishing_status is not None:
            self.publishing_status = publishing_status
        if services is not None:
            self.services = services
        if responsible_organization_services is not None:
            self.responsible_organization_services = responsible_organization_services
        if producer_organization_services is not None:
            self.producer_organization_services = producer_organization_services
        if modified is not None:
            self.modified = modified
        if sub_organizations is not None:
            self.sub_organizations = sub_organizations
        if available_languages is not None:
            self.available_languages = available_languages

    @property
    def id(self):
        """Gets the id of this V10VmOpenApiOrganization.  # noqa: E501

        Entity identifier.  # noqa: E501

        :return: The id of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V10VmOpenApiOrganization.

        Entity identifier.  # noqa: E501

        :param id: The id of this V10VmOpenApiOrganization.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def oid(self):
        """Gets the oid of this V10VmOpenApiOrganization.  # noqa: E501

        Organization OID. - must match the regex @\"^[A-Za-z0-9.-]*$\"  # noqa: E501

        :return: The oid of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this V10VmOpenApiOrganization.

        Organization OID. - must match the regex @\"^[A-Za-z0-9.-]*$\"  # noqa: E501

        :param oid: The oid of this V10VmOpenApiOrganization.  # noqa: E501
        :type: str
        """

        self._oid = oid

    @property
    def source_id(self):
        """Gets the source_id of this V10VmOpenApiOrganization.  # noqa: E501

        Organization external system identifier. User needs to be logged in to be able to get/set value.  # noqa: E501

        :return: The source_id of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this V10VmOpenApiOrganization.

        Organization external system identifier. User needs to be logged in to be able to get/set value.  # noqa: E501

        :param source_id: The source_id of this V10VmOpenApiOrganization.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def organization_type(self):
        """Gets the organization_type of this V10VmOpenApiOrganization.  # noqa: E501

        Organization type (State, Municipality, RegionalOrganization, Organization, Company, SotePublic, SotePrivate, Region).  # noqa: E501

        :return: The organization_type of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: str
        """
        return self._organization_type

    @organization_type.setter
    def organization_type(self, organization_type):
        """Sets the organization_type of this V10VmOpenApiOrganization.

        Organization type (State, Municipality, RegionalOrganization, Organization, Company, SotePublic, SotePrivate, Region).  # noqa: E501

        :param organization_type: The organization_type of this V10VmOpenApiOrganization.  # noqa: E501
        :type: str
        """

        self._organization_type = organization_type

    @property
    def business_code(self):
        """Gets the business_code of this V10VmOpenApiOrganization.  # noqa: E501

        Organization business code (Y-tunnus).  # noqa: E501

        :return: The business_code of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: str
        """
        return self._business_code

    @business_code.setter
    def business_code(self, business_code):
        """Sets the business_code of this V10VmOpenApiOrganization.

        Organization business code (Y-tunnus).  # noqa: E501

        :param business_code: The business_code of this V10VmOpenApiOrganization.  # noqa: E501
        :type: str
        """

        self._business_code = business_code

    @property
    def business_name(self):
        """Gets the business_name of this V10VmOpenApiOrganization.  # noqa: E501

        Organization business name (name used for business code). This property is not used in the API anymore. Do not use.  # noqa: E501

        :return: The business_name of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this V10VmOpenApiOrganization.

        Organization business name (name used for business code). This property is not used in the API anymore. Do not use.  # noqa: E501

        :param business_name: The business_name of this V10VmOpenApiOrganization.  # noqa: E501
        :type: str
        """

        self._business_name = business_name

    @property
    def organization_names(self):
        """Gets the organization_names of this V10VmOpenApiOrganization.  # noqa: E501

        List of organization names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).  # noqa: E501

        :return: The organization_names of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[VmOpenApiLocalizedListItem]
        """
        return self._organization_names

    @organization_names.setter
    def organization_names(self, organization_names):
        """Sets the organization_names of this V10VmOpenApiOrganization.

        List of organization names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).  # noqa: E501

        :param organization_names: The organization_names of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[VmOpenApiLocalizedListItem]
        """

        self._organization_names = organization_names

    @property
    def display_name_type(self):
        """Gets the display_name_type of this V10VmOpenApiOrganization.  # noqa: E501

        List of Display name types (Name or AlternativeName) for each language version of OrganizationNames.  # noqa: E501

        :return: The display_name_type of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[VmOpenApiNameTypeByLanguage]
        """
        return self._display_name_type

    @display_name_type.setter
    def display_name_type(self, display_name_type):
        """Sets the display_name_type of this V10VmOpenApiOrganization.

        List of Display name types (Name or AlternativeName) for each language version of OrganizationNames.  # noqa: E501

        :param display_name_type: The display_name_type of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[VmOpenApiNameTypeByLanguage]
        """

        self._display_name_type = display_name_type

    @property
    def area_type(self):
        """Gets the area_type of this V10VmOpenApiOrganization.  # noqa: E501

        Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).  # noqa: E501

        :return: The area_type of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: str
        """
        return self._area_type

    @area_type.setter
    def area_type(self, area_type):
        """Sets the area_type of this V10VmOpenApiOrganization.

        Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).  # noqa: E501

        :param area_type: The area_type of this V10VmOpenApiOrganization.  # noqa: E501
        :type: str
        """

        self._area_type = area_type

    @property
    def organization_descriptions(self):
        """Gets the organization_descriptions of this V10VmOpenApiOrganization.  # noqa: E501

        Localized list of organization descriptions. Possible type values are: Description, Summary (in version 7 ShortDescription). (Max.Length: 2500 Description). (Max.Length: 150 ShortDescription).  # noqa: E501

        :return: The organization_descriptions of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[VmOpenApiLocalizedListItem]
        """
        return self._organization_descriptions

    @organization_descriptions.setter
    def organization_descriptions(self, organization_descriptions):
        """Sets the organization_descriptions of this V10VmOpenApiOrganization.

        Localized list of organization descriptions. Possible type values are: Description, Summary (in version 7 ShortDescription). (Max.Length: 2500 Description). (Max.Length: 150 ShortDescription).  # noqa: E501

        :param organization_descriptions: The organization_descriptions of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[VmOpenApiLocalizedListItem]
        """

        self._organization_descriptions = organization_descriptions

    @property
    def emails(self):
        """Gets the emails of this V10VmOpenApiOrganization.  # noqa: E501

        List of email addresses.  # noqa: E501

        :return: The emails of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[V4VmOpenApiEmail]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this V10VmOpenApiOrganization.

        List of email addresses.  # noqa: E501

        :param emails: The emails of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[V4VmOpenApiEmail]
        """

        self._emails = emails

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this V10VmOpenApiOrganization.  # noqa: E501

        List of organizations phone numbers.  # noqa: E501

        :return: The phone_numbers of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[V4VmOpenApiPhone]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this V10VmOpenApiOrganization.

        List of organizations phone numbers.  # noqa: E501

        :param phone_numbers: The phone_numbers of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[V4VmOpenApiPhone]
        """

        self._phone_numbers = phone_numbers

    @property
    def web_pages(self):
        """Gets the web_pages of this V10VmOpenApiOrganization.  # noqa: E501

        List of organizations web pages.  # noqa: E501

        :return: The web_pages of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[V9VmOpenApiWebPage]
        """
        return self._web_pages

    @web_pages.setter
    def web_pages(self, web_pages):
        """Sets the web_pages of this V10VmOpenApiOrganization.

        List of organizations web pages.  # noqa: E501

        :param web_pages: The web_pages of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[V9VmOpenApiWebPage]
        """

        self._web_pages = web_pages

    @property
    def electronic_invoicings(self):
        """Gets the electronic_invoicings of this V10VmOpenApiOrganization.  # noqa: E501

        List of organizations electronic invoicing information.  # noqa: E501

        :return: The electronic_invoicings of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[VmOpenApiOrganizationEInvoicing]
        """
        return self._electronic_invoicings

    @electronic_invoicings.setter
    def electronic_invoicings(self, electronic_invoicings):
        """Sets the electronic_invoicings of this V10VmOpenApiOrganization.

        List of organizations electronic invoicing information.  # noqa: E501

        :param electronic_invoicings: The electronic_invoicings of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[VmOpenApiOrganizationEInvoicing]
        """

        self._electronic_invoicings = electronic_invoicings

    @property
    def business_id(self):
        """Gets the business_id of this V10VmOpenApiOrganization.  # noqa: E501

        Business code entity identifier.  # noqa: E501

        :return: The business_id of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: str
        """
        return self._business_id

    @business_id.setter
    def business_id(self, business_id):
        """Sets the business_id of this V10VmOpenApiOrganization.

        Business code entity identifier.  # noqa: E501

        :param business_id: The business_id of this V10VmOpenApiOrganization.  # noqa: E501
        :type: str
        """

        self._business_id = business_id

    @property
    def version_id(self):
        """Gets the version_id of this V10VmOpenApiOrganization.  # noqa: E501

        The identifier for current version.  # noqa: E501

        :return: The version_id of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this V10VmOpenApiOrganization.

        The identifier for current version.  # noqa: E501

        :param version_id: The version_id of this V10VmOpenApiOrganization.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def parent_organization_id(self):
        """Gets the parent_organization_id of this V10VmOpenApiOrganization.  # noqa: E501

        Organizations parent organization identifier if exists.  # noqa: E501

        :return: The parent_organization_id of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: str
        """
        return self._parent_organization_id

    @parent_organization_id.setter
    def parent_organization_id(self, parent_organization_id):
        """Sets the parent_organization_id of this V10VmOpenApiOrganization.

        Organizations parent organization identifier if exists.  # noqa: E501

        :param parent_organization_id: The parent_organization_id of this V10VmOpenApiOrganization.  # noqa: E501
        :type: str
        """

        self._parent_organization_id = parent_organization_id

    @property
    def organization_root_id(self):
        """Gets the organization_root_id of this V10VmOpenApiOrganization.  # noqa: E501

        Organizations root organization identifier if exists.  # noqa: E501

        :return: The organization_root_id of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: str
        """
        return self._organization_root_id

    @organization_root_id.setter
    def organization_root_id(self, organization_root_id):
        """Sets the organization_root_id of this V10VmOpenApiOrganization.

        Organizations root organization identifier if exists.  # noqa: E501

        :param organization_root_id: The organization_root_id of this V10VmOpenApiOrganization.  # noqa: E501
        :type: str
        """

        self._organization_root_id = organization_root_id

    @property
    def municipality(self):
        """Gets the municipality of this V10VmOpenApiOrganization.  # noqa: E501


        :return: The municipality of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: VmOpenApiMunicipality
        """
        return self._municipality

    @municipality.setter
    def municipality(self, municipality):
        """Sets the municipality of this V10VmOpenApiOrganization.


        :param municipality: The municipality of this V10VmOpenApiOrganization.  # noqa: E501
        :type: VmOpenApiMunicipality
        """

        self._municipality = municipality

    @property
    def areas(self):
        """Gets the areas of this V10VmOpenApiOrganization.  # noqa: E501

        List of organization areas.  # noqa: E501

        :return: The areas of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[VmOpenApiArea]
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this V10VmOpenApiOrganization.

        List of organization areas.  # noqa: E501

        :param areas: The areas of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[VmOpenApiArea]
        """

        self._areas = areas

    @property
    def area_municipalities(self):
        """Gets the area_municipalities of this V10VmOpenApiOrganization.  # noqa: E501

        List of organization area municipalities  # noqa: E501

        :return: The area_municipalities of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[VmOpenApiMunicipality]
        """
        return self._area_municipalities

    @area_municipalities.setter
    def area_municipalities(self, area_municipalities):
        """Sets the area_municipalities of this V10VmOpenApiOrganization.

        List of organization area municipalities  # noqa: E501

        :param area_municipalities: The area_municipalities of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[VmOpenApiMunicipality]
        """

        self._area_municipalities = area_municipalities

    @property
    def addresses(self):
        """Gets the addresses of this V10VmOpenApiOrganization.  # noqa: E501

        List of organizations addresses.  # noqa: E501

        :return: The addresses of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[V9VmOpenApiAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this V10VmOpenApiOrganization.

        List of organizations addresses.  # noqa: E501

        :param addresses: The addresses of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[V9VmOpenApiAddress]
        """

        self._addresses = addresses

    @property
    def publishing_status(self):
        """Gets the publishing_status of this V10VmOpenApiOrganization.  # noqa: E501

        Publishing status (Draft, Published, Deleted or Modified).  # noqa: E501

        :return: The publishing_status of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: str
        """
        return self._publishing_status

    @publishing_status.setter
    def publishing_status(self, publishing_status):
        """Sets the publishing_status of this V10VmOpenApiOrganization.

        Publishing status (Draft, Published, Deleted or Modified).  # noqa: E501

        :param publishing_status: The publishing_status of this V10VmOpenApiOrganization.  # noqa: E501
        :type: str
        """

        self._publishing_status = publishing_status

    @property
    def services(self):
        """Gets the services of this V10VmOpenApiOrganization.  # noqa: E501

        List of organizations services.  # noqa: E501

        :return: The services of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[V10VmOpenApiOrganizationService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this V10VmOpenApiOrganization.

        List of organizations services.  # noqa: E501

        :param services: The services of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[V10VmOpenApiOrganizationService]
        """

        self._services = services

    @property
    def responsible_organization_services(self):
        """Gets the responsible_organization_services of this V10VmOpenApiOrganization.  # noqa: E501

        List of organizations services where organization is main responsible.  # noqa: E501

        :return: The responsible_organization_services of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[VmOpenApiItem]
        """
        return self._responsible_organization_services

    @responsible_organization_services.setter
    def responsible_organization_services(self, responsible_organization_services):
        """Sets the responsible_organization_services of this V10VmOpenApiOrganization.

        List of organizations services where organization is main responsible.  # noqa: E501

        :param responsible_organization_services: The responsible_organization_services of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[VmOpenApiItem]
        """

        self._responsible_organization_services = responsible_organization_services

    @property
    def producer_organization_services(self):
        """Gets the producer_organization_services of this V10VmOpenApiOrganization.  # noqa: E501

        List of organizations services where organization is a producer.  # noqa: E501

        :return: The producer_organization_services of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[V10VmOpenApiOrganizationService]
        """
        return self._producer_organization_services

    @producer_organization_services.setter
    def producer_organization_services(self, producer_organization_services):
        """Sets the producer_organization_services of this V10VmOpenApiOrganization.

        List of organizations services where organization is a producer.  # noqa: E501

        :param producer_organization_services: The producer_organization_services of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[V10VmOpenApiOrganizationService]
        """

        self._producer_organization_services = producer_organization_services

    @property
    def modified(self):
        """Gets the modified of this V10VmOpenApiOrganization.  # noqa: E501

        Date when item was modified/created (UTC).  # noqa: E501

        :return: The modified of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this V10VmOpenApiOrganization.

        Date when item was modified/created (UTC).  # noqa: E501

        :param modified: The modified of this V10VmOpenApiOrganization.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def sub_organizations(self):
        """Gets the sub_organizations of this V10VmOpenApiOrganization.  # noqa: E501

        The sub organizations  # noqa: E501

        :return: The sub_organizations of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[VmOpenApiItem]
        """
        return self._sub_organizations

    @sub_organizations.setter
    def sub_organizations(self, sub_organizations):
        """Sets the sub_organizations of this V10VmOpenApiOrganization.

        The sub organizations  # noqa: E501

        :param sub_organizations: The sub_organizations of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[VmOpenApiItem]
        """

        self._sub_organizations = sub_organizations

    @property
    def available_languages(self):
        """Gets the available_languages of this V10VmOpenApiOrganization.  # noqa: E501

        Gets or sets available languages  # noqa: E501

        :return: The available_languages of this V10VmOpenApiOrganization.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_languages

    @available_languages.setter
    def available_languages(self, available_languages):
        """Sets the available_languages of this V10VmOpenApiOrganization.

        Gets or sets available languages  # noqa: E501

        :param available_languages: The available_languages of this V10VmOpenApiOrganization.  # noqa: E501
        :type: list[str]
        """

        self._available_languages = available_languages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V10VmOpenApiOrganization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V10VmOpenApiOrganization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
