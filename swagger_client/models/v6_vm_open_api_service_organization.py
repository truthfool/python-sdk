# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V6VmOpenApiServiceOrganization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role_type': 'str',
        'additional_information': 'list[VmOpenApiLanguageItem]',
        'organization': 'VmOpenApiItem',
        'provision_type': 'str',
        'service_id': 'str',
        'owner_reference_id': 'str',
        'organization_id': 'str'
    }

    attribute_map = {
        'role_type': 'roleType',
        'additional_information': 'additionalInformation',
        'organization': 'organization',
        'provision_type': 'provisionType',
        'service_id': 'serviceId',
        'owner_reference_id': 'ownerReferenceId',
        'organization_id': 'organizationId'
    }

    def __init__(self, role_type=None, additional_information=None, organization=None, provision_type=None, service_id=None, owner_reference_id=None, organization_id=None):  # noqa: E501
        """V6VmOpenApiServiceOrganization - a model defined in Swagger"""  # noqa: E501
        self._role_type = None
        self._additional_information = None
        self._organization = None
        self._provision_type = None
        self._service_id = None
        self._owner_reference_id = None
        self._organization_id = None
        self.discriminator = None
        self.role_type = role_type
        if additional_information is not None:
            self.additional_information = additional_information
        if organization is not None:
            self.organization = organization
        if provision_type is not None:
            self.provision_type = provision_type
        if service_id is not None:
            self.service_id = service_id
        if owner_reference_id is not None:
            self.owner_reference_id = owner_reference_id
        if organization_id is not None:
            self.organization_id = organization_id

    @property
    def role_type(self):
        """Gets the role_type of this V6VmOpenApiServiceOrganization.  # noqa: E501

        Role type, valid values Responsible or Producer. In version 7 and upper also OtherResponsible role type is used.  # noqa: E501

        :return: The role_type of this V6VmOpenApiServiceOrganization.  # noqa: E501
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this V6VmOpenApiServiceOrganization.

        Role type, valid values Responsible or Producer. In version 7 and upper also OtherResponsible role type is used.  # noqa: E501

        :param role_type: The role_type of this V6VmOpenApiServiceOrganization.  # noqa: E501
        :type: str
        """
        if role_type is None:
            raise ValueError("Invalid value for `role_type`, must not be `None`")  # noqa: E501

        self._role_type = role_type

    @property
    def additional_information(self):
        """Gets the additional_information of this V6VmOpenApiServiceOrganization.  # noqa: E501

        Localized list of additional information.  # noqa: E501

        :return: The additional_information of this V6VmOpenApiServiceOrganization.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this V6VmOpenApiServiceOrganization.

        Localized list of additional information.  # noqa: E501

        :param additional_information: The additional_information of this V6VmOpenApiServiceOrganization.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """

        self._additional_information = additional_information

    @property
    def organization(self):
        """Gets the organization of this V6VmOpenApiServiceOrganization.  # noqa: E501


        :return: The organization of this V6VmOpenApiServiceOrganization.  # noqa: E501
        :rtype: VmOpenApiItem
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this V6VmOpenApiServiceOrganization.


        :param organization: The organization of this V6VmOpenApiServiceOrganization.  # noqa: E501
        :type: VmOpenApiItem
        """

        self._organization = organization

    @property
    def provision_type(self):
        """Gets the provision_type of this V6VmOpenApiServiceOrganization.  # noqa: E501

        Provision type, valid values for version 8 are SelfProducedServices, ProcuredServices or Other.  For older versions valid values are SelfProduced, PurchaseServices or Other.  # noqa: E501

        :return: The provision_type of this V6VmOpenApiServiceOrganization.  # noqa: E501
        :rtype: str
        """
        return self._provision_type

    @provision_type.setter
    def provision_type(self, provision_type):
        """Sets the provision_type of this V6VmOpenApiServiceOrganization.

        Provision type, valid values for version 8 are SelfProducedServices, ProcuredServices or Other.  For older versions valid values are SelfProduced, PurchaseServices or Other.  # noqa: E501

        :param provision_type: The provision_type of this V6VmOpenApiServiceOrganization.  # noqa: E501
        :type: str
        """

        self._provision_type = provision_type

    @property
    def service_id(self):
        """Gets the service_id of this V6VmOpenApiServiceOrganization.  # noqa: E501

        Gets or sets the service identifier.  # noqa: E501

        :return: The service_id of this V6VmOpenApiServiceOrganization.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this V6VmOpenApiServiceOrganization.

        Gets or sets the service identifier.  # noqa: E501

        :param service_id: The service_id of this V6VmOpenApiServiceOrganization.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def owner_reference_id(self):
        """Gets the owner_reference_id of this V6VmOpenApiServiceOrganization.  # noqa: E501

        Gets or sets the owner reference identifier.  # noqa: E501

        :return: The owner_reference_id of this V6VmOpenApiServiceOrganization.  # noqa: E501
        :rtype: str
        """
        return self._owner_reference_id

    @owner_reference_id.setter
    def owner_reference_id(self, owner_reference_id):
        """Sets the owner_reference_id of this V6VmOpenApiServiceOrganization.

        Gets or sets the owner reference identifier.  # noqa: E501

        :param owner_reference_id: The owner_reference_id of this V6VmOpenApiServiceOrganization.  # noqa: E501
        :type: str
        """

        self._owner_reference_id = owner_reference_id

    @property
    def organization_id(self):
        """Gets the organization_id of this V6VmOpenApiServiceOrganization.  # noqa: E501

        Organization identifier  # noqa: E501

        :return: The organization_id of this V6VmOpenApiServiceOrganization.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this V6VmOpenApiServiceOrganization.

        Organization identifier  # noqa: E501

        :param organization_id: The organization_id of this V6VmOpenApiServiceOrganization.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V6VmOpenApiServiceOrganization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V6VmOpenApiServiceOrganization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
