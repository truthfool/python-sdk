# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V11VmOpenApiServiceAndChannelRelationBySourceInBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delete_all_channel_relations': 'bool',
        'channel_relations': 'list[V11VmOpenApiServiceServiceChannelBySource]'
    }

    attribute_map = {
        'delete_all_channel_relations': 'deleteAllChannelRelations',
        'channel_relations': 'channelRelations'
    }

    def __init__(self, delete_all_channel_relations=None, channel_relations=None):  # noqa: E501
        """V11VmOpenApiServiceAndChannelRelationBySourceInBase - a model defined in Swagger"""  # noqa: E501
        self._delete_all_channel_relations = None
        self._channel_relations = None
        self.discriminator = None
        if delete_all_channel_relations is not None:
            self.delete_all_channel_relations = delete_all_channel_relations
        if channel_relations is not None:
            self.channel_relations = channel_relations

    @property
    def delete_all_channel_relations(self):
        """Gets the delete_all_channel_relations of this V11VmOpenApiServiceAndChannelRelationBySourceInBase.  # noqa: E501

        Set to true to delete all existing relations between defined service and service channels (the ChannelRelations collection for this object should be empty collection when this option is used).  # noqa: E501

        :return: The delete_all_channel_relations of this V11VmOpenApiServiceAndChannelRelationBySourceInBase.  # noqa: E501
        :rtype: bool
        """
        return self._delete_all_channel_relations

    @delete_all_channel_relations.setter
    def delete_all_channel_relations(self, delete_all_channel_relations):
        """Sets the delete_all_channel_relations of this V11VmOpenApiServiceAndChannelRelationBySourceInBase.

        Set to true to delete all existing relations between defined service and service channels (the ChannelRelations collection for this object should be empty collection when this option is used).  # noqa: E501

        :param delete_all_channel_relations: The delete_all_channel_relations of this V11VmOpenApiServiceAndChannelRelationBySourceInBase.  # noqa: E501
        :type: bool
        """

        self._delete_all_channel_relations = delete_all_channel_relations

    @property
    def channel_relations(self):
        """Gets the channel_relations of this V11VmOpenApiServiceAndChannelRelationBySourceInBase.  # noqa: E501

        Gets or sets the channel relations.  # noqa: E501

        :return: The channel_relations of this V11VmOpenApiServiceAndChannelRelationBySourceInBase.  # noqa: E501
        :rtype: list[V11VmOpenApiServiceServiceChannelBySource]
        """
        return self._channel_relations

    @channel_relations.setter
    def channel_relations(self, channel_relations):
        """Sets the channel_relations of this V11VmOpenApiServiceAndChannelRelationBySourceInBase.

        Gets or sets the channel relations.  # noqa: E501

        :param channel_relations: The channel_relations of this V11VmOpenApiServiceAndChannelRelationBySourceInBase.  # noqa: E501
        :type: list[V11VmOpenApiServiceServiceChannelBySource]
        """

        self._channel_relations = channel_relations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V11VmOpenApiServiceAndChannelRelationBySourceInBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V11VmOpenApiServiceAndChannelRelationBySourceInBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
