# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VmOpenApiArea(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'code': 'str',
        'name': 'list[VmOpenApiLanguageItem]',
        'municipalities': 'list[VmOpenApiMunicipality]',
        'owner_reference_id': 'str'
    }

    attribute_map = {
        'type': 'type',
        'code': 'code',
        'name': 'name',
        'municipalities': 'municipalities',
        'owner_reference_id': 'ownerReferenceId'
    }

    def __init__(self, type=None, code=None, name=None, municipalities=None, owner_reference_id=None):  # noqa: E501
        """VmOpenApiArea - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._code = None
        self._name = None
        self._municipalities = None
        self._owner_reference_id = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if municipalities is not None:
            self.municipalities = municipalities
        if owner_reference_id is not None:
            self.owner_reference_id = owner_reference_id

    @property
    def type(self):
        """Gets the type of this VmOpenApiArea.  # noqa: E501

        Type of the area. Possible values are: Municipality, Region, BusinessSubRegion, HospitalDistrict.  In version 7 and older: Municipality, Province, BusinessRegions, HospitalRegions.  # noqa: E501

        :return: The type of this VmOpenApiArea.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VmOpenApiArea.

        Type of the area. Possible values are: Municipality, Region, BusinessSubRegion, HospitalDistrict.  In version 7 and older: Municipality, Province, BusinessRegions, HospitalRegions.  # noqa: E501

        :param type: The type of this VmOpenApiArea.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def code(self):
        """Gets the code of this VmOpenApiArea.  # noqa: E501

        Code of the area.  # noqa: E501

        :return: The code of this VmOpenApiArea.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this VmOpenApiArea.

        Code of the area.  # noqa: E501

        :param code: The code of this VmOpenApiArea.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this VmOpenApiArea.  # noqa: E501

        Localized list of names for the area  # noqa: E501

        :return: The name of this VmOpenApiArea.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VmOpenApiArea.

        Localized list of names for the area  # noqa: E501

        :param name: The name of this VmOpenApiArea.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """

        self._name = name

    @property
    def municipalities(self):
        """Gets the municipalities of this VmOpenApiArea.  # noqa: E501

        List of municipalities including municipality code and a localized list of municipality names.  # noqa: E501

        :return: The municipalities of this VmOpenApiArea.  # noqa: E501
        :rtype: list[VmOpenApiMunicipality]
        """
        return self._municipalities

    @municipalities.setter
    def municipalities(self, municipalities):
        """Sets the municipalities of this VmOpenApiArea.

        List of municipalities including municipality code and a localized list of municipality names.  # noqa: E501

        :param municipalities: The municipalities of this VmOpenApiArea.  # noqa: E501
        :type: list[VmOpenApiMunicipality]
        """

        self._municipalities = municipalities

    @property
    def owner_reference_id(self):
        """Gets the owner_reference_id of this VmOpenApiArea.  # noqa: E501

        Gets or sets the owner reference identifier.  # noqa: E501

        :return: The owner_reference_id of this VmOpenApiArea.  # noqa: E501
        :rtype: str
        """
        return self._owner_reference_id

    @owner_reference_id.setter
    def owner_reference_id(self, owner_reference_id):
        """Sets the owner_reference_id of this VmOpenApiArea.

        Gets or sets the owner reference identifier.  # noqa: E501

        :param owner_reference_id: The owner_reference_id of this VmOpenApiArea.  # noqa: E501
        :type: str
        """

        self._owner_reference_id = owner_reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VmOpenApiArea, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VmOpenApiArea):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
