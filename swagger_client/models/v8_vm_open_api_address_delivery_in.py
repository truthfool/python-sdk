# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V8VmOpenApiAddressDeliveryIn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'sub_type': 'str',
        'post_office_box_address': 'VmOpenApiAddressPostOfficeBoxIn',
        'street_address': 'VmOpenApiAddressStreetIn',
        'delivery_address_in_text': 'list[VmOpenApiLanguageItem]',
        'form_receiver': 'list[VmOpenApiLanguageItem]',
        'order_number': 'int'
    }

    attribute_map = {
        'id': 'id',
        'sub_type': 'subType',
        'post_office_box_address': 'postOfficeBoxAddress',
        'street_address': 'streetAddress',
        'delivery_address_in_text': 'deliveryAddressInText',
        'form_receiver': 'formReceiver',
        'order_number': 'orderNumber'
    }

    def __init__(self, id=None, sub_type=None, post_office_box_address=None, street_address=None, delivery_address_in_text=None, form_receiver=None, order_number=None):  # noqa: E501
        """V8VmOpenApiAddressDeliveryIn - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._sub_type = None
        self._post_office_box_address = None
        self._street_address = None
        self._delivery_address_in_text = None
        self._form_receiver = None
        self._order_number = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.sub_type = sub_type
        if post_office_box_address is not None:
            self.post_office_box_address = post_office_box_address
        if street_address is not None:
            self.street_address = street_address
        if delivery_address_in_text is not None:
            self.delivery_address_in_text = delivery_address_in_text
        if form_receiver is not None:
            self.form_receiver = form_receiver
        if order_number is not None:
            self.order_number = order_number

    @property
    def id(self):
        """Gets the id of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501

        Gets or sets the identifier.  # noqa: E501

        :return: The id of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V8VmOpenApiAddressDeliveryIn.

        Gets or sets the identifier.  # noqa: E501

        :param id: The id of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def sub_type(self):
        """Gets the sub_type of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501

        Address sub type, Street, PostOfficeBox or NoAddress.  # noqa: E501

        :return: The sub_type of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this V8VmOpenApiAddressDeliveryIn.

        Address sub type, Street, PostOfficeBox or NoAddress.  # noqa: E501

        :param sub_type: The sub_type of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501
        :type: str
        """
        if sub_type is None:
            raise ValueError("Invalid value for `sub_type`, must not be `None`")  # noqa: E501

        self._sub_type = sub_type

    @property
    def post_office_box_address(self):
        """Gets the post_office_box_address of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501


        :return: The post_office_box_address of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501
        :rtype: VmOpenApiAddressPostOfficeBoxIn
        """
        return self._post_office_box_address

    @post_office_box_address.setter
    def post_office_box_address(self, post_office_box_address):
        """Sets the post_office_box_address of this V8VmOpenApiAddressDeliveryIn.


        :param post_office_box_address: The post_office_box_address of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501
        :type: VmOpenApiAddressPostOfficeBoxIn
        """

        self._post_office_box_address = post_office_box_address

    @property
    def street_address(self):
        """Gets the street_address of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501


        :return: The street_address of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501
        :rtype: VmOpenApiAddressStreetIn
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this V8VmOpenApiAddressDeliveryIn.


        :param street_address: The street_address of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501
        :type: VmOpenApiAddressStreetIn
        """

        self._street_address = street_address

    @property
    def delivery_address_in_text(self):
        """Gets the delivery_address_in_text of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501

        Localized list of foreign address information. (Max.Length: 150).  # noqa: E501

        :return: The delivery_address_in_text of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._delivery_address_in_text

    @delivery_address_in_text.setter
    def delivery_address_in_text(self, delivery_address_in_text):
        """Sets the delivery_address_in_text of this V8VmOpenApiAddressDeliveryIn.

        Localized list of foreign address information. (Max.Length: 150).  # noqa: E501

        :param delivery_address_in_text: The delivery_address_in_text of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """

        self._delivery_address_in_text = delivery_address_in_text

    @property
    def form_receiver(self):
        """Gets the form_receiver of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501

        List of localized form receivers. One per language. (Max.Length: 100).  # noqa: E501

        :return: The form_receiver of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._form_receiver

    @form_receiver.setter
    def form_receiver(self, form_receiver):
        """Sets the form_receiver of this V8VmOpenApiAddressDeliveryIn.

        List of localized form receivers. One per language. (Max.Length: 100).  # noqa: E501

        :param form_receiver: The form_receiver of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """

        self._form_receiver = form_receiver

    @property
    def order_number(self):
        """Gets the order_number of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501

        Gets or sets the order number  # noqa: E501

        :return: The order_number of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501
        :rtype: int
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this V8VmOpenApiAddressDeliveryIn.

        Gets or sets the order number  # noqa: E501

        :param order_number: The order_number of this V8VmOpenApiAddressDeliveryIn.  # noqa: E501
        :type: int
        """

        self._order_number = order_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V8VmOpenApiAddressDeliveryIn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V8VmOpenApiAddressDeliveryIn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
