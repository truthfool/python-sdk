# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V9VmOpenApiServiceIn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_id': 'str',
        'legislation': 'list[V4VmOpenApiLaw]',
        'keywords': 'list[VmOpenApiLanguageItem]',
        'requirements': 'list[VmOpenApiLanguageItem]',
        'service_vouchers_in_use': 'bool',
        'service_vouchers': 'list[V9VmOpenApiServiceVoucher]',
        'version_id': 'str',
        'id': 'str',
        'general_description_id': 'str',
        'life_events': 'list[str]',
        'industrial_classes': 'list[str]',
        'other_responsible_organizations': 'list[str]',
        'valid_from': 'datetime',
        'valid_to': 'datetime',
        'current_publishing_status': 'str',
        'service_service_channels': 'list[V11VmOpenApiServiceServiceChannelAstiInBase]',
        'user_name': 'str',
        'available_languages': 'list[str]',
        'required_properties_available_languages': 'list[str]',
        'service_charge_type': 'str',
        'areas': 'list[VmOpenApiAreaIn]',
        'service_classes': 'list[str]',
        'ontology_terms': 'list[str]',
        'target_groups': 'list[str]',
        'delete_all_service_vouchers': 'bool',
        'type': 'str',
        'funding_type': 'str',
        'service_names': 'list[VmOpenApiLocalizedListItem]',
        'area_type': 'str',
        'service_descriptions': 'list[VmOpenApiLocalizedListItem]',
        'languages': 'list[str]',
        'service_producers': 'list[V9VmOpenApiServiceProducerIn]',
        'publishing_status': 'str',
        'service_channels': 'list[str]',
        'main_responsible_organization': 'str',
        'delete_all_life_events': 'bool',
        'delete_all_industrial_classes': 'bool',
        'delete_all_keywords': 'bool',
        'delete_all_municipalities': 'bool',
        'delete_all_laws': 'bool',
        'delete_service_charge_type': 'bool',
        'delete_general_description_id': 'bool'
    }

    attribute_map = {
        'source_id': 'sourceId',
        'legislation': 'legislation',
        'keywords': 'keywords',
        'requirements': 'requirements',
        'service_vouchers_in_use': 'serviceVouchersInUse',
        'service_vouchers': 'serviceVouchers',
        'version_id': 'versionId',
        'id': 'id',
        'general_description_id': 'generalDescriptionId',
        'life_events': 'lifeEvents',
        'industrial_classes': 'industrialClasses',
        'other_responsible_organizations': 'otherResponsibleOrganizations',
        'valid_from': 'validFrom',
        'valid_to': 'validTo',
        'current_publishing_status': 'currentPublishingStatus',
        'service_service_channels': 'serviceServiceChannels',
        'user_name': 'userName',
        'available_languages': 'availableLanguages',
        'required_properties_available_languages': 'requiredPropertiesAvailableLanguages',
        'service_charge_type': 'serviceChargeType',
        'areas': 'areas',
        'service_classes': 'serviceClasses',
        'ontology_terms': 'ontologyTerms',
        'target_groups': 'targetGroups',
        'delete_all_service_vouchers': 'deleteAllServiceVouchers',
        'type': 'type',
        'funding_type': 'fundingType',
        'service_names': 'serviceNames',
        'area_type': 'areaType',
        'service_descriptions': 'serviceDescriptions',
        'languages': 'languages',
        'service_producers': 'serviceProducers',
        'publishing_status': 'publishingStatus',
        'service_channels': 'serviceChannels',
        'main_responsible_organization': 'mainResponsibleOrganization',
        'delete_all_life_events': 'deleteAllLifeEvents',
        'delete_all_industrial_classes': 'deleteAllIndustrialClasses',
        'delete_all_keywords': 'deleteAllKeywords',
        'delete_all_municipalities': 'deleteAllMunicipalities',
        'delete_all_laws': 'deleteAllLaws',
        'delete_service_charge_type': 'deleteServiceChargeType',
        'delete_general_description_id': 'deleteGeneralDescriptionId'
    }

    def __init__(self, source_id=None, legislation=None, keywords=None, requirements=None, service_vouchers_in_use=None, service_vouchers=None, version_id=None, id=None, general_description_id=None, life_events=None, industrial_classes=None, other_responsible_organizations=None, valid_from=None, valid_to=None, current_publishing_status=None, service_service_channels=None, user_name=None, available_languages=None, required_properties_available_languages=None, service_charge_type=None, areas=None, service_classes=None, ontology_terms=None, target_groups=None, delete_all_service_vouchers=None, type=None, funding_type=None, service_names=None, area_type=None, service_descriptions=None, languages=None, service_producers=None, publishing_status=None, service_channels=None, main_responsible_organization=None, delete_all_life_events=None, delete_all_industrial_classes=None, delete_all_keywords=None, delete_all_municipalities=None, delete_all_laws=None, delete_service_charge_type=None, delete_general_description_id=None):  # noqa: E501
        """V9VmOpenApiServiceIn - a model defined in Swagger"""  # noqa: E501
        self._source_id = None
        self._legislation = None
        self._keywords = None
        self._requirements = None
        self._service_vouchers_in_use = None
        self._service_vouchers = None
        self._version_id = None
        self._id = None
        self._general_description_id = None
        self._life_events = None
        self._industrial_classes = None
        self._other_responsible_organizations = None
        self._valid_from = None
        self._valid_to = None
        self._current_publishing_status = None
        self._service_service_channels = None
        self._user_name = None
        self._available_languages = None
        self._required_properties_available_languages = None
        self._service_charge_type = None
        self._areas = None
        self._service_classes = None
        self._ontology_terms = None
        self._target_groups = None
        self._delete_all_service_vouchers = None
        self._type = None
        self._funding_type = None
        self._service_names = None
        self._area_type = None
        self._service_descriptions = None
        self._languages = None
        self._service_producers = None
        self._publishing_status = None
        self._service_channels = None
        self._main_responsible_organization = None
        self._delete_all_life_events = None
        self._delete_all_industrial_classes = None
        self._delete_all_keywords = None
        self._delete_all_municipalities = None
        self._delete_all_laws = None
        self._delete_service_charge_type = None
        self._delete_general_description_id = None
        self.discriminator = None
        if source_id is not None:
            self.source_id = source_id
        if legislation is not None:
            self.legislation = legislation
        if keywords is not None:
            self.keywords = keywords
        if requirements is not None:
            self.requirements = requirements
        if service_vouchers_in_use is not None:
            self.service_vouchers_in_use = service_vouchers_in_use
        if service_vouchers is not None:
            self.service_vouchers = service_vouchers
        if version_id is not None:
            self.version_id = version_id
        if id is not None:
            self.id = id
        if general_description_id is not None:
            self.general_description_id = general_description_id
        if life_events is not None:
            self.life_events = life_events
        if industrial_classes is not None:
            self.industrial_classes = industrial_classes
        if other_responsible_organizations is not None:
            self.other_responsible_organizations = other_responsible_organizations
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if current_publishing_status is not None:
            self.current_publishing_status = current_publishing_status
        if service_service_channels is not None:
            self.service_service_channels = service_service_channels
        if user_name is not None:
            self.user_name = user_name
        if available_languages is not None:
            self.available_languages = available_languages
        if required_properties_available_languages is not None:
            self.required_properties_available_languages = required_properties_available_languages
        if service_charge_type is not None:
            self.service_charge_type = service_charge_type
        if areas is not None:
            self.areas = areas
        if service_classes is not None:
            self.service_classes = service_classes
        if ontology_terms is not None:
            self.ontology_terms = ontology_terms
        if target_groups is not None:
            self.target_groups = target_groups
        if delete_all_service_vouchers is not None:
            self.delete_all_service_vouchers = delete_all_service_vouchers
        if type is not None:
            self.type = type
        self.funding_type = funding_type
        if service_names is not None:
            self.service_names = service_names
        self.area_type = area_type
        self.service_descriptions = service_descriptions
        self.languages = languages
        self.service_producers = service_producers
        self.publishing_status = publishing_status
        if service_channels is not None:
            self.service_channels = service_channels
        self.main_responsible_organization = main_responsible_organization
        if delete_all_life_events is not None:
            self.delete_all_life_events = delete_all_life_events
        if delete_all_industrial_classes is not None:
            self.delete_all_industrial_classes = delete_all_industrial_classes
        if delete_all_keywords is not None:
            self.delete_all_keywords = delete_all_keywords
        if delete_all_municipalities is not None:
            self.delete_all_municipalities = delete_all_municipalities
        if delete_all_laws is not None:
            self.delete_all_laws = delete_all_laws
        if delete_service_charge_type is not None:
            self.delete_service_charge_type = delete_service_charge_type
        if delete_general_description_id is not None:
            self.delete_general_description_id = delete_general_description_id

    @property
    def source_id(self):
        """Gets the source_id of this V9VmOpenApiServiceIn.  # noqa: E501

        External system identifier for the entity. User needs to be logged in to be able to get/set value.  # noqa: E501

        :return: The source_id of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this V9VmOpenApiServiceIn.

        External system identifier for the entity. User needs to be logged in to be able to get/set value.  # noqa: E501

        :param source_id: The source_id of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def legislation(self):
        """Gets the legislation of this V9VmOpenApiServiceIn.  # noqa: E501

        List of laws related to the service.  # noqa: E501

        :return: The legislation of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[V4VmOpenApiLaw]
        """
        return self._legislation

    @legislation.setter
    def legislation(self, legislation):
        """Sets the legislation of this V9VmOpenApiServiceIn.

        List of laws related to the service.  # noqa: E501

        :param legislation: The legislation of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[V4VmOpenApiLaw]
        """

        self._legislation = legislation

    @property
    def keywords(self):
        """Gets the keywords of this V9VmOpenApiServiceIn.  # noqa: E501

        List of localized service keywords. (Max.Length: 150).  # noqa: E501

        :return: The keywords of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this V9VmOpenApiServiceIn.

        List of localized service keywords. (Max.Length: 150).  # noqa: E501

        :param keywords: The keywords of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """

        self._keywords = keywords

    @property
    def requirements(self):
        """Gets the requirements of this V9VmOpenApiServiceIn.  # noqa: E501

        Localized service usage requirements (description of requirement). (Max.Length: 2500).  # noqa: E501

        :return: The requirements of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this V9VmOpenApiServiceIn.

        Localized service usage requirements (description of requirement). (Max.Length: 2500).  # noqa: E501

        :param requirements: The requirements of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """

        self._requirements = requirements

    @property
    def service_vouchers_in_use(self):
        """Gets the service_vouchers_in_use of this V9VmOpenApiServiceIn.  # noqa: E501

        Indicates if service vouchers are used in the service.  # noqa: E501

        :return: The service_vouchers_in_use of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: bool
        """
        return self._service_vouchers_in_use

    @service_vouchers_in_use.setter
    def service_vouchers_in_use(self, service_vouchers_in_use):
        """Sets the service_vouchers_in_use of this V9VmOpenApiServiceIn.

        Indicates if service vouchers are used in the service.  # noqa: E501

        :param service_vouchers_in_use: The service_vouchers_in_use of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: bool
        """

        self._service_vouchers_in_use = service_vouchers_in_use

    @property
    def service_vouchers(self):
        """Gets the service_vouchers of this V9VmOpenApiServiceIn.  # noqa: E501

        List of service vouchers.  # noqa: E501

        :return: The service_vouchers of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[V9VmOpenApiServiceVoucher]
        """
        return self._service_vouchers

    @service_vouchers.setter
    def service_vouchers(self, service_vouchers):
        """Sets the service_vouchers of this V9VmOpenApiServiceIn.

        List of service vouchers.  # noqa: E501

        :param service_vouchers: The service_vouchers of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[V9VmOpenApiServiceVoucher]
        """

        self._service_vouchers = service_vouchers

    @property
    def version_id(self):
        """Gets the version_id of this V9VmOpenApiServiceIn.  # noqa: E501

        The identifier for current version.  # noqa: E501

        :return: The version_id of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this V9VmOpenApiServiceIn.

        The identifier for current version.  # noqa: E501

        :param version_id: The version_id of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def id(self):
        """Gets the id of this V9VmOpenApiServiceIn.  # noqa: E501

        PTV service identifier.  # noqa: E501

        :return: The id of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V9VmOpenApiServiceIn.

        PTV service identifier.  # noqa: E501

        :param id: The id of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def general_description_id(self):
        """Gets the general_description_id of this V9VmOpenApiServiceIn.  # noqa: E501

        Valid PTV statutory service general description identifier that this service will be linked to. List of valid identifiers can be retrieved from the endpoint /api/GeneralDescription  # noqa: E501

        :return: The general_description_id of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: str
        """
        return self._general_description_id

    @general_description_id.setter
    def general_description_id(self, general_description_id):
        """Sets the general_description_id of this V9VmOpenApiServiceIn.

        Valid PTV statutory service general description identifier that this service will be linked to. List of valid identifiers can be retrieved from the endpoint /api/GeneralDescription  # noqa: E501

        :param general_description_id: The general_description_id of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: str
        """

        self._general_description_id = general_description_id

    @property
    def life_events(self):
        """Gets the life_events of this V9VmOpenApiServiceIn.  # noqa: E501

        List of life event urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v3017  NOTE! If life event has been defined within attached statutory service general description, the life event is not added for service.  # noqa: E501

        :return: The life_events of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[str]
        """
        return self._life_events

    @life_events.setter
    def life_events(self, life_events):
        """Sets the life_events of this V9VmOpenApiServiceIn.

        List of life event urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v3017  NOTE! If life event has been defined within attached statutory service general description, the life event is not added for service.  # noqa: E501

        :param life_events: The life_events of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[str]
        """

        self._life_events = life_events

    @property
    def industrial_classes(self):
        """Gets the industrial_classes of this V9VmOpenApiServiceIn.  # noqa: E501

        List of industrial class codes (see http://tilastokeskus.fi/meta/luokitukset/toimiala/001-2008/tekstitiedosto_en.txt).  NOTE! If industrial class has been defined within attached statutory service general description, the industrial class is not added for service.  # noqa: E501

        :return: The industrial_classes of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[str]
        """
        return self._industrial_classes

    @industrial_classes.setter
    def industrial_classes(self, industrial_classes):
        """Sets the industrial_classes of this V9VmOpenApiServiceIn.

        List of industrial class codes (see http://tilastokeskus.fi/meta/luokitukset/toimiala/001-2008/tekstitiedosto_en.txt).  NOTE! If industrial class has been defined within attached statutory service general description, the industrial class is not added for service.  # noqa: E501

        :param industrial_classes: The industrial_classes of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[str]
        """

        self._industrial_classes = industrial_classes

    @property
    def other_responsible_organizations(self):
        """Gets the other_responsible_organizations of this V9VmOpenApiServiceIn.  # noqa: E501

        List of other responsible organizations for the service.  # noqa: E501

        :return: The other_responsible_organizations of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[str]
        """
        return self._other_responsible_organizations

    @other_responsible_organizations.setter
    def other_responsible_organizations(self, other_responsible_organizations):
        """Sets the other_responsible_organizations of this V9VmOpenApiServiceIn.

        List of other responsible organizations for the service.  # noqa: E501

        :param other_responsible_organizations: The other_responsible_organizations of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[str]
        """

        self._other_responsible_organizations = other_responsible_organizations

    @property
    def valid_from(self):
        """Gets the valid_from of this V9VmOpenApiServiceIn.  # noqa: E501

        Date when item should be published.  # noqa: E501

        :return: The valid_from of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this V9VmOpenApiServiceIn.

        Date when item should be published.  # noqa: E501

        :param valid_from: The valid_from of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this V9VmOpenApiServiceIn.  # noqa: E501

        Date when item should be archived.  # noqa: E501

        :return: The valid_to of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this V9VmOpenApiServiceIn.

        Date when item should be archived.  # noqa: E501

        :param valid_to: The valid_to of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    @property
    def current_publishing_status(self):
        """Gets the current_publishing_status of this V9VmOpenApiServiceIn.  # noqa: E501

        Current version publishing status.  # noqa: E501

        :return: The current_publishing_status of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: str
        """
        return self._current_publishing_status

    @current_publishing_status.setter
    def current_publishing_status(self, current_publishing_status):
        """Sets the current_publishing_status of this V9VmOpenApiServiceIn.

        Current version publishing status.  # noqa: E501

        :param current_publishing_status: The current_publishing_status of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: str
        """

        self._current_publishing_status = current_publishing_status

    @property
    def service_service_channels(self):
        """Gets the service_service_channels of this V9VmOpenApiServiceIn.  # noqa: E501

        Internal property for adding service channel connections for a service.  This property is also used when attaching general description propsed channels into service (PTV-2315).  # noqa: E501

        :return: The service_service_channels of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[V11VmOpenApiServiceServiceChannelAstiInBase]
        """
        return self._service_service_channels

    @service_service_channels.setter
    def service_service_channels(self, service_service_channels):
        """Sets the service_service_channels of this V9VmOpenApiServiceIn.

        Internal property for adding service channel connections for a service.  This property is also used when attaching general description propsed channels into service (PTV-2315).  # noqa: E501

        :param service_service_channels: The service_service_channels of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[V11VmOpenApiServiceServiceChannelAstiInBase]
        """

        self._service_service_channels = service_service_channels

    @property
    def user_name(self):
        """Gets the user_name of this V9VmOpenApiServiceIn.  # noqa: E501

        User name.  # noqa: E501

        :return: The user_name of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this V9VmOpenApiServiceIn.

        User name.  # noqa: E501

        :param user_name: The user_name of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def available_languages(self):
        """Gets the available_languages of this V9VmOpenApiServiceIn.  # noqa: E501

        Gets or sets available languages  # noqa: E501

        :return: The available_languages of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_languages

    @available_languages.setter
    def available_languages(self, available_languages):
        """Sets the available_languages of this V9VmOpenApiServiceIn.

        Gets or sets available languages  # noqa: E501

        :param available_languages: The available_languages of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[str]
        """

        self._available_languages = available_languages

    @property
    def required_properties_available_languages(self):
        """Gets the required_properties_available_languages of this V9VmOpenApiServiceIn.  # noqa: E501

        Internal property to check the languages within required lists: ServiceNames and ServiceDescriptions  # noqa: E501

        :return: The required_properties_available_languages of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_properties_available_languages

    @required_properties_available_languages.setter
    def required_properties_available_languages(self, required_properties_available_languages):
        """Sets the required_properties_available_languages of this V9VmOpenApiServiceIn.

        Internal property to check the languages within required lists: ServiceNames and ServiceDescriptions  # noqa: E501

        :param required_properties_available_languages: The required_properties_available_languages of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[str]
        """

        self._required_properties_available_languages = required_properties_available_languages

    @property
    def service_charge_type(self):
        """Gets the service_charge_type of this V9VmOpenApiServiceIn.  # noqa: E501

        Service charge type. Possible values are: Chargeable or FreeOfCharge.  NOTE! If service charge type has been defined within attached statutory service general description, the charge type for service is ignored.  # noqa: E501

        :return: The service_charge_type of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: str
        """
        return self._service_charge_type

    @service_charge_type.setter
    def service_charge_type(self, service_charge_type):
        """Sets the service_charge_type of this V9VmOpenApiServiceIn.

        Service charge type. Possible values are: Chargeable or FreeOfCharge.  NOTE! If service charge type has been defined within attached statutory service general description, the charge type for service is ignored.  # noqa: E501

        :param service_charge_type: The service_charge_type of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: str
        """

        self._service_charge_type = service_charge_type

    @property
    def areas(self):
        """Gets the areas of this V9VmOpenApiServiceIn.  # noqa: E501

        List of areas. List can contain different types of areas.  # noqa: E501

        :return: The areas of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[VmOpenApiAreaIn]
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this V9VmOpenApiServiceIn.

        List of areas. List can contain different types of areas.  # noqa: E501

        :param areas: The areas of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[VmOpenApiAreaIn]
        """

        self._areas = areas

    @property
    def service_classes(self):
        """Gets the service_classes of this V9VmOpenApiServiceIn.  # noqa: E501

        List of service class urls (see http://finto.fi/ptvl/fi/).  NOTE! If service class has been defined within attached statutory service general description, the service class is not added for service.  # noqa: E501

        :return: The service_classes of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_classes

    @service_classes.setter
    def service_classes(self, service_classes):
        """Sets the service_classes of this V9VmOpenApiServiceIn.

        List of service class urls (see http://finto.fi/ptvl/fi/).  NOTE! If service class has been defined within attached statutory service general description, the service class is not added for service.  # noqa: E501

        :param service_classes: The service_classes of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[str]
        """

        self._service_classes = service_classes

    @property
    def ontology_terms(self):
        """Gets the ontology_terms of this V9VmOpenApiServiceIn.  # noqa: E501

        List of ontology term urls (see http://finto.fi/koko/fi/).  NOTE! If ontology term has been defined within attached statutory service general description, the ontology term is not added for service.  # noqa: E501

        :return: The ontology_terms of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[str]
        """
        return self._ontology_terms

    @ontology_terms.setter
    def ontology_terms(self, ontology_terms):
        """Sets the ontology_terms of this V9VmOpenApiServiceIn.

        List of ontology term urls (see http://finto.fi/koko/fi/).  NOTE! If ontology term has been defined within attached statutory service general description, the ontology term is not added for service.  # noqa: E501

        :param ontology_terms: The ontology_terms of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[str]
        """

        self._ontology_terms = ontology_terms

    @property
    def target_groups(self):
        """Gets the target_groups of this V9VmOpenApiServiceIn.  # noqa: E501

        List of target group urls (see http://finto.fi/ptvl/fi/page/?uri=http://urn.fi/URN:NBN:fi:au:ptvl:KR).  NOTE! If target group has been defined within attached statutory service general description, the target group is not added for service.  # noqa: E501

        :return: The target_groups of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_groups

    @target_groups.setter
    def target_groups(self, target_groups):
        """Sets the target_groups of this V9VmOpenApiServiceIn.

        List of target group urls (see http://finto.fi/ptvl/fi/page/?uri=http://urn.fi/URN:NBN:fi:au:ptvl:KR).  NOTE! If target group has been defined within attached statutory service general description, the target group is not added for service.  # noqa: E501

        :param target_groups: The target_groups of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[str]
        """

        self._target_groups = target_groups

    @property
    def delete_all_service_vouchers(self):
        """Gets the delete_all_service_vouchers of this V9VmOpenApiServiceIn.  # noqa: E501

        Set to true to delete all existing service vouchers (the ServiceVouchers collection for this object should be empty collection when this option is used).  # noqa: E501

        :return: The delete_all_service_vouchers of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: bool
        """
        return self._delete_all_service_vouchers

    @delete_all_service_vouchers.setter
    def delete_all_service_vouchers(self, delete_all_service_vouchers):
        """Sets the delete_all_service_vouchers of this V9VmOpenApiServiceIn.

        Set to true to delete all existing service vouchers (the ServiceVouchers collection for this object should be empty collection when this option is used).  # noqa: E501

        :param delete_all_service_vouchers: The delete_all_service_vouchers of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: bool
        """

        self._delete_all_service_vouchers = delete_all_service_vouchers

    @property
    def type(self):
        """Gets the type of this V9VmOpenApiServiceIn.  # noqa: E501

        Service type. Possible values are: Service, PermitOrObligation or ProfessionalQualification.  NOTE! If service type has been defined within attached statutory service general description, the type for service is ignored.  # noqa: E501

        :return: The type of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V9VmOpenApiServiceIn.

        Service type. Possible values are: Service, PermitOrObligation or ProfessionalQualification.  NOTE! If service type has been defined within attached statutory service general description, the type for service is ignored.  # noqa: E501

        :param type: The type of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def funding_type(self):
        """Gets the funding_type of this V9VmOpenApiServiceIn.  # noqa: E501

        Service funding type. Possible values are: PubliclyFunded or MarketFunded.  # noqa: E501

        :return: The funding_type of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: str
        """
        return self._funding_type

    @funding_type.setter
    def funding_type(self, funding_type):
        """Sets the funding_type of this V9VmOpenApiServiceIn.

        Service funding type. Possible values are: PubliclyFunded or MarketFunded.  # noqa: E501

        :param funding_type: The funding_type of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: str
        """
        if funding_type is None:
            raise ValueError("Invalid value for `funding_type`, must not be `None`")  # noqa: E501

        self._funding_type = funding_type

    @property
    def service_names(self):
        """Gets the service_names of this V9VmOpenApiServiceIn.  # noqa: E501

        List of service names. Possible type values are: Name, AlternativeName.  # noqa: E501

        :return: The service_names of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[VmOpenApiLocalizedListItem]
        """
        return self._service_names

    @service_names.setter
    def service_names(self, service_names):
        """Sets the service_names of this V9VmOpenApiServiceIn.

        List of service names. Possible type values are: Name, AlternativeName.  # noqa: E501

        :param service_names: The service_names of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[VmOpenApiLocalizedListItem]
        """

        self._service_names = service_names

    @property
    def area_type(self):
        """Gets the area_type of this V9VmOpenApiServiceIn.  # noqa: E501

        Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).  # noqa: E501

        :return: The area_type of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: str
        """
        return self._area_type

    @area_type.setter
    def area_type(self, area_type):
        """Sets the area_type of this V9VmOpenApiServiceIn.

        Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).  # noqa: E501

        :param area_type: The area_type of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: str
        """
        if area_type is None:
            raise ValueError("Invalid value for `area_type`, must not be `None`")  # noqa: E501

        self._area_type = area_type

    @property
    def service_descriptions(self):
        """Gets the service_descriptions of this V9VmOpenApiServiceIn.  # noqa: E501

        List of service descriptions. Possible type values are: Description, Summary, UserInstruction, ValidityTime, ProcessingTime, DeadLine, ChargeTypeAdditionalInfo, ServiceType.  # noqa: E501

        :return: The service_descriptions of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[VmOpenApiLocalizedListItem]
        """
        return self._service_descriptions

    @service_descriptions.setter
    def service_descriptions(self, service_descriptions):
        """Sets the service_descriptions of this V9VmOpenApiServiceIn.

        List of service descriptions. Possible type values are: Description, Summary, UserInstruction, ValidityTime, ProcessingTime, DeadLine, ChargeTypeAdditionalInfo, ServiceType.  # noqa: E501

        :param service_descriptions: The service_descriptions of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[VmOpenApiLocalizedListItem]
        """
        if service_descriptions is None:
            raise ValueError("Invalid value for `service_descriptions`, must not be `None`")  # noqa: E501

        self._service_descriptions = service_descriptions

    @property
    def languages(self):
        """Gets the languages of this V9VmOpenApiServiceIn.  # noqa: E501

        List of service language codes.  # noqa: E501

        :return: The languages of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this V9VmOpenApiServiceIn.

        List of service language codes.  # noqa: E501

        :param languages: The languages of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[str]
        """
        if languages is None:
            raise ValueError("Invalid value for `languages`, must not be `None`")  # noqa: E501

        self._languages = languages

    @property
    def service_producers(self):
        """Gets the service_producers of this V9VmOpenApiServiceIn.  # noqa: E501

        List of service producers  # noqa: E501

        :return: The service_producers of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[V9VmOpenApiServiceProducerIn]
        """
        return self._service_producers

    @service_producers.setter
    def service_producers(self, service_producers):
        """Sets the service_producers of this V9VmOpenApiServiceIn.

        List of service producers  # noqa: E501

        :param service_producers: The service_producers of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[V9VmOpenApiServiceProducerIn]
        """
        if service_producers is None:
            raise ValueError("Invalid value for `service_producers`, must not be `None`")  # noqa: E501

        self._service_producers = service_producers

    @property
    def publishing_status(self):
        """Gets the publishing_status of this V9VmOpenApiServiceIn.  # noqa: E501

        Publishing status. Possible values are: Draft or Published.  # noqa: E501

        :return: The publishing_status of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: str
        """
        return self._publishing_status

    @publishing_status.setter
    def publishing_status(self, publishing_status):
        """Sets the publishing_status of this V9VmOpenApiServiceIn.

        Publishing status. Possible values are: Draft or Published.  # noqa: E501

        :param publishing_status: The publishing_status of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: str
        """
        if publishing_status is None:
            raise ValueError("Invalid value for `publishing_status`, must not be `None`")  # noqa: E501

        self._publishing_status = publishing_status

    @property
    def service_channels(self):
        """Gets the service_channels of this V9VmOpenApiServiceIn.  # noqa: E501

        List of related service channels (GUID).  # noqa: E501

        :return: The service_channels of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_channels

    @service_channels.setter
    def service_channels(self, service_channels):
        """Sets the service_channels of this V9VmOpenApiServiceIn.

        List of related service channels (GUID).  # noqa: E501

        :param service_channels: The service_channels of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: list[str]
        """

        self._service_channels = service_channels

    @property
    def main_responsible_organization(self):
        """Gets the main_responsible_organization of this V9VmOpenApiServiceIn.  # noqa: E501

        Main organization id.  # noqa: E501

        :return: The main_responsible_organization of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: str
        """
        return self._main_responsible_organization

    @main_responsible_organization.setter
    def main_responsible_organization(self, main_responsible_organization):
        """Sets the main_responsible_organization of this V9VmOpenApiServiceIn.

        Main organization id.  # noqa: E501

        :param main_responsible_organization: The main_responsible_organization of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: str
        """
        if main_responsible_organization is None:
            raise ValueError("Invalid value for `main_responsible_organization`, must not be `None`")  # noqa: E501

        self._main_responsible_organization = main_responsible_organization

    @property
    def delete_all_life_events(self):
        """Gets the delete_all_life_events of this V9VmOpenApiServiceIn.  # noqa: E501

        Set to true to delete all existing life events (the LifeEvents collection for this object should be empty collection when this option is used).  # noqa: E501

        :return: The delete_all_life_events of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: bool
        """
        return self._delete_all_life_events

    @delete_all_life_events.setter
    def delete_all_life_events(self, delete_all_life_events):
        """Sets the delete_all_life_events of this V9VmOpenApiServiceIn.

        Set to true to delete all existing life events (the LifeEvents collection for this object should be empty collection when this option is used).  # noqa: E501

        :param delete_all_life_events: The delete_all_life_events of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: bool
        """

        self._delete_all_life_events = delete_all_life_events

    @property
    def delete_all_industrial_classes(self):
        """Gets the delete_all_industrial_classes of this V9VmOpenApiServiceIn.  # noqa: E501

        Set to true to delete all existing industrial classes (the IndustrialClasses collection for this object should be empty collection when this option is used).  # noqa: E501

        :return: The delete_all_industrial_classes of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: bool
        """
        return self._delete_all_industrial_classes

    @delete_all_industrial_classes.setter
    def delete_all_industrial_classes(self, delete_all_industrial_classes):
        """Sets the delete_all_industrial_classes of this V9VmOpenApiServiceIn.

        Set to true to delete all existing industrial classes (the IndustrialClasses collection for this object should be empty collection when this option is used).  # noqa: E501

        :param delete_all_industrial_classes: The delete_all_industrial_classes of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: bool
        """

        self._delete_all_industrial_classes = delete_all_industrial_classes

    @property
    def delete_all_keywords(self):
        """Gets the delete_all_keywords of this V9VmOpenApiServiceIn.  # noqa: E501

        Set to true to delete all existing keywords (the Keywords collection for this object should be empty collection when this option is used).  # noqa: E501

        :return: The delete_all_keywords of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: bool
        """
        return self._delete_all_keywords

    @delete_all_keywords.setter
    def delete_all_keywords(self, delete_all_keywords):
        """Sets the delete_all_keywords of this V9VmOpenApiServiceIn.

        Set to true to delete all existing keywords (the Keywords collection for this object should be empty collection when this option is used).  # noqa: E501

        :param delete_all_keywords: The delete_all_keywords of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: bool
        """

        self._delete_all_keywords = delete_all_keywords

    @property
    def delete_all_municipalities(self):
        """Gets the delete_all_municipalities of this V9VmOpenApiServiceIn.  # noqa: E501

        Set to true to delete all existing municipalities (the Municipalities collection for this object should be empty collection when this option is used).  # noqa: E501

        :return: The delete_all_municipalities of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: bool
        """
        return self._delete_all_municipalities

    @delete_all_municipalities.setter
    def delete_all_municipalities(self, delete_all_municipalities):
        """Sets the delete_all_municipalities of this V9VmOpenApiServiceIn.

        Set to true to delete all existing municipalities (the Municipalities collection for this object should be empty collection when this option is used).  # noqa: E501

        :param delete_all_municipalities: The delete_all_municipalities of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: bool
        """

        self._delete_all_municipalities = delete_all_municipalities

    @property
    def delete_all_laws(self):
        """Gets the delete_all_laws of this V9VmOpenApiServiceIn.  # noqa: E501

        Set to true to delete all existing laws within legislation (the legislation collection for this object should be empty collection when this option is used).  # noqa: E501

        :return: The delete_all_laws of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: bool
        """
        return self._delete_all_laws

    @delete_all_laws.setter
    def delete_all_laws(self, delete_all_laws):
        """Sets the delete_all_laws of this V9VmOpenApiServiceIn.

        Set to true to delete all existing laws within legislation (the legislation collection for this object should be empty collection when this option is used).  # noqa: E501

        :param delete_all_laws: The delete_all_laws of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: bool
        """

        self._delete_all_laws = delete_all_laws

    @property
    def delete_service_charge_type(self):
        """Gets the delete_service_charge_type of this V9VmOpenApiServiceIn.  # noqa: E501

        Set to true to delete service charge type (ServiceChargeType property for this object should be empty when this option is used).  # noqa: E501

        :return: The delete_service_charge_type of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: bool
        """
        return self._delete_service_charge_type

    @delete_service_charge_type.setter
    def delete_service_charge_type(self, delete_service_charge_type):
        """Sets the delete_service_charge_type of this V9VmOpenApiServiceIn.

        Set to true to delete service charge type (ServiceChargeType property for this object should be empty when this option is used).  # noqa: E501

        :param delete_service_charge_type: The delete_service_charge_type of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: bool
        """

        self._delete_service_charge_type = delete_service_charge_type

    @property
    def delete_general_description_id(self):
        """Gets the delete_general_description_id of this V9VmOpenApiServiceIn.  # noqa: E501

        Set to true to delete statutory service general description (GeneralDescriptionId property for this object should be empty when this option is used).  # noqa: E501

        :return: The delete_general_description_id of this V9VmOpenApiServiceIn.  # noqa: E501
        :rtype: bool
        """
        return self._delete_general_description_id

    @delete_general_description_id.setter
    def delete_general_description_id(self, delete_general_description_id):
        """Sets the delete_general_description_id of this V9VmOpenApiServiceIn.

        Set to true to delete statutory service general description (GeneralDescriptionId property for this object should be empty when this option is used).  # noqa: E501

        :param delete_general_description_id: The delete_general_description_id of this V9VmOpenApiServiceIn.  # noqa: E501
        :type: bool
        """

        self._delete_general_description_id = delete_general_description_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V9VmOpenApiServiceIn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V9VmOpenApiServiceIn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
