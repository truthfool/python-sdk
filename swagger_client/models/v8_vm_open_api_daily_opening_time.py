# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V8VmOpenApiDailyOpeningTime(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day_from': 'str',
        'day_to': 'str',
        '_from': 'str',
        'to': 'str',
        'order': 'int',
        'owner_reference_id': 'str'
    }

    attribute_map = {
        'day_from': 'dayFrom',
        'day_to': 'dayTo',
        '_from': 'from',
        'to': 'to',
        'order': 'order',
        'owner_reference_id': 'ownerReferenceId'
    }

    def __init__(self, day_from=None, day_to=None, _from=None, to=None, order=None, owner_reference_id=None):  # noqa: E501
        """V8VmOpenApiDailyOpeningTime - a model defined in Swagger"""  # noqa: E501
        self._day_from = None
        self._day_to = None
        self.__from = None
        self._to = None
        self._order = None
        self._owner_reference_id = None
        self.discriminator = None
        if day_from is not None:
            self.day_from = day_from
        if day_to is not None:
            self.day_to = day_to
        self._from = _from
        self.to = to
        if order is not None:
            self.order = order
        if owner_reference_id is not None:
            self.owner_reference_id = owner_reference_id

    @property
    def day_from(self):
        """Gets the day_from of this V8VmOpenApiDailyOpeningTime.  # noqa: E501

        Starts from weekday (e.g. Monday).  # noqa: E501

        :return: The day_from of this V8VmOpenApiDailyOpeningTime.  # noqa: E501
        :rtype: str
        """
        return self._day_from

    @day_from.setter
    def day_from(self, day_from):
        """Sets the day_from of this V8VmOpenApiDailyOpeningTime.

        Starts from weekday (e.g. Monday).  # noqa: E501

        :param day_from: The day_from of this V8VmOpenApiDailyOpeningTime.  # noqa: E501
        :type: str
        """

        self._day_from = day_from

    @property
    def day_to(self):
        """Gets the day_to of this V8VmOpenApiDailyOpeningTime.  # noqa: E501

        Ends to weekday (e.g. Monday).  # noqa: E501

        :return: The day_to of this V8VmOpenApiDailyOpeningTime.  # noqa: E501
        :rtype: str
        """
        return self._day_to

    @day_to.setter
    def day_to(self, day_to):
        """Sets the day_to of this V8VmOpenApiDailyOpeningTime.

        Ends to weekday (e.g. Monday).  # noqa: E501

        :param day_to: The day_to of this V8VmOpenApiDailyOpeningTime.  # noqa: E501
        :type: str
        """

        self._day_to = day_to

    @property
    def _from(self):
        """Gets the _from of this V8VmOpenApiDailyOpeningTime.  # noqa: E501

        Start time for example 10:00.  # noqa: E501

        :return: The _from of this V8VmOpenApiDailyOpeningTime.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this V8VmOpenApiDailyOpeningTime.

        Start time for example 10:00.  # noqa: E501

        :param _from: The _from of this V8VmOpenApiDailyOpeningTime.  # noqa: E501
        :type: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this V8VmOpenApiDailyOpeningTime.  # noqa: E501

        End time for example 20:00.  # noqa: E501

        :return: The to of this V8VmOpenApiDailyOpeningTime.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this V8VmOpenApiDailyOpeningTime.

        End time for example 20:00.  # noqa: E501

        :param to: The to of this V8VmOpenApiDailyOpeningTime.  # noqa: E501
        :type: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def order(self):
        """Gets the order of this V8VmOpenApiDailyOpeningTime.  # noqa: E501

        Gets or sets the order number.  # noqa: E501

        :return: The order of this V8VmOpenApiDailyOpeningTime.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this V8VmOpenApiDailyOpeningTime.

        Gets or sets the order number.  # noqa: E501

        :param order: The order of this V8VmOpenApiDailyOpeningTime.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def owner_reference_id(self):
        """Gets the owner_reference_id of this V8VmOpenApiDailyOpeningTime.  # noqa: E501

        Gets or sets the owner reference identifier.  # noqa: E501

        :return: The owner_reference_id of this V8VmOpenApiDailyOpeningTime.  # noqa: E501
        :rtype: str
        """
        return self._owner_reference_id

    @owner_reference_id.setter
    def owner_reference_id(self, owner_reference_id):
        """Sets the owner_reference_id of this V8VmOpenApiDailyOpeningTime.

        Gets or sets the owner reference identifier.  # noqa: E501

        :param owner_reference_id: The owner_reference_id of this V8VmOpenApiDailyOpeningTime.  # noqa: E501
        :type: str
        """

        self._owner_reference_id = owner_reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V8VmOpenApiDailyOpeningTime, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V8VmOpenApiDailyOpeningTime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
