# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VmOpenApiTranslationItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_id': 'str',
        'organization_name': 'str',
        'business_code': 'str',
        'orderer': 'str',
        'order_id': 'int',
        'order_state': 'str',
        'order_date': 'datetime',
        'order_resolved_date': 'datetime',
        'source_language': 'str',
        'source_language_char_amount': 'int',
        'target_language': 'str',
        'type': 'str',
        'item_id': 'str',
        'item_name': 'str'
    }

    attribute_map = {
        'organization_id': 'organizationId',
        'organization_name': 'organizationName',
        'business_code': 'businessCode',
        'orderer': 'orderer',
        'order_id': 'orderId',
        'order_state': 'orderState',
        'order_date': 'orderDate',
        'order_resolved_date': 'orderResolvedDate',
        'source_language': 'sourceLanguage',
        'source_language_char_amount': 'sourceLanguageCharAmount',
        'target_language': 'targetLanguage',
        'type': 'type',
        'item_id': 'itemId',
        'item_name': 'itemName'
    }

    def __init__(self, organization_id=None, organization_name=None, business_code=None, orderer=None, order_id=None, order_state=None, order_date=None, order_resolved_date=None, source_language=None, source_language_char_amount=None, target_language=None, type=None, item_id=None, item_name=None):  # noqa: E501
        """VmOpenApiTranslationItem - a model defined in Swagger"""  # noqa: E501
        self._organization_id = None
        self._organization_name = None
        self._business_code = None
        self._orderer = None
        self._order_id = None
        self._order_state = None
        self._order_date = None
        self._order_resolved_date = None
        self._source_language = None
        self._source_language_char_amount = None
        self._target_language = None
        self._type = None
        self._item_id = None
        self._item_name = None
        self.discriminator = None
        if organization_id is not None:
            self.organization_id = organization_id
        if organization_name is not None:
            self.organization_name = organization_name
        if business_code is not None:
            self.business_code = business_code
        if orderer is not None:
            self.orderer = orderer
        if order_id is not None:
            self.order_id = order_id
        if order_state is not None:
            self.order_state = order_state
        if order_date is not None:
            self.order_date = order_date
        if order_resolved_date is not None:
            self.order_resolved_date = order_resolved_date
        if source_language is not None:
            self.source_language = source_language
        if source_language_char_amount is not None:
            self.source_language_char_amount = source_language_char_amount
        if target_language is not None:
            self.target_language = target_language
        if type is not None:
            self.type = type
        if item_id is not None:
            self.item_id = item_id
        if item_name is not None:
            self.item_name = item_name

    @property
    def organization_id(self):
        """Gets the organization_id of this VmOpenApiTranslationItem.  # noqa: E501

        Id of the organization.  # noqa: E501

        :return: The organization_id of this VmOpenApiTranslationItem.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this VmOpenApiTranslationItem.

        Id of the organization.  # noqa: E501

        :param organization_id: The organization_id of this VmOpenApiTranslationItem.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def organization_name(self):
        """Gets the organization_name of this VmOpenApiTranslationItem.  # noqa: E501

        Name of the organization.  # noqa: E501

        :return: The organization_name of this VmOpenApiTranslationItem.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this VmOpenApiTranslationItem.

        Name of the organization.  # noqa: E501

        :param organization_name: The organization_name of this VmOpenApiTranslationItem.  # noqa: E501
        :type: str
        """

        self._organization_name = organization_name

    @property
    def business_code(self):
        """Gets the business_code of this VmOpenApiTranslationItem.  # noqa: E501

        Name of the organization.  # noqa: E501

        :return: The business_code of this VmOpenApiTranslationItem.  # noqa: E501
        :rtype: str
        """
        return self._business_code

    @business_code.setter
    def business_code(self, business_code):
        """Sets the business_code of this VmOpenApiTranslationItem.

        Name of the organization.  # noqa: E501

        :param business_code: The business_code of this VmOpenApiTranslationItem.  # noqa: E501
        :type: str
        """

        self._business_code = business_code

    @property
    def orderer(self):
        """Gets the orderer of this VmOpenApiTranslationItem.  # noqa: E501

        Order made by (email).  # noqa: E501

        :return: The orderer of this VmOpenApiTranslationItem.  # noqa: E501
        :rtype: str
        """
        return self._orderer

    @orderer.setter
    def orderer(self, orderer):
        """Sets the orderer of this VmOpenApiTranslationItem.

        Order made by (email).  # noqa: E501

        :param orderer: The orderer of this VmOpenApiTranslationItem.  # noqa: E501
        :type: str
        """

        self._orderer = orderer

    @property
    def order_id(self):
        """Gets the order_id of this VmOpenApiTranslationItem.  # noqa: E501

        Order identifier.  # noqa: E501

        :return: The order_id of this VmOpenApiTranslationItem.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this VmOpenApiTranslationItem.

        Order identifier.  # noqa: E501

        :param order_id: The order_id of this VmOpenApiTranslationItem.  # noqa: E501
        :type: int
        """

        self._order_id = order_id

    @property
    def order_state(self):
        """Gets the order_state of this VmOpenApiTranslationItem.  # noqa: E501

        Order state.  # noqa: E501

        :return: The order_state of this VmOpenApiTranslationItem.  # noqa: E501
        :rtype: str
        """
        return self._order_state

    @order_state.setter
    def order_state(self, order_state):
        """Sets the order_state of this VmOpenApiTranslationItem.

        Order state.  # noqa: E501

        :param order_state: The order_state of this VmOpenApiTranslationItem.  # noqa: E501
        :type: str
        """

        self._order_state = order_state

    @property
    def order_date(self):
        """Gets the order_date of this VmOpenApiTranslationItem.  # noqa: E501

        Order date.  # noqa: E501

        :return: The order_date of this VmOpenApiTranslationItem.  # noqa: E501
        :rtype: datetime
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this VmOpenApiTranslationItem.

        Order date.  # noqa: E501

        :param order_date: The order_date of this VmOpenApiTranslationItem.  # noqa: E501
        :type: datetime
        """

        self._order_date = order_date

    @property
    def order_resolved_date(self):
        """Gets the order_resolved_date of this VmOpenApiTranslationItem.  # noqa: E501

        Order resolved and delivered date.  # noqa: E501

        :return: The order_resolved_date of this VmOpenApiTranslationItem.  # noqa: E501
        :rtype: datetime
        """
        return self._order_resolved_date

    @order_resolved_date.setter
    def order_resolved_date(self, order_resolved_date):
        """Sets the order_resolved_date of this VmOpenApiTranslationItem.

        Order resolved and delivered date.  # noqa: E501

        :param order_resolved_date: The order_resolved_date of this VmOpenApiTranslationItem.  # noqa: E501
        :type: datetime
        """

        self._order_resolved_date = order_resolved_date

    @property
    def source_language(self):
        """Gets the source_language of this VmOpenApiTranslationItem.  # noqa: E501

        Source language.  # noqa: E501

        :return: The source_language of this VmOpenApiTranslationItem.  # noqa: E501
        :rtype: str
        """
        return self._source_language

    @source_language.setter
    def source_language(self, source_language):
        """Sets the source_language of this VmOpenApiTranslationItem.

        Source language.  # noqa: E501

        :param source_language: The source_language of this VmOpenApiTranslationItem.  # noqa: E501
        :type: str
        """

        self._source_language = source_language

    @property
    def source_language_char_amount(self):
        """Gets the source_language_char_amount of this VmOpenApiTranslationItem.  # noqa: E501

        Amount of chars in source text.  # noqa: E501

        :return: The source_language_char_amount of this VmOpenApiTranslationItem.  # noqa: E501
        :rtype: int
        """
        return self._source_language_char_amount

    @source_language_char_amount.setter
    def source_language_char_amount(self, source_language_char_amount):
        """Sets the source_language_char_amount of this VmOpenApiTranslationItem.

        Amount of chars in source text.  # noqa: E501

        :param source_language_char_amount: The source_language_char_amount of this VmOpenApiTranslationItem.  # noqa: E501
        :type: int
        """

        self._source_language_char_amount = source_language_char_amount

    @property
    def target_language(self):
        """Gets the target_language of this VmOpenApiTranslationItem.  # noqa: E501

        Target language.  # noqa: E501

        :return: The target_language of this VmOpenApiTranslationItem.  # noqa: E501
        :rtype: str
        """
        return self._target_language

    @target_language.setter
    def target_language(self, target_language):
        """Sets the target_language of this VmOpenApiTranslationItem.

        Target language.  # noqa: E501

        :param target_language: The target_language of this VmOpenApiTranslationItem.  # noqa: E501
        :type: str
        """

        self._target_language = target_language

    @property
    def type(self):
        """Gets the type of this VmOpenApiTranslationItem.  # noqa: E501

        Type of the item, either Service or Channel.  # noqa: E501

        :return: The type of this VmOpenApiTranslationItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VmOpenApiTranslationItem.

        Type of the item, either Service or Channel.  # noqa: E501

        :param type: The type of this VmOpenApiTranslationItem.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def item_id(self):
        """Gets the item_id of this VmOpenApiTranslationItem.  # noqa: E501

        Id of the item.  # noqa: E501

        :return: The item_id of this VmOpenApiTranslationItem.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this VmOpenApiTranslationItem.

        Id of the item.  # noqa: E501

        :param item_id: The item_id of this VmOpenApiTranslationItem.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def item_name(self):
        """Gets the item_name of this VmOpenApiTranslationItem.  # noqa: E501

        Name of the item.  # noqa: E501

        :return: The item_name of this VmOpenApiTranslationItem.  # noqa: E501
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this VmOpenApiTranslationItem.

        Name of the item.  # noqa: E501

        :param item_name: The item_name of this VmOpenApiTranslationItem.  # noqa: E501
        :type: str
        """

        self._item_name = item_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VmOpenApiTranslationItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VmOpenApiTranslationItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
