# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V11VmOpenApiService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'source_id': 'str',
        'type': 'str',
        'funding_type': 'str',
        'service_names': 'list[VmOpenApiLocalizedListItem]',
        'service_charge_type': 'str',
        'area_type': 'str',
        'service_descriptions': 'list[VmOpenApiLocalizedListItem]',
        'languages': 'list[str]',
        'legislation': 'list[V4VmOpenApiLaw]',
        'keywords': 'list[VmOpenApiLanguageItem]',
        'requirements': 'list[VmOpenApiLanguageItem]',
        'service_vouchers_in_use': 'bool',
        'service_vouchers': 'list[V9VmOpenApiServiceVoucher]',
        'version_id': 'str',
        'general_description_id': 'str',
        'sub_type': 'str',
        'areas': 'list[VmOpenApiArea]',
        'service_classes': 'list[V7VmOpenApiFintoItemWithDescription]',
        'ontology_terms': 'list[V4VmOpenApiOntologyTerm]',
        'target_groups': 'list[V4VmOpenApiFintoItem]',
        'life_events': 'list[V4VmOpenApiFintoItem]',
        'industrial_classes': 'list[V4VmOpenApiFintoItem]',
        'service_channels': 'list[V11VmOpenApiServiceServiceChannel]',
        'organizations': 'list[V6VmOpenApiServiceOrganization]',
        'service_collections': 'list[VmOpenApiServiceServiceCollection]',
        'publishing_status': 'str',
        'modified': 'datetime',
        'responsible_sote_organization': 'str',
        'main_organization': 'VmOpenApiItem',
        'service_producers': 'list[VmOpenApiServiceProducer]',
        'security': 'ISecurityOwnOrganization',
        'municipalities': 'list[VmOpenApiMunicipality]',
        'available_languages': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'source_id': 'sourceId',
        'type': 'type',
        'funding_type': 'fundingType',
        'service_names': 'serviceNames',
        'service_charge_type': 'serviceChargeType',
        'area_type': 'areaType',
        'service_descriptions': 'serviceDescriptions',
        'languages': 'languages',
        'legislation': 'legislation',
        'keywords': 'keywords',
        'requirements': 'requirements',
        'service_vouchers_in_use': 'serviceVouchersInUse',
        'service_vouchers': 'serviceVouchers',
        'version_id': 'versionId',
        'general_description_id': 'generalDescriptionId',
        'sub_type': 'subType',
        'areas': 'areas',
        'service_classes': 'serviceClasses',
        'ontology_terms': 'ontologyTerms',
        'target_groups': 'targetGroups',
        'life_events': 'lifeEvents',
        'industrial_classes': 'industrialClasses',
        'service_channels': 'serviceChannels',
        'organizations': 'organizations',
        'service_collections': 'serviceCollections',
        'publishing_status': 'publishingStatus',
        'modified': 'modified',
        'responsible_sote_organization': 'responsibleSoteOrganization',
        'main_organization': 'mainOrganization',
        'service_producers': 'serviceProducers',
        'security': 'security',
        'municipalities': 'municipalities',
        'available_languages': 'availableLanguages'
    }

    def __init__(self, id=None, source_id=None, type=None, funding_type=None, service_names=None, service_charge_type=None, area_type=None, service_descriptions=None, languages=None, legislation=None, keywords=None, requirements=None, service_vouchers_in_use=None, service_vouchers=None, version_id=None, general_description_id=None, sub_type=None, areas=None, service_classes=None, ontology_terms=None, target_groups=None, life_events=None, industrial_classes=None, service_channels=None, organizations=None, service_collections=None, publishing_status=None, modified=None, responsible_sote_organization=None, main_organization=None, service_producers=None, security=None, municipalities=None, available_languages=None):  # noqa: E501
        """V11VmOpenApiService - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._source_id = None
        self._type = None
        self._funding_type = None
        self._service_names = None
        self._service_charge_type = None
        self._area_type = None
        self._service_descriptions = None
        self._languages = None
        self._legislation = None
        self._keywords = None
        self._requirements = None
        self._service_vouchers_in_use = None
        self._service_vouchers = None
        self._version_id = None
        self._general_description_id = None
        self._sub_type = None
        self._areas = None
        self._service_classes = None
        self._ontology_terms = None
        self._target_groups = None
        self._life_events = None
        self._industrial_classes = None
        self._service_channels = None
        self._organizations = None
        self._service_collections = None
        self._publishing_status = None
        self._modified = None
        self._responsible_sote_organization = None
        self._main_organization = None
        self._service_producers = None
        self._security = None
        self._municipalities = None
        self._available_languages = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if source_id is not None:
            self.source_id = source_id
        if type is not None:
            self.type = type
        if funding_type is not None:
            self.funding_type = funding_type
        if service_names is not None:
            self.service_names = service_names
        if service_charge_type is not None:
            self.service_charge_type = service_charge_type
        if area_type is not None:
            self.area_type = area_type
        if service_descriptions is not None:
            self.service_descriptions = service_descriptions
        if languages is not None:
            self.languages = languages
        if legislation is not None:
            self.legislation = legislation
        if keywords is not None:
            self.keywords = keywords
        if requirements is not None:
            self.requirements = requirements
        if service_vouchers_in_use is not None:
            self.service_vouchers_in_use = service_vouchers_in_use
        if service_vouchers is not None:
            self.service_vouchers = service_vouchers
        if version_id is not None:
            self.version_id = version_id
        if general_description_id is not None:
            self.general_description_id = general_description_id
        if sub_type is not None:
            self.sub_type = sub_type
        if areas is not None:
            self.areas = areas
        if service_classes is not None:
            self.service_classes = service_classes
        if ontology_terms is not None:
            self.ontology_terms = ontology_terms
        if target_groups is not None:
            self.target_groups = target_groups
        if life_events is not None:
            self.life_events = life_events
        if industrial_classes is not None:
            self.industrial_classes = industrial_classes
        if service_channels is not None:
            self.service_channels = service_channels
        if organizations is not None:
            self.organizations = organizations
        if service_collections is not None:
            self.service_collections = service_collections
        if publishing_status is not None:
            self.publishing_status = publishing_status
        if modified is not None:
            self.modified = modified
        if responsible_sote_organization is not None:
            self.responsible_sote_organization = responsible_sote_organization
        if main_organization is not None:
            self.main_organization = main_organization
        if service_producers is not None:
            self.service_producers = service_producers
        if security is not None:
            self.security = security
        if municipalities is not None:
            self.municipalities = municipalities
        if available_languages is not None:
            self.available_languages = available_languages

    @property
    def id(self):
        """Gets the id of this V11VmOpenApiService.  # noqa: E501

        Entity identifier.  # noqa: E501

        :return: The id of this V11VmOpenApiService.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V11VmOpenApiService.

        Entity identifier.  # noqa: E501

        :param id: The id of this V11VmOpenApiService.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def source_id(self):
        """Gets the source_id of this V11VmOpenApiService.  # noqa: E501

        External system identifier for the entity. User needs to be logged in to be able to get/set value.  # noqa: E501

        :return: The source_id of this V11VmOpenApiService.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this V11VmOpenApiService.

        External system identifier for the entity. User needs to be logged in to be able to get/set value.  # noqa: E501

        :param source_id: The source_id of this V11VmOpenApiService.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def type(self):
        """Gets the type of this V11VmOpenApiService.  # noqa: E501

        Service type. Possible values are: Service, PermitOrObligation or ProfessionalQualification. In version 7 Service, PermissionAndObligation or ProfessionalQualifications.  # noqa: E501

        :return: The type of this V11VmOpenApiService.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V11VmOpenApiService.

        Service type. Possible values are: Service, PermitOrObligation or ProfessionalQualification. In version 7 Service, PermissionAndObligation or ProfessionalQualifications.  # noqa: E501

        :param type: The type of this V11VmOpenApiService.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def funding_type(self):
        """Gets the funding_type of this V11VmOpenApiService.  # noqa: E501

        Service funding type. Possible values are: PubliclyFunded or MarketFunded.  # noqa: E501

        :return: The funding_type of this V11VmOpenApiService.  # noqa: E501
        :rtype: str
        """
        return self._funding_type

    @funding_type.setter
    def funding_type(self, funding_type):
        """Sets the funding_type of this V11VmOpenApiService.

        Service funding type. Possible values are: PubliclyFunded or MarketFunded.  # noqa: E501

        :param funding_type: The funding_type of this V11VmOpenApiService.  # noqa: E501
        :type: str
        """

        self._funding_type = funding_type

    @property
    def service_names(self):
        """Gets the service_names of this V11VmOpenApiService.  # noqa: E501

        List of localized service names. Possible type values are: Name, AlternativeName (in version 7 AlternateName). (Max.Length: 100).  # noqa: E501

        :return: The service_names of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[VmOpenApiLocalizedListItem]
        """
        return self._service_names

    @service_names.setter
    def service_names(self, service_names):
        """Sets the service_names of this V11VmOpenApiService.

        List of localized service names. Possible type values are: Name, AlternativeName (in version 7 AlternateName). (Max.Length: 100).  # noqa: E501

        :param service_names: The service_names of this V11VmOpenApiService.  # noqa: E501
        :type: list[VmOpenApiLocalizedListItem]
        """

        self._service_names = service_names

    @property
    def service_charge_type(self):
        """Gets the service_charge_type of this V11VmOpenApiService.  # noqa: E501

        Service charge type. Possible values are: Chargeable or FreeOfCharge.  In version 7: Charged or Free.  NOTE! If service charge type has been defined within attached statutory service general description, the charge type for service is ignored.  # noqa: E501

        :return: The service_charge_type of this V11VmOpenApiService.  # noqa: E501
        :rtype: str
        """
        return self._service_charge_type

    @service_charge_type.setter
    def service_charge_type(self, service_charge_type):
        """Sets the service_charge_type of this V11VmOpenApiService.

        Service charge type. Possible values are: Chargeable or FreeOfCharge.  In version 7: Charged or Free.  NOTE! If service charge type has been defined within attached statutory service general description, the charge type for service is ignored.  # noqa: E501

        :param service_charge_type: The service_charge_type of this V11VmOpenApiService.  # noqa: E501
        :type: str
        """

        self._service_charge_type = service_charge_type

    @property
    def area_type(self):
        """Gets the area_type of this V11VmOpenApiService.  # noqa: E501

        Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7: WholeCountry, WholeCountryExceptAlandIslands, AreaType.  # noqa: E501

        :return: The area_type of this V11VmOpenApiService.  # noqa: E501
        :rtype: str
        """
        return self._area_type

    @area_type.setter
    def area_type(self, area_type):
        """Sets the area_type of this V11VmOpenApiService.

        Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7: WholeCountry, WholeCountryExceptAlandIslands, AreaType.  # noqa: E501

        :param area_type: The area_type of this V11VmOpenApiService.  # noqa: E501
        :type: str
        """

        self._area_type = area_type

    @property
    def service_descriptions(self):
        """Gets the service_descriptions of this V11VmOpenApiService.  # noqa: E501

        List of localized service descriptions. Possible type values are: Description, Summary, UserInstruction, ValidityTime, ProcessingTime, DeadLine, ChargeTypeAdditionalInfo, ServiceType.  In version 7: Description, ShortDescription, ServiceUserInstruction, ValidityTimeAdditionalInfo, ProcessingTimeAdditionalInfo, DeadLineAdditionalInfo, ChargeTypeAdditionalInfo, ServiceTypeAdditionalInfo.  # noqa: E501

        :return: The service_descriptions of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[VmOpenApiLocalizedListItem]
        """
        return self._service_descriptions

    @service_descriptions.setter
    def service_descriptions(self, service_descriptions):
        """Sets the service_descriptions of this V11VmOpenApiService.

        List of localized service descriptions. Possible type values are: Description, Summary, UserInstruction, ValidityTime, ProcessingTime, DeadLine, ChargeTypeAdditionalInfo, ServiceType.  In version 7: Description, ShortDescription, ServiceUserInstruction, ValidityTimeAdditionalInfo, ProcessingTimeAdditionalInfo, DeadLineAdditionalInfo, ChargeTypeAdditionalInfo, ServiceTypeAdditionalInfo.  # noqa: E501

        :param service_descriptions: The service_descriptions of this V11VmOpenApiService.  # noqa: E501
        :type: list[VmOpenApiLocalizedListItem]
        """

        self._service_descriptions = service_descriptions

    @property
    def languages(self):
        """Gets the languages of this V11VmOpenApiService.  # noqa: E501

        List of service languages.  # noqa: E501

        :return: The languages of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this V11VmOpenApiService.

        List of service languages.  # noqa: E501

        :param languages: The languages of this V11VmOpenApiService.  # noqa: E501
        :type: list[str]
        """

        self._languages = languages

    @property
    def legislation(self):
        """Gets the legislation of this V11VmOpenApiService.  # noqa: E501

        List of laws related to the service.  # noqa: E501

        :return: The legislation of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[V4VmOpenApiLaw]
        """
        return self._legislation

    @legislation.setter
    def legislation(self, legislation):
        """Sets the legislation of this V11VmOpenApiService.

        List of laws related to the service.  # noqa: E501

        :param legislation: The legislation of this V11VmOpenApiService.  # noqa: E501
        :type: list[V4VmOpenApiLaw]
        """

        self._legislation = legislation

    @property
    def keywords(self):
        """Gets the keywords of this V11VmOpenApiService.  # noqa: E501

        List of localized service keywords. (Max.Length: 150).  # noqa: E501

        :return: The keywords of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this V11VmOpenApiService.

        List of localized service keywords. (Max.Length: 150).  # noqa: E501

        :param keywords: The keywords of this V11VmOpenApiService.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """

        self._keywords = keywords

    @property
    def requirements(self):
        """Gets the requirements of this V11VmOpenApiService.  # noqa: E501

        Localized service usage requirements (description of requirement). (Max.Length: 2500).  # noqa: E501

        :return: The requirements of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this V11VmOpenApiService.

        Localized service usage requirements (description of requirement). (Max.Length: 2500).  # noqa: E501

        :param requirements: The requirements of this V11VmOpenApiService.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """

        self._requirements = requirements

    @property
    def service_vouchers_in_use(self):
        """Gets the service_vouchers_in_use of this V11VmOpenApiService.  # noqa: E501

        Indicates if service vouchers are used in the service.  # noqa: E501

        :return: The service_vouchers_in_use of this V11VmOpenApiService.  # noqa: E501
        :rtype: bool
        """
        return self._service_vouchers_in_use

    @service_vouchers_in_use.setter
    def service_vouchers_in_use(self, service_vouchers_in_use):
        """Sets the service_vouchers_in_use of this V11VmOpenApiService.

        Indicates if service vouchers are used in the service.  # noqa: E501

        :param service_vouchers_in_use: The service_vouchers_in_use of this V11VmOpenApiService.  # noqa: E501
        :type: bool
        """

        self._service_vouchers_in_use = service_vouchers_in_use

    @property
    def service_vouchers(self):
        """Gets the service_vouchers of this V11VmOpenApiService.  # noqa: E501

        List of service vouchers.  # noqa: E501

        :return: The service_vouchers of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[V9VmOpenApiServiceVoucher]
        """
        return self._service_vouchers

    @service_vouchers.setter
    def service_vouchers(self, service_vouchers):
        """Sets the service_vouchers of this V11VmOpenApiService.

        List of service vouchers.  # noqa: E501

        :param service_vouchers: The service_vouchers of this V11VmOpenApiService.  # noqa: E501
        :type: list[V9VmOpenApiServiceVoucher]
        """

        self._service_vouchers = service_vouchers

    @property
    def version_id(self):
        """Gets the version_id of this V11VmOpenApiService.  # noqa: E501

        The identifier for current version.  # noqa: E501

        :return: The version_id of this V11VmOpenApiService.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this V11VmOpenApiService.

        The identifier for current version.  # noqa: E501

        :param version_id: The version_id of this V11VmOpenApiService.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def general_description_id(self):
        """Gets the general_description_id of this V11VmOpenApiService.  # noqa: E501

        PTV identifier for linked general description.  # noqa: E501

        :return: The general_description_id of this V11VmOpenApiService.  # noqa: E501
        :rtype: str
        """
        return self._general_description_id

    @general_description_id.setter
    def general_description_id(self, general_description_id):
        """Sets the general_description_id of this V11VmOpenApiService.

        PTV identifier for linked general description.  # noqa: E501

        :param general_description_id: The general_description_id of this V11VmOpenApiService.  # noqa: E501
        :type: str
        """

        self._general_description_id = general_description_id

    @property
    def sub_type(self):
        """Gets the sub_type of this V11VmOpenApiService.  # noqa: E501

        Service sub-type. It is used for SOTE and its taken from GeneralDescription's generalDescriptionType. Possible values are: PrescribedByFreedomOfChoiceAct, OtherPermissionGrantedSote.  # noqa: E501

        :return: The sub_type of this V11VmOpenApiService.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this V11VmOpenApiService.

        Service sub-type. It is used for SOTE and its taken from GeneralDescription's generalDescriptionType. Possible values are: PrescribedByFreedomOfChoiceAct, OtherPermissionGrantedSote.  # noqa: E501

        :param sub_type: The sub_type of this V11VmOpenApiService.  # noqa: E501
        :type: str
        """

        self._sub_type = sub_type

    @property
    def areas(self):
        """Gets the areas of this V11VmOpenApiService.  # noqa: E501

        List of service areas.  # noqa: E501

        :return: The areas of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[VmOpenApiArea]
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this V11VmOpenApiService.

        List of service areas.  # noqa: E501

        :param areas: The areas of this V11VmOpenApiService.  # noqa: E501
        :type: list[VmOpenApiArea]
        """

        self._areas = areas

    @property
    def service_classes(self):
        """Gets the service_classes of this V11VmOpenApiService.  # noqa: E501

        List of service classes related to the service.  # noqa: E501

        :return: The service_classes of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[V7VmOpenApiFintoItemWithDescription]
        """
        return self._service_classes

    @service_classes.setter
    def service_classes(self, service_classes):
        """Sets the service_classes of this V11VmOpenApiService.

        List of service classes related to the service.  # noqa: E501

        :param service_classes: The service_classes of this V11VmOpenApiService.  # noqa: E501
        :type: list[V7VmOpenApiFintoItemWithDescription]
        """

        self._service_classes = service_classes

    @property
    def ontology_terms(self):
        """Gets the ontology_terms of this V11VmOpenApiService.  # noqa: E501

        List of ontology terms related to the service.  # noqa: E501

        :return: The ontology_terms of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[V4VmOpenApiOntologyTerm]
        """
        return self._ontology_terms

    @ontology_terms.setter
    def ontology_terms(self, ontology_terms):
        """Sets the ontology_terms of this V11VmOpenApiService.

        List of ontology terms related to the service.  # noqa: E501

        :param ontology_terms: The ontology_terms of this V11VmOpenApiService.  # noqa: E501
        :type: list[V4VmOpenApiOntologyTerm]
        """

        self._ontology_terms = ontology_terms

    @property
    def target_groups(self):
        """Gets the target_groups of this V11VmOpenApiService.  # noqa: E501

        List of target groups related to the service.  # noqa: E501

        :return: The target_groups of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[V4VmOpenApiFintoItem]
        """
        return self._target_groups

    @target_groups.setter
    def target_groups(self, target_groups):
        """Sets the target_groups of this V11VmOpenApiService.

        List of target groups related to the service.  # noqa: E501

        :param target_groups: The target_groups of this V11VmOpenApiService.  # noqa: E501
        :type: list[V4VmOpenApiFintoItem]
        """

        self._target_groups = target_groups

    @property
    def life_events(self):
        """Gets the life_events of this V11VmOpenApiService.  # noqa: E501

        List of life events  related to the service.  # noqa: E501

        :return: The life_events of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[V4VmOpenApiFintoItem]
        """
        return self._life_events

    @life_events.setter
    def life_events(self, life_events):
        """Sets the life_events of this V11VmOpenApiService.

        List of life events  related to the service.  # noqa: E501

        :param life_events: The life_events of this V11VmOpenApiService.  # noqa: E501
        :type: list[V4VmOpenApiFintoItem]
        """

        self._life_events = life_events

    @property
    def industrial_classes(self):
        """Gets the industrial_classes of this V11VmOpenApiService.  # noqa: E501

        List of industrial classes related to the service.  # noqa: E501

        :return: The industrial_classes of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[V4VmOpenApiFintoItem]
        """
        return self._industrial_classes

    @industrial_classes.setter
    def industrial_classes(self, industrial_classes):
        """Sets the industrial_classes of this V11VmOpenApiService.

        List of industrial classes related to the service.  # noqa: E501

        :param industrial_classes: The industrial_classes of this V11VmOpenApiService.  # noqa: E501
        :type: list[V4VmOpenApiFintoItem]
        """

        self._industrial_classes = industrial_classes

    @property
    def service_channels(self):
        """Gets the service_channels of this V11VmOpenApiService.  # noqa: E501

        List of linked service channels including relationship data.  # noqa: E501

        :return: The service_channels of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[V11VmOpenApiServiceServiceChannel]
        """
        return self._service_channels

    @service_channels.setter
    def service_channels(self, service_channels):
        """Sets the service_channels of this V11VmOpenApiService.

        List of linked service channels including relationship data.  # noqa: E501

        :param service_channels: The service_channels of this V11VmOpenApiService.  # noqa: E501
        :type: list[V11VmOpenApiServiceServiceChannel]
        """

        self._service_channels = service_channels

    @property
    def organizations(self):
        """Gets the organizations of this V11VmOpenApiService.  # noqa: E501

        List of organizations, responsible and producer organizations of the service.  # noqa: E501

        :return: The organizations of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[V6VmOpenApiServiceOrganization]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this V11VmOpenApiService.

        List of organizations, responsible and producer organizations of the service.  # noqa: E501

        :param organizations: The organizations of this V11VmOpenApiService.  # noqa: E501
        :type: list[V6VmOpenApiServiceOrganization]
        """

        self._organizations = organizations

    @property
    def service_collections(self):
        """Gets the service_collections of this V11VmOpenApiService.  # noqa: E501

        List of service collections that the service has been linked to  # noqa: E501

        :return: The service_collections of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[VmOpenApiServiceServiceCollection]
        """
        return self._service_collections

    @service_collections.setter
    def service_collections(self, service_collections):
        """Sets the service_collections of this V11VmOpenApiService.

        List of service collections that the service has been linked to  # noqa: E501

        :param service_collections: The service_collections of this V11VmOpenApiService.  # noqa: E501
        :type: list[VmOpenApiServiceServiceCollection]
        """

        self._service_collections = service_collections

    @property
    def publishing_status(self):
        """Gets the publishing_status of this V11VmOpenApiService.  # noqa: E501

        Publishing status. Possible values are: Draft, Published, Deleted or Modified.  # noqa: E501

        :return: The publishing_status of this V11VmOpenApiService.  # noqa: E501
        :rtype: str
        """
        return self._publishing_status

    @publishing_status.setter
    def publishing_status(self, publishing_status):
        """Sets the publishing_status of this V11VmOpenApiService.

        Publishing status. Possible values are: Draft, Published, Deleted or Modified.  # noqa: E501

        :param publishing_status: The publishing_status of this V11VmOpenApiService.  # noqa: E501
        :type: str
        """

        self._publishing_status = publishing_status

    @property
    def modified(self):
        """Gets the modified of this V11VmOpenApiService.  # noqa: E501

        Date when item was modified/created (UTC).  # noqa: E501

        :return: The modified of this V11VmOpenApiService.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this V11VmOpenApiService.

        Date when item was modified/created (UTC).  # noqa: E501

        :param modified: The modified of this V11VmOpenApiService.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def responsible_sote_organization(self):
        """Gets the responsible_sote_organization of this V11VmOpenApiService.  # noqa: E501

        Sote organization that is responsible for the service. Notice! At the moment always empty - the property is a placeholder for later use.  # noqa: E501

        :return: The responsible_sote_organization of this V11VmOpenApiService.  # noqa: E501
        :rtype: str
        """
        return self._responsible_sote_organization

    @responsible_sote_organization.setter
    def responsible_sote_organization(self, responsible_sote_organization):
        """Sets the responsible_sote_organization of this V11VmOpenApiService.

        Sote organization that is responsible for the service. Notice! At the moment always empty - the property is a placeholder for later use.  # noqa: E501

        :param responsible_sote_organization: The responsible_sote_organization of this V11VmOpenApiService.  # noqa: E501
        :type: str
        """

        self._responsible_sote_organization = responsible_sote_organization

    @property
    def main_organization(self):
        """Gets the main_organization of this V11VmOpenApiService.  # noqa: E501


        :return: The main_organization of this V11VmOpenApiService.  # noqa: E501
        :rtype: VmOpenApiItem
        """
        return self._main_organization

    @main_organization.setter
    def main_organization(self, main_organization):
        """Sets the main_organization of this V11VmOpenApiService.


        :param main_organization: The main_organization of this V11VmOpenApiService.  # noqa: E501
        :type: VmOpenApiItem
        """

        self._main_organization = main_organization

    @property
    def service_producers(self):
        """Gets the service_producers of this V11VmOpenApiService.  # noqa: E501

        List of service producers  # noqa: E501

        :return: The service_producers of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[VmOpenApiServiceProducer]
        """
        return self._service_producers

    @service_producers.setter
    def service_producers(self, service_producers):
        """Sets the service_producers of this V11VmOpenApiService.

        List of service producers  # noqa: E501

        :param service_producers: The service_producers of this V11VmOpenApiService.  # noqa: E501
        :type: list[VmOpenApiServiceProducer]
        """

        self._service_producers = service_producers

    @property
    def security(self):
        """Gets the security of this V11VmOpenApiService.  # noqa: E501


        :return: The security of this V11VmOpenApiService.  # noqa: E501
        :rtype: ISecurityOwnOrganization
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this V11VmOpenApiService.


        :param security: The security of this V11VmOpenApiService.  # noqa: E501
        :type: ISecurityOwnOrganization
        """

        self._security = security

    @property
    def municipalities(self):
        """Gets the municipalities of this V11VmOpenApiService.  # noqa: E501

        List of municipality codes and names that the service is available for. Used in conjunction with service coverage type Local.  # noqa: E501

        :return: The municipalities of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[VmOpenApiMunicipality]
        """
        return self._municipalities

    @municipalities.setter
    def municipalities(self, municipalities):
        """Sets the municipalities of this V11VmOpenApiService.

        List of municipality codes and names that the service is available for. Used in conjunction with service coverage type Local.  # noqa: E501

        :param municipalities: The municipalities of this V11VmOpenApiService.  # noqa: E501
        :type: list[VmOpenApiMunicipality]
        """

        self._municipalities = municipalities

    @property
    def available_languages(self):
        """Gets the available_languages of this V11VmOpenApiService.  # noqa: E501

        Gets or sets available languages  # noqa: E501

        :return: The available_languages of this V11VmOpenApiService.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_languages

    @available_languages.setter
    def available_languages(self, available_languages):
        """Sets the available_languages of this V11VmOpenApiService.

        Gets or sets available languages  # noqa: E501

        :param available_languages: The available_languages of this V11VmOpenApiService.  # noqa: E501
        :type: list[str]
        """

        self._available_languages = available_languages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V11VmOpenApiService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V11VmOpenApiService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
