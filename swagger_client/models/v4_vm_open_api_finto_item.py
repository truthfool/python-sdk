# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V4VmOpenApiFintoItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'list[VmOpenApiLanguageItem]',
        'code': 'str',
        'ontology_type': 'str',
        'uri': 'str',
        'parent_id': 'str',
        'parent_uri': 'str',
        'override': 'bool',
        'new_uri': 'str',
        'new_parent_uri': 'str',
        'description': 'list[VmOpenApiLanguageItem]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'code': 'code',
        'ontology_type': 'ontologyType',
        'uri': 'uri',
        'parent_id': 'parentId',
        'parent_uri': 'parentUri',
        'override': 'override',
        'new_uri': 'newUri',
        'new_parent_uri': 'newParentUri',
        'description': 'description'
    }

    def __init__(self, id=None, name=None, code=None, ontology_type=None, uri=None, parent_id=None, parent_uri=None, override=None, new_uri=None, new_parent_uri=None, description=None):  # noqa: E501
        """V4VmOpenApiFintoItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._code = None
        self._ontology_type = None
        self._uri = None
        self._parent_id = None
        self._parent_uri = None
        self._override = None
        self._new_uri = None
        self._new_parent_uri = None
        self._description = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if code is not None:
            self.code = code
        if ontology_type is not None:
            self.ontology_type = ontology_type
        if uri is not None:
            self.uri = uri
        if parent_id is not None:
            self.parent_id = parent_id
        if parent_uri is not None:
            self.parent_uri = parent_uri
        if override is not None:
            self.override = override
        if new_uri is not None:
            self.new_uri = new_uri
        if new_parent_uri is not None:
            self.new_parent_uri = new_parent_uri
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this V4VmOpenApiFintoItem.  # noqa: E501

        Entity Guid identifier.  # noqa: E501

        :return: The id of this V4VmOpenApiFintoItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V4VmOpenApiFintoItem.

        Entity Guid identifier.  # noqa: E501

        :param id: The id of this V4VmOpenApiFintoItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this V4VmOpenApiFintoItem.  # noqa: E501

        List of localized entity names.  # noqa: E501

        :return: The name of this V4VmOpenApiFintoItem.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V4VmOpenApiFintoItem.

        List of localized entity names.  # noqa: E501

        :param name: The name of this V4VmOpenApiFintoItem.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """

        self._name = name

    @property
    def code(self):
        """Gets the code of this V4VmOpenApiFintoItem.  # noqa: E501

        Entity code.  # noqa: E501

        :return: The code of this V4VmOpenApiFintoItem.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this V4VmOpenApiFintoItem.

        Entity code.  # noqa: E501

        :param code: The code of this V4VmOpenApiFintoItem.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def ontology_type(self):
        """Gets the ontology_type of this V4VmOpenApiFintoItem.  # noqa: E501

        Ontology term type.  # noqa: E501

        :return: The ontology_type of this V4VmOpenApiFintoItem.  # noqa: E501
        :rtype: str
        """
        return self._ontology_type

    @ontology_type.setter
    def ontology_type(self, ontology_type):
        """Sets the ontology_type of this V4VmOpenApiFintoItem.

        Ontology term type.  # noqa: E501

        :param ontology_type: The ontology_type of this V4VmOpenApiFintoItem.  # noqa: E501
        :type: str
        """

        self._ontology_type = ontology_type

    @property
    def uri(self):
        """Gets the uri of this V4VmOpenApiFintoItem.  # noqa: E501

        Entity uri.  # noqa: E501

        :return: The uri of this V4VmOpenApiFintoItem.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this V4VmOpenApiFintoItem.

        Entity uri.  # noqa: E501

        :param uri: The uri of this V4VmOpenApiFintoItem.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def parent_id(self):
        """Gets the parent_id of this V4VmOpenApiFintoItem.  # noqa: E501

        Entity parent identifier.  # noqa: E501

        :return: The parent_id of this V4VmOpenApiFintoItem.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this V4VmOpenApiFintoItem.

        Entity parent identifier.  # noqa: E501

        :param parent_id: The parent_id of this V4VmOpenApiFintoItem.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def parent_uri(self):
        """Gets the parent_uri of this V4VmOpenApiFintoItem.  # noqa: E501

        Entity parent uri.  # noqa: E501

        :return: The parent_uri of this V4VmOpenApiFintoItem.  # noqa: E501
        :rtype: str
        """
        return self._parent_uri

    @parent_uri.setter
    def parent_uri(self, parent_uri):
        """Sets the parent_uri of this V4VmOpenApiFintoItem.

        Entity parent uri.  # noqa: E501

        :param parent_uri: The parent_uri of this V4VmOpenApiFintoItem.  # noqa: E501
        :type: str
        """

        self._parent_uri = parent_uri

    @property
    def override(self):
        """Gets the override of this V4VmOpenApiFintoItem.  # noqa: E501

        Indicates if item is overriden by general description.  # noqa: E501

        :return: The override of this V4VmOpenApiFintoItem.  # noqa: E501
        :rtype: bool
        """
        return self._override

    @override.setter
    def override(self, override):
        """Sets the override of this V4VmOpenApiFintoItem.

        Indicates if item is overriden by general description.  # noqa: E501

        :param override: The override of this V4VmOpenApiFintoItem.  # noqa: E501
        :type: bool
        """

        self._override = override

    @property
    def new_uri(self):
        """Gets the new_uri of this V4VmOpenApiFintoItem.  # noqa: E501

        New URI from Y-platform.  # noqa: E501

        :return: The new_uri of this V4VmOpenApiFintoItem.  # noqa: E501
        :rtype: str
        """
        return self._new_uri

    @new_uri.setter
    def new_uri(self, new_uri):
        """Sets the new_uri of this V4VmOpenApiFintoItem.

        New URI from Y-platform.  # noqa: E501

        :param new_uri: The new_uri of this V4VmOpenApiFintoItem.  # noqa: E501
        :type: str
        """

        self._new_uri = new_uri

    @property
    def new_parent_uri(self):
        """Gets the new_parent_uri of this V4VmOpenApiFintoItem.  # noqa: E501

        New parent URI from Y-platform.  # noqa: E501

        :return: The new_parent_uri of this V4VmOpenApiFintoItem.  # noqa: E501
        :rtype: str
        """
        return self._new_parent_uri

    @new_parent_uri.setter
    def new_parent_uri(self, new_parent_uri):
        """Sets the new_parent_uri of this V4VmOpenApiFintoItem.

        New parent URI from Y-platform.  # noqa: E501

        :param new_parent_uri: The new_parent_uri of this V4VmOpenApiFintoItem.  # noqa: E501
        :type: str
        """

        self._new_parent_uri = new_parent_uri

    @property
    def description(self):
        """Gets the description of this V4VmOpenApiFintoItem.  # noqa: E501

        List of localized entity descriptions.  # noqa: E501

        :return: The description of this V4VmOpenApiFintoItem.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V4VmOpenApiFintoItem.

        List of localized entity descriptions.  # noqa: E501

        :param description: The description of this V4VmOpenApiFintoItem.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V4VmOpenApiFintoItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4VmOpenApiFintoItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
