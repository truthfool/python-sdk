# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V11VmOpenApiChannelServicesIn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_id': 'str',
        'delete_all_service_relations': 'bool',
        'service_relations': 'list[V11VmOpenApiServiceChannelServiceInBase]'
    }

    attribute_map = {
        'channel_id': 'channelId',
        'delete_all_service_relations': 'deleteAllServiceRelations',
        'service_relations': 'serviceRelations'
    }

    def __init__(self, channel_id=None, delete_all_service_relations=None, service_relations=None):  # noqa: E501
        """V11VmOpenApiChannelServicesIn - a model defined in Swagger"""  # noqa: E501
        self._channel_id = None
        self._delete_all_service_relations = None
        self._service_relations = None
        self.discriminator = None
        if channel_id is not None:
            self.channel_id = channel_id
        if delete_all_service_relations is not None:
            self.delete_all_service_relations = delete_all_service_relations
        if service_relations is not None:
            self.service_relations = service_relations

    @property
    def channel_id(self):
        """Gets the channel_id of this V11VmOpenApiChannelServicesIn.  # noqa: E501

        Identifier for channel.  # noqa: E501

        :return: The channel_id of this V11VmOpenApiChannelServicesIn.  # noqa: E501
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this V11VmOpenApiChannelServicesIn.

        Identifier for channel.  # noqa: E501

        :param channel_id: The channel_id of this V11VmOpenApiChannelServicesIn.  # noqa: E501
        :type: str
        """

        self._channel_id = channel_id

    @property
    def delete_all_service_relations(self):
        """Gets the delete_all_service_relations of this V11VmOpenApiChannelServicesIn.  # noqa: E501

        Set to true to delete all existing relations between defined service channel and services (the ServiceRelations collection for this object should be empty collection when this option is used).  # noqa: E501

        :return: The delete_all_service_relations of this V11VmOpenApiChannelServicesIn.  # noqa: E501
        :rtype: bool
        """
        return self._delete_all_service_relations

    @delete_all_service_relations.setter
    def delete_all_service_relations(self, delete_all_service_relations):
        """Sets the delete_all_service_relations of this V11VmOpenApiChannelServicesIn.

        Set to true to delete all existing relations between defined service channel and services (the ServiceRelations collection for this object should be empty collection when this option is used).  # noqa: E501

        :param delete_all_service_relations: The delete_all_service_relations of this V11VmOpenApiChannelServicesIn.  # noqa: E501
        :type: bool
        """

        self._delete_all_service_relations = delete_all_service_relations

    @property
    def service_relations(self):
        """Gets the service_relations of this V11VmOpenApiChannelServicesIn.  # noqa: E501

        Gets or sets the service relations.  # noqa: E501

        :return: The service_relations of this V11VmOpenApiChannelServicesIn.  # noqa: E501
        :rtype: list[V11VmOpenApiServiceChannelServiceInBase]
        """
        return self._service_relations

    @service_relations.setter
    def service_relations(self, service_relations):
        """Sets the service_relations of this V11VmOpenApiChannelServicesIn.

        Gets or sets the service relations.  # noqa: E501

        :param service_relations: The service_relations of this V11VmOpenApiChannelServicesIn.  # noqa: E501
        :type: list[V11VmOpenApiServiceChannelServiceInBase]
        """

        self._service_relations = service_relations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V11VmOpenApiChannelServicesIn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V11VmOpenApiChannelServicesIn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
