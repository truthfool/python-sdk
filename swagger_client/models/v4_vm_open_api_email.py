# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V4VmOpenApiEmail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'language': 'str',
        'id': 'str',
        'owner_reference_id': 'str',
        'owner_reference_id2': 'str',
        'description': 'str',
        'value': 'str',
        'exists_one_per_language': 'bool',
        'order_number': 'int'
    }

    attribute_map = {
        'language': 'language',
        'id': 'id',
        'owner_reference_id': 'ownerReferenceId',
        'owner_reference_id2': 'ownerReferenceId2',
        'description': 'description',
        'value': 'value',
        'exists_one_per_language': 'existsOnePerLanguage',
        'order_number': 'orderNumber'
    }

    def __init__(self, language=None, id=None, owner_reference_id=None, owner_reference_id2=None, description=None, value=None, exists_one_per_language=None, order_number=None):  # noqa: E501
        """V4VmOpenApiEmail - a model defined in Swagger"""  # noqa: E501
        self._language = None
        self._id = None
        self._owner_reference_id = None
        self._owner_reference_id2 = None
        self._description = None
        self._value = None
        self._exists_one_per_language = None
        self._order_number = None
        self.discriminator = None
        self.language = language
        if id is not None:
            self.id = id
        if owner_reference_id is not None:
            self.owner_reference_id = owner_reference_id
        if owner_reference_id2 is not None:
            self.owner_reference_id2 = owner_reference_id2
        if description is not None:
            self.description = description
        if value is not None:
            self.value = value
        if exists_one_per_language is not None:
            self.exists_one_per_language = exists_one_per_language
        if order_number is not None:
            self.order_number = order_number

    @property
    def language(self):
        """Gets the language of this V4VmOpenApiEmail.  # noqa: E501

        Language code.  # noqa: E501

        :return: The language of this V4VmOpenApiEmail.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this V4VmOpenApiEmail.

        Language code.  # noqa: E501

        :param language: The language of this V4VmOpenApiEmail.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def id(self):
        """Gets the id of this V4VmOpenApiEmail.  # noqa: E501

        Gets or sets the identifier.  # noqa: E501

        :return: The id of this V4VmOpenApiEmail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V4VmOpenApiEmail.

        Gets or sets the identifier.  # noqa: E501

        :param id: The id of this V4VmOpenApiEmail.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def owner_reference_id(self):
        """Gets the owner_reference_id of this V4VmOpenApiEmail.  # noqa: E501

        Gets or sets the owner reference identifier.  # noqa: E501

        :return: The owner_reference_id of this V4VmOpenApiEmail.  # noqa: E501
        :rtype: str
        """
        return self._owner_reference_id

    @owner_reference_id.setter
    def owner_reference_id(self, owner_reference_id):
        """Sets the owner_reference_id of this V4VmOpenApiEmail.

        Gets or sets the owner reference identifier.  # noqa: E501

        :param owner_reference_id: The owner_reference_id of this V4VmOpenApiEmail.  # noqa: E501
        :type: str
        """

        self._owner_reference_id = owner_reference_id

    @property
    def owner_reference_id2(self):
        """Gets the owner_reference_id2 of this V4VmOpenApiEmail.  # noqa: E501

        Gets or sets the owner reference identifier.  # noqa: E501

        :return: The owner_reference_id2 of this V4VmOpenApiEmail.  # noqa: E501
        :rtype: str
        """
        return self._owner_reference_id2

    @owner_reference_id2.setter
    def owner_reference_id2(self, owner_reference_id2):
        """Sets the owner_reference_id2 of this V4VmOpenApiEmail.

        Gets or sets the owner reference identifier.  # noqa: E501

        :param owner_reference_id2: The owner_reference_id2 of this V4VmOpenApiEmail.  # noqa: E501
        :type: str
        """

        self._owner_reference_id2 = owner_reference_id2

    @property
    def description(self):
        """Gets the description of this V4VmOpenApiEmail.  # noqa: E501

        Email address description. (Max.Length: 100).  # noqa: E501

        :return: The description of this V4VmOpenApiEmail.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V4VmOpenApiEmail.

        Email address description. (Max.Length: 100).  # noqa: E501

        :param description: The description of this V4VmOpenApiEmail.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def value(self):
        """Gets the value of this V4VmOpenApiEmail.  # noqa: E501

        Localized value corresponding to the Language property value. (Max.Length: 100).  # noqa: E501

        :return: The value of this V4VmOpenApiEmail.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this V4VmOpenApiEmail.

        Localized value corresponding to the Language property value. (Max.Length: 100).  # noqa: E501

        :param value: The value of this V4VmOpenApiEmail.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def exists_one_per_language(self):
        """Gets the exists_one_per_language of this V4VmOpenApiEmail.  # noqa: E501

        Gets or sets a value indicating whether exists in all languages.  # noqa: E501

        :return: The exists_one_per_language of this V4VmOpenApiEmail.  # noqa: E501
        :rtype: bool
        """
        return self._exists_one_per_language

    @exists_one_per_language.setter
    def exists_one_per_language(self, exists_one_per_language):
        """Sets the exists_one_per_language of this V4VmOpenApiEmail.

        Gets or sets a value indicating whether exists in all languages.  # noqa: E501

        :param exists_one_per_language: The exists_one_per_language of this V4VmOpenApiEmail.  # noqa: E501
        :type: bool
        """

        self._exists_one_per_language = exists_one_per_language

    @property
    def order_number(self):
        """Gets the order_number of this V4VmOpenApiEmail.  # noqa: E501

        The order of email.  # noqa: E501

        :return: The order_number of this V4VmOpenApiEmail.  # noqa: E501
        :rtype: int
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this V4VmOpenApiEmail.

        The order of email.  # noqa: E501

        :param order_number: The order_number of this V4VmOpenApiEmail.  # noqa: E501
        :type: int
        """

        self._order_number = order_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V4VmOpenApiEmail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V4VmOpenApiEmail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
