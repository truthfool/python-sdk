# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V11VmOpenApiServiceHour(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_hour_type': 'str',
        'valid_from': 'datetime',
        'valid_to': 'datetime',
        'is_closed': 'bool',
        'valid_for_now': 'bool',
        'is_always_open': 'bool',
        'is_reservation': 'bool',
        'additional_information': 'list[VmOpenApiLanguageItem]',
        'opening_hour': 'list[V8VmOpenApiDailyOpeningTime]',
        'order_number': 'int',
        'owner_reference_id': 'str'
    }

    attribute_map = {
        'service_hour_type': 'serviceHourType',
        'valid_from': 'validFrom',
        'valid_to': 'validTo',
        'is_closed': 'isClosed',
        'valid_for_now': 'validForNow',
        'is_always_open': 'isAlwaysOpen',
        'is_reservation': 'isReservation',
        'additional_information': 'additionalInformation',
        'opening_hour': 'openingHour',
        'order_number': 'orderNumber',
        'owner_reference_id': 'ownerReferenceId'
    }

    def __init__(self, service_hour_type=None, valid_from=None, valid_to=None, is_closed=None, valid_for_now=None, is_always_open=None, is_reservation=None, additional_information=None, opening_hour=None, order_number=None, owner_reference_id=None):  # noqa: E501
        """V11VmOpenApiServiceHour - a model defined in Swagger"""  # noqa: E501
        self._service_hour_type = None
        self._valid_from = None
        self._valid_to = None
        self._is_closed = None
        self._valid_for_now = None
        self._is_always_open = None
        self._is_reservation = None
        self._additional_information = None
        self._opening_hour = None
        self._order_number = None
        self._owner_reference_id = None
        self.discriminator = None
        self.service_hour_type = service_hour_type
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if is_closed is not None:
            self.is_closed = is_closed
        if valid_for_now is not None:
            self.valid_for_now = valid_for_now
        if is_always_open is not None:
            self.is_always_open = is_always_open
        if is_reservation is not None:
            self.is_reservation = is_reservation
        if additional_information is not None:
            self.additional_information = additional_information
        if opening_hour is not None:
            self.opening_hour = opening_hour
        if order_number is not None:
            self.order_number = order_number
        if owner_reference_id is not None:
            self.owner_reference_id = owner_reference_id

    @property
    def service_hour_type(self):
        """Gets the service_hour_type of this V11VmOpenApiServiceHour.  # noqa: E501

        Type of service hour. Valid values are: DaysOfTheWeek, Exceptional or OverMidnight.  In version 7 and older: Standard, Exception or Special.  # noqa: E501

        :return: The service_hour_type of this V11VmOpenApiServiceHour.  # noqa: E501
        :rtype: str
        """
        return self._service_hour_type

    @service_hour_type.setter
    def service_hour_type(self, service_hour_type):
        """Sets the service_hour_type of this V11VmOpenApiServiceHour.

        Type of service hour. Valid values are: DaysOfTheWeek, Exceptional or OverMidnight.  In version 7 and older: Standard, Exception or Special.  # noqa: E501

        :param service_hour_type: The service_hour_type of this V11VmOpenApiServiceHour.  # noqa: E501
        :type: str
        """
        if service_hour_type is None:
            raise ValueError("Invalid value for `service_hour_type`, must not be `None`")  # noqa: E501

        self._service_hour_type = service_hour_type

    @property
    def valid_from(self):
        """Gets the valid_from of this V11VmOpenApiServiceHour.  # noqa: E501

        Date time where from this entry is valid.  # noqa: E501

        :return: The valid_from of this V11VmOpenApiServiceHour.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this V11VmOpenApiServiceHour.

        Date time where from this entry is valid.  # noqa: E501

        :param valid_from: The valid_from of this V11VmOpenApiServiceHour.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this V11VmOpenApiServiceHour.  # noqa: E501

        Date time to this entry is valid.  # noqa: E501

        :return: The valid_to of this V11VmOpenApiServiceHour.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this V11VmOpenApiServiceHour.

        Date time to this entry is valid.  # noqa: E501

        :param valid_to: The valid_to of this V11VmOpenApiServiceHour.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    @property
    def is_closed(self):
        """Gets the is_closed of this V11VmOpenApiServiceHour.  # noqa: E501

        Set to true to present a time between the valid from and to times as closed.  # noqa: E501

        :return: The is_closed of this V11VmOpenApiServiceHour.  # noqa: E501
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this V11VmOpenApiServiceHour.

        Set to true to present a time between the valid from and to times as closed.  # noqa: E501

        :param is_closed: The is_closed of this V11VmOpenApiServiceHour.  # noqa: E501
        :type: bool
        """

        self._is_closed = is_closed

    @property
    def valid_for_now(self):
        """Gets the valid_for_now of this V11VmOpenApiServiceHour.  # noqa: E501

        Set to true to present that this entry is valid for now.  # noqa: E501

        :return: The valid_for_now of this V11VmOpenApiServiceHour.  # noqa: E501
        :rtype: bool
        """
        return self._valid_for_now

    @valid_for_now.setter
    def valid_for_now(self, valid_for_now):
        """Sets the valid_for_now of this V11VmOpenApiServiceHour.

        Set to true to present that this entry is valid for now.  # noqa: E501

        :param valid_for_now: The valid_for_now of this V11VmOpenApiServiceHour.  # noqa: E501
        :type: bool
        """

        self._valid_for_now = valid_for_now

    @property
    def is_always_open(self):
        """Gets the is_always_open of this V11VmOpenApiServiceHour.  # noqa: E501

        Set to true to present a time between the valid from and to times as allways open.  # noqa: E501

        :return: The is_always_open of this V11VmOpenApiServiceHour.  # noqa: E501
        :rtype: bool
        """
        return self._is_always_open

    @is_always_open.setter
    def is_always_open(self, is_always_open):
        """Sets the is_always_open of this V11VmOpenApiServiceHour.

        Set to true to present a time between the valid from and to times as allways open.  # noqa: E501

        :param is_always_open: The is_always_open of this V11VmOpenApiServiceHour.  # noqa: E501
        :type: bool
        """

        self._is_always_open = is_always_open

    @property
    def is_reservation(self):
        """Gets the is_reservation of this V11VmOpenApiServiceHour.  # noqa: E501

        Gets or sets a value indicating whether this instance is open on reservation.  # noqa: E501

        :return: The is_reservation of this V11VmOpenApiServiceHour.  # noqa: E501
        :rtype: bool
        """
        return self._is_reservation

    @is_reservation.setter
    def is_reservation(self, is_reservation):
        """Sets the is_reservation of this V11VmOpenApiServiceHour.

        Gets or sets a value indicating whether this instance is open on reservation.  # noqa: E501

        :param is_reservation: The is_reservation of this V11VmOpenApiServiceHour.  # noqa: E501
        :type: bool
        """

        self._is_reservation = is_reservation

    @property
    def additional_information(self):
        """Gets the additional_information of this V11VmOpenApiServiceHour.  # noqa: E501

        Localized list of additional information. (Max.Length: 150).  # noqa: E501

        :return: The additional_information of this V11VmOpenApiServiceHour.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this V11VmOpenApiServiceHour.

        Localized list of additional information. (Max.Length: 150).  # noqa: E501

        :param additional_information: The additional_information of this V11VmOpenApiServiceHour.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """

        self._additional_information = additional_information

    @property
    def opening_hour(self):
        """Gets the opening_hour of this V11VmOpenApiServiceHour.  # noqa: E501

        Gets or sets the opening hour.  # noqa: E501

        :return: The opening_hour of this V11VmOpenApiServiceHour.  # noqa: E501
        :rtype: list[V8VmOpenApiDailyOpeningTime]
        """
        return self._opening_hour

    @opening_hour.setter
    def opening_hour(self, opening_hour):
        """Sets the opening_hour of this V11VmOpenApiServiceHour.

        Gets or sets the opening hour.  # noqa: E501

        :param opening_hour: The opening_hour of this V11VmOpenApiServiceHour.  # noqa: E501
        :type: list[V8VmOpenApiDailyOpeningTime]
        """

        self._opening_hour = opening_hour

    @property
    def order_number(self):
        """Gets the order_number of this V11VmOpenApiServiceHour.  # noqa: E501

        The order of service hours.  # noqa: E501

        :return: The order_number of this V11VmOpenApiServiceHour.  # noqa: E501
        :rtype: int
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this V11VmOpenApiServiceHour.

        The order of service hours.  # noqa: E501

        :param order_number: The order_number of this V11VmOpenApiServiceHour.  # noqa: E501
        :type: int
        """

        self._order_number = order_number

    @property
    def owner_reference_id(self):
        """Gets the owner_reference_id of this V11VmOpenApiServiceHour.  # noqa: E501

        Gets or sets the owner reference identifier.  # noqa: E501

        :return: The owner_reference_id of this V11VmOpenApiServiceHour.  # noqa: E501
        :rtype: str
        """
        return self._owner_reference_id

    @owner_reference_id.setter
    def owner_reference_id(self, owner_reference_id):
        """Sets the owner_reference_id of this V11VmOpenApiServiceHour.

        Gets or sets the owner reference identifier.  # noqa: E501

        :param owner_reference_id: The owner_reference_id of this V11VmOpenApiServiceHour.  # noqa: E501
        :type: str
        """

        self._owner_reference_id = owner_reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V11VmOpenApiServiceHour, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V11VmOpenApiServiceHour):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
