# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V11VmOpenApiServiceCollection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'source_id': 'str',
        'service_collection_names': 'list[VmOpenApiLanguageItem]',
        'service_collection_descriptions': 'list[VmOpenApiLocalizedListItem]',
        'publishing_status': 'str',
        'available_languages': 'list[str]',
        'version_id': 'str',
        'organization_id': 'str',
        'services': 'list[VmOpenApiServiceCollectionService]',
        'service_channels': 'list[VmOpenApiServiceCollectionChannel]',
        'modified': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'source_id': 'sourceId',
        'service_collection_names': 'serviceCollectionNames',
        'service_collection_descriptions': 'serviceCollectionDescriptions',
        'publishing_status': 'publishingStatus',
        'available_languages': 'availableLanguages',
        'version_id': 'versionId',
        'organization_id': 'organizationId',
        'services': 'services',
        'service_channels': 'serviceChannels',
        'modified': 'modified'
    }

    def __init__(self, id=None, source_id=None, service_collection_names=None, service_collection_descriptions=None, publishing_status=None, available_languages=None, version_id=None, organization_id=None, services=None, service_channels=None, modified=None):  # noqa: E501
        """V11VmOpenApiServiceCollection - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._source_id = None
        self._service_collection_names = None
        self._service_collection_descriptions = None
        self._publishing_status = None
        self._available_languages = None
        self._version_id = None
        self._organization_id = None
        self._services = None
        self._service_channels = None
        self._modified = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if source_id is not None:
            self.source_id = source_id
        if service_collection_names is not None:
            self.service_collection_names = service_collection_names
        if service_collection_descriptions is not None:
            self.service_collection_descriptions = service_collection_descriptions
        self.publishing_status = publishing_status
        if available_languages is not None:
            self.available_languages = available_languages
        if version_id is not None:
            self.version_id = version_id
        if organization_id is not None:
            self.organization_id = organization_id
        if services is not None:
            self.services = services
        if service_channels is not None:
            self.service_channels = service_channels
        if modified is not None:
            self.modified = modified

    @property
    def id(self):
        """Gets the id of this V11VmOpenApiServiceCollection.  # noqa: E501

        PTV service identifier.  # noqa: E501

        :return: The id of this V11VmOpenApiServiceCollection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V11VmOpenApiServiceCollection.

        PTV service identifier.  # noqa: E501

        :param id: The id of this V11VmOpenApiServiceCollection.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def source_id(self):
        """Gets the source_id of this V11VmOpenApiServiceCollection.  # noqa: E501

        External system identifier for the entity. User needs to be logged in to be able to get/set value.  # noqa: E501

        :return: The source_id of this V11VmOpenApiServiceCollection.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this V11VmOpenApiServiceCollection.

        External system identifier for the entity. User needs to be logged in to be able to get/set value.  # noqa: E501

        :param source_id: The source_id of this V11VmOpenApiServiceCollection.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def service_collection_names(self):
        """Gets the service_collection_names of this V11VmOpenApiServiceCollection.  # noqa: E501

        List of localized service collection names. (Max.Length: 100).  # noqa: E501

        :return: The service_collection_names of this V11VmOpenApiServiceCollection.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._service_collection_names

    @service_collection_names.setter
    def service_collection_names(self, service_collection_names):
        """Sets the service_collection_names of this V11VmOpenApiServiceCollection.

        List of localized service collection names. (Max.Length: 100).  # noqa: E501

        :param service_collection_names: The service_collection_names of this V11VmOpenApiServiceCollection.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """

        self._service_collection_names = service_collection_names

    @property
    def service_collection_descriptions(self):
        """Gets the service_collection_descriptions of this V11VmOpenApiServiceCollection.  # noqa: E501

        List of localized service collection descriptions.  # noqa: E501

        :return: The service_collection_descriptions of this V11VmOpenApiServiceCollection.  # noqa: E501
        :rtype: list[VmOpenApiLocalizedListItem]
        """
        return self._service_collection_descriptions

    @service_collection_descriptions.setter
    def service_collection_descriptions(self, service_collection_descriptions):
        """Sets the service_collection_descriptions of this V11VmOpenApiServiceCollection.

        List of localized service collection descriptions.  # noqa: E501

        :param service_collection_descriptions: The service_collection_descriptions of this V11VmOpenApiServiceCollection.  # noqa: E501
        :type: list[VmOpenApiLocalizedListItem]
        """

        self._service_collection_descriptions = service_collection_descriptions

    @property
    def publishing_status(self):
        """Gets the publishing_status of this V11VmOpenApiServiceCollection.  # noqa: E501

        Publishing status. Possible values are: Draft, Published, Deleted or Modified.  # noqa: E501

        :return: The publishing_status of this V11VmOpenApiServiceCollection.  # noqa: E501
        :rtype: str
        """
        return self._publishing_status

    @publishing_status.setter
    def publishing_status(self, publishing_status):
        """Sets the publishing_status of this V11VmOpenApiServiceCollection.

        Publishing status. Possible values are: Draft, Published, Deleted or Modified.  # noqa: E501

        :param publishing_status: The publishing_status of this V11VmOpenApiServiceCollection.  # noqa: E501
        :type: str
        """
        if publishing_status is None:
            raise ValueError("Invalid value for `publishing_status`, must not be `None`")  # noqa: E501

        self._publishing_status = publishing_status

    @property
    def available_languages(self):
        """Gets the available_languages of this V11VmOpenApiServiceCollection.  # noqa: E501

        Gets or sets available languages  # noqa: E501

        :return: The available_languages of this V11VmOpenApiServiceCollection.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_languages

    @available_languages.setter
    def available_languages(self, available_languages):
        """Sets the available_languages of this V11VmOpenApiServiceCollection.

        Gets or sets available languages  # noqa: E501

        :param available_languages: The available_languages of this V11VmOpenApiServiceCollection.  # noqa: E501
        :type: list[str]
        """

        self._available_languages = available_languages

    @property
    def version_id(self):
        """Gets the version_id of this V11VmOpenApiServiceCollection.  # noqa: E501

        The identifier for current version.  # noqa: E501

        :return: The version_id of this V11VmOpenApiServiceCollection.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this V11VmOpenApiServiceCollection.

        The identifier for current version.  # noqa: E501

        :param version_id: The version_id of this V11VmOpenApiServiceCollection.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def organization_id(self):
        """Gets the organization_id of this V11VmOpenApiServiceCollection.  # noqa: E501

        Main responsible organization Id.  # noqa: E501

        :return: The organization_id of this V11VmOpenApiServiceCollection.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this V11VmOpenApiServiceCollection.

        Main responsible organization Id.  # noqa: E501

        :param organization_id: The organization_id of this V11VmOpenApiServiceCollection.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def services(self):
        """Gets the services of this V11VmOpenApiServiceCollection.  # noqa: E501

        List of service collection services.  # noqa: E501

        :return: The services of this V11VmOpenApiServiceCollection.  # noqa: E501
        :rtype: list[VmOpenApiServiceCollectionService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this V11VmOpenApiServiceCollection.

        List of service collection services.  # noqa: E501

        :param services: The services of this V11VmOpenApiServiceCollection.  # noqa: E501
        :type: list[VmOpenApiServiceCollectionService]
        """

        self._services = services

    @property
    def service_channels(self):
        """Gets the service_channels of this V11VmOpenApiServiceCollection.  # noqa: E501


        :return: The service_channels of this V11VmOpenApiServiceCollection.  # noqa: E501
        :rtype: list[VmOpenApiServiceCollectionChannel]
        """
        return self._service_channels

    @service_channels.setter
    def service_channels(self, service_channels):
        """Sets the service_channels of this V11VmOpenApiServiceCollection.


        :param service_channels: The service_channels of this V11VmOpenApiServiceCollection.  # noqa: E501
        :type: list[VmOpenApiServiceCollectionChannel]
        """

        self._service_channels = service_channels

    @property
    def modified(self):
        """Gets the modified of this V11VmOpenApiServiceCollection.  # noqa: E501

        Date when item was modified/created (UTC).  # noqa: E501

        :return: The modified of this V11VmOpenApiServiceCollection.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this V11VmOpenApiServiceCollection.

        Date when item was modified/created (UTC).  # noqa: E501

        :param modified: The modified of this V11VmOpenApiServiceCollection.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V11VmOpenApiServiceCollection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V11VmOpenApiServiceCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
