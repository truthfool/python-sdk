# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VmOpenApiAddressStreetIn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'municipality': 'str',
        'additional_information': 'list[VmOpenApiLanguageItem]',
        'owner_reference_id': 'str',
        'street': 'list[VmOpenApiLanguageItem]',
        'street_number': 'str',
        'postal_code': 'str',
        'referenced_street_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'municipality': 'municipality',
        'additional_information': 'additionalInformation',
        'owner_reference_id': 'ownerReferenceId',
        'street': 'street',
        'street_number': 'streetNumber',
        'postal_code': 'postalCode',
        'referenced_street_id': 'referencedStreetId'
    }

    def __init__(self, id=None, municipality=None, additional_information=None, owner_reference_id=None, street=None, street_number=None, postal_code=None, referenced_street_id=None):  # noqa: E501
        """VmOpenApiAddressStreetIn - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._municipality = None
        self._additional_information = None
        self._owner_reference_id = None
        self._street = None
        self._street_number = None
        self._postal_code = None
        self._referenced_street_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if municipality is not None:
            self.municipality = municipality
        if additional_information is not None:
            self.additional_information = additional_information
        if owner_reference_id is not None:
            self.owner_reference_id = owner_reference_id
        self.street = street
        if street_number is not None:
            self.street_number = street_number
        self.postal_code = postal_code
        if referenced_street_id is not None:
            self.referenced_street_id = referenced_street_id

    @property
    def id(self):
        """Gets the id of this VmOpenApiAddressStreetIn.  # noqa: E501

        Gets or sets the identifier.  # noqa: E501

        :return: The id of this VmOpenApiAddressStreetIn.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VmOpenApiAddressStreetIn.

        Gets or sets the identifier.  # noqa: E501

        :param id: The id of this VmOpenApiAddressStreetIn.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def municipality(self):
        """Gets the municipality of this VmOpenApiAddressStreetIn.  # noqa: E501

        Municipality code (e.g. 091).  # noqa: E501

        :return: The municipality of this VmOpenApiAddressStreetIn.  # noqa: E501
        :rtype: str
        """
        return self._municipality

    @municipality.setter
    def municipality(self, municipality):
        """Sets the municipality of this VmOpenApiAddressStreetIn.

        Municipality code (e.g. 091).  # noqa: E501

        :param municipality: The municipality of this VmOpenApiAddressStreetIn.  # noqa: E501
        :type: str
        """

        self._municipality = municipality

    @property
    def additional_information(self):
        """Gets the additional_information of this VmOpenApiAddressStreetIn.  # noqa: E501

        Localized list of additional information about the address. (Max.Length: 150).  # noqa: E501

        :return: The additional_information of this VmOpenApiAddressStreetIn.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this VmOpenApiAddressStreetIn.

        Localized list of additional information about the address. (Max.Length: 150).  # noqa: E501

        :param additional_information: The additional_information of this VmOpenApiAddressStreetIn.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """

        self._additional_information = additional_information

    @property
    def owner_reference_id(self):
        """Gets the owner_reference_id of this VmOpenApiAddressStreetIn.  # noqa: E501

        Gets or sets the owner reference identifier.  # noqa: E501

        :return: The owner_reference_id of this VmOpenApiAddressStreetIn.  # noqa: E501
        :rtype: str
        """
        return self._owner_reference_id

    @owner_reference_id.setter
    def owner_reference_id(self, owner_reference_id):
        """Sets the owner_reference_id of this VmOpenApiAddressStreetIn.

        Gets or sets the owner reference identifier.  # noqa: E501

        :param owner_reference_id: The owner_reference_id of this VmOpenApiAddressStreetIn.  # noqa: E501
        :type: str
        """

        self._owner_reference_id = owner_reference_id

    @property
    def street(self):
        """Gets the street of this VmOpenApiAddressStreetIn.  # noqa: E501

        List of localized street addresses. (Max.Length: 100).  # noqa: E501

        :return: The street of this VmOpenApiAddressStreetIn.  # noqa: E501
        :rtype: list[VmOpenApiLanguageItem]
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this VmOpenApiAddressStreetIn.

        List of localized street addresses. (Max.Length: 100).  # noqa: E501

        :param street: The street of this VmOpenApiAddressStreetIn.  # noqa: E501
        :type: list[VmOpenApiLanguageItem]
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")  # noqa: E501

        self._street = street

    @property
    def street_number(self):
        """Gets the street_number of this VmOpenApiAddressStreetIn.  # noqa: E501

        Street number for street address. (Max.Length: 30).  # noqa: E501

        :return: The street_number of this VmOpenApiAddressStreetIn.  # noqa: E501
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this VmOpenApiAddressStreetIn.

        Street number for street address. (Max.Length: 30).  # noqa: E501

        :param street_number: The street_number of this VmOpenApiAddressStreetIn.  # noqa: E501
        :type: str
        """

        self._street_number = street_number

    @property
    def postal_code(self):
        """Gets the postal_code of this VmOpenApiAddressStreetIn.  # noqa: E501

        Postal code, for example 00100.  # noqa: E501

        :return: The postal_code of this VmOpenApiAddressStreetIn.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this VmOpenApiAddressStreetIn.

        Postal code, for example 00100.  # noqa: E501

        :param postal_code: The postal_code of this VmOpenApiAddressStreetIn.  # noqa: E501
        :type: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def referenced_street_id(self):
        """Gets the referenced_street_id of this VmOpenApiAddressStreetIn.  # noqa: E501

        Temporarily stored Id of assigned Street during translations  # noqa: E501

        :return: The referenced_street_id of this VmOpenApiAddressStreetIn.  # noqa: E501
        :rtype: str
        """
        return self._referenced_street_id

    @referenced_street_id.setter
    def referenced_street_id(self, referenced_street_id):
        """Sets the referenced_street_id of this VmOpenApiAddressStreetIn.

        Temporarily stored Id of assigned Street during translations  # noqa: E501

        :param referenced_street_id: The referenced_street_id of this VmOpenApiAddressStreetIn.  # noqa: E501
        :type: str
        """

        self._referenced_street_id = referenced_street_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VmOpenApiAddressStreetIn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VmOpenApiAddressStreetIn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
