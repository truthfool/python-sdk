# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v11_service_active_get(self, **kwargs):  # noqa: E501
        """Gets all services within PTV as a list of service ids and names. Also services with draft and modified versions are included.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  NOTE! This is a restricted endpoint.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"date\": [                      \"The value 'rfsd' is not valid for Nullable`1.\",                      \"The date parameter is invalid.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_active_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_active_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_active_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_active_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets all services within PTV as a list of service ids and names. Also services with draft and modified versions are included.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  NOTE! This is a restricted endpoint.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"date\": [                      \"The value 'rfsd' is not valid for Nullable`1.\",                      \"The date parameter is invalid.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_active_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'date_before', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_active_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/active', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_active_id_get(self, id, **kwargs):  # noqa: E501
        """Fetches all the information related to a single service. Also services with only draft or modified versions are returned.  NOTE! This is a restricted endpoint.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_active_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :param bool show_header:
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_active_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_active_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_active_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Fetches all the information related to a single service. Also services with only draft or modified versions are returned.  NOTE! This is a restricted endpoint.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_active_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :param bool show_header:
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_active_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_service_active_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/active/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiService',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_archived_list_get(self, archiving_type, organization_id, take, **kwargs):  # noqa: E501
        """Fetches automatically/manually archived services  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_archived_list_get(archiving_type, organization_id, take, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArchivingType archiving_type: How service was archived. (required)
        :param str organization_id: Return only services belonging to this organization. (required)
        :param int take: How many services to return. (required)
        :param datetime min_archiving_date: Return only services archived after this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00).
        :param datetime max_archiving_date: Return only services archived before this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00).
        :param int skip: Skip the first n services.
        :return: list[VmOpenApiArchivedServiceBase]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_archived_list_get_with_http_info(archiving_type, organization_id, take, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_archived_list_get_with_http_info(archiving_type, organization_id, take, **kwargs)  # noqa: E501
            return data

    def api_v11_service_archived_list_get_with_http_info(self, archiving_type, organization_id, take, **kwargs):  # noqa: E501
        """Fetches automatically/manually archived services  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_archived_list_get_with_http_info(archiving_type, organization_id, take, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArchivingType archiving_type: How service was archived. (required)
        :param str organization_id: Return only services belonging to this organization. (required)
        :param int take: How many services to return. (required)
        :param datetime min_archiving_date: Return only services archived after this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00).
        :param datetime max_archiving_date: Return only services archived before this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00).
        :param int skip: Skip the first n services.
        :return: list[VmOpenApiArchivedServiceBase]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['archiving_type', 'organization_id', 'take', 'min_archiving_date', 'max_archiving_date', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_archived_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'archiving_type' is set
        if ('archiving_type' not in params or
                params['archiving_type'] is None):
            raise ValueError("Missing the required parameter `archiving_type` when calling `api_v11_service_archived_list_get`")  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `api_v11_service_archived_list_get`")  # noqa: E501
        # verify the required parameter 'take' is set
        if ('take' not in params or
                params['take'] is None):
            raise ValueError("Missing the required parameter `take` when calling `api_v11_service_archived_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'archiving_type' in params:
            query_params.append(('ArchivingType', params['archiving_type']))  # noqa: E501
        if 'organization_id' in params:
            query_params.append(('OrganizationId', params['organization_id']))  # noqa: E501
        if 'min_archiving_date' in params:
            query_params.append(('MinArchivingDate', params['min_archiving_date']))  # noqa: E501
        if 'max_archiving_date' in params:
            query_params.append(('MaxArchivingDate', params['max_archiving_date']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('Skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('Take', params['take']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/archived/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmOpenApiArchivedServiceBase]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_area_area_code_code_get(self, area, code, **kwargs):  # noqa: E501
        """Gets a list of published services related to defined area and code.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_area_area_code_code_get(area, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area: The area type (required)
        :param str code: The code related to area (required)
        :param bool include_whole_country: Indicates if services marked for whole country (or whole country except Åland) should be included.
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_area_area_code_code_get_with_http_info(area, code, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_area_area_code_code_get_with_http_info(area, code, **kwargs)  # noqa: E501
            return data

    def api_v11_service_area_area_code_code_get_with_http_info(self, area, code, **kwargs):  # noqa: E501
        """Gets a list of published services related to defined area and code.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_area_area_code_code_get_with_http_info(area, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area: The area type (required)
        :param str code: The code related to area (required)
        :param bool include_whole_country: Indicates if services marked for whole country (or whole country except Åland) should be included.
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['area', 'code', 'include_whole_country', '_date', 'date_before', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_area_area_code_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'area' is set
        if ('area' not in params or
                params['area'] is None):
            raise ValueError("Missing the required parameter `area` when calling `api_v11_service_area_area_code_code_get`")  # noqa: E501
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `api_v11_service_area_area_code_code_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'area' in params:
            path_params['area'] = params['area']  # noqa: E501
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []
        if 'include_whole_country' in params:
            query_params.append(('includeWholeCountry', params['include_whole_country']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/area/{area}/code/{code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_get(self, **kwargs):  # noqa: E501
        """Gets all the published services within PTV as a list of service ids and names.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  Archived items can be fetched by setting status parameter as 'Archived' and withdrawn items can be fetched by setting status parameter as 'Withdrawn'.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"date\": [                      \"The value 'rfsd' is not valid for Nullable`1.\",                      \"The date parameter is invalid.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :param str status: Set status to get items either in published, archived or withdrawn state.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets all the published services within PTV as a list of service ids and names.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  Archived items can be fetched by setting status parameter as 'Archived' and withdrawn items can be fetched by setting status parameter as 'Withdrawn'.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"date\": [                      \"The value 'rfsd' is not valid for Nullable`1.\",                      \"The date parameter is invalid.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :param str status: Set status to get items either in published, archived or withdrawn state.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'date_before', 'page', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_id_get(self, id, **kwargs):  # noqa: E501
        """Fetches all the information related to a single service.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :param bool show_header:
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Fetches all the information related to a single service.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :param bool show_header:
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_service_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiService',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_id_put(self, id, **kwargs):  # noqa: E501
        """Updates the defined service with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceNames[0].Type\": [                      \"The Type field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Service identifier (required)
        :param V9VmOpenApiServiceInBase body: The service data
        :param bool attach_proposed_channels: Indicates if service channels attached into general description should automatically be attached into the service.
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates the defined service with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceNames[0].Type\": [                      \"The Type field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Service identifier (required)
        :param V9VmOpenApiServiceInBase body: The service data
        :param bool attach_proposed_channels: Indicates if service channels attached into general description should automatically be attached into the service.
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'attach_proposed_channels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_service_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'attach_proposed_channels' in params:
            query_params.append(('attachProposedChannels', params['attach_proposed_channels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiService',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_industrial_class_get(self, **kwargs):  # noqa: E501
        """Gets a list of published services for defined industrial class.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_industrial_class_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Industrial class uri, e.g. http://www.stat.fi/meta/luokitukset/toimiala/001-2008/46909
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_industrial_class_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_industrial_class_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_industrial_class_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of published services for defined industrial class.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_industrial_class_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Industrial class uri, e.g. http://www.stat.fi/meta/luokitukset/toimiala/001-2008/46909
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', '_date', 'date_before', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_industrial_class_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/industrialClass', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_list_area_area_code_code_get(self, area, code, **kwargs):  # noqa: E501
        """Fetches all the information of published services related to certain area and code.  User can set serviceWithGD parameter to true to include possible attached general description data into the service data.  In this case general description related descriptions are marked with prefix 'GD_' to separate them from service related descriptions.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_list_area_area_code_code_get(area, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area: The area type. (required)
        :param str code: The code related to area. (required)
        :param bool include_whole_country: Indicates if services marked to provide services for whole country (or whole country except Åland) should be included.
        :param bool service_with_gd: Indicates if general description data should be attached within the service data.
        :param int page: The page to be fetched.
        :param bool show_header:
        :return: V11VmOpenApiServicesWithPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_list_area_area_code_code_get_with_http_info(area, code, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_list_area_area_code_code_get_with_http_info(area, code, **kwargs)  # noqa: E501
            return data

    def api_v11_service_list_area_area_code_code_get_with_http_info(self, area, code, **kwargs):  # noqa: E501
        """Fetches all the information of published services related to certain area and code.  User can set serviceWithGD parameter to true to include possible attached general description data into the service data.  In this case general description related descriptions are marked with prefix 'GD_' to separate them from service related descriptions.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_list_area_area_code_code_get_with_http_info(area, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area: The area type. (required)
        :param str code: The code related to area. (required)
        :param bool include_whole_country: Indicates if services marked to provide services for whole country (or whole country except Åland) should be included.
        :param bool service_with_gd: Indicates if general description data should be attached within the service data.
        :param int page: The page to be fetched.
        :param bool show_header:
        :return: V11VmOpenApiServicesWithPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['area', 'code', 'include_whole_country', 'service_with_gd', 'page', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_list_area_area_code_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'area' is set
        if ('area' not in params or
                params['area'] is None):
            raise ValueError("Missing the required parameter `area` when calling `api_v11_service_list_area_area_code_code_get`")  # noqa: E501
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `api_v11_service_list_area_area_code_code_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'area' in params:
            path_params['area'] = params['area']  # noqa: E501
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []
        if 'include_whole_country' in params:
            query_params.append(('includeWholeCountry', params['include_whole_country']))  # noqa: E501
        if 'service_with_gd' in params:
            query_params.append(('serviceWithGD', params['service_with_gd']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/list/area/{area}/code/{code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiServicesWithPaging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_list_get(self, **kwargs):  # noqa: E501
        """Fetches all the information related to requested services.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guids: Comma separated list of guids. Max 100 can be added into list.
        :param bool show_header:
        :return: list[V11VmOpenApiService]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """Fetches all the information related to requested services.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guids: Comma separated list of guids. Max 100 can be added into list.
        :param bool show_header:
        :return: list[V11VmOpenApiService]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guids', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'guids' in params:
            query_params.append(('guids', params['guids']))  # noqa: E501
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[V11VmOpenApiService]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_list_organization_get(self, **kwargs):  # noqa: E501
        """Fetches all the information of the services related to certain organization. Either organizationId, code or oid needs to be added as a parameter.  User can also set serviceWithGD parameter to true to include possible attached general description data into the service data.  In this case general description related descriptions are marked with prefix 'GD_' to separate them from service related descriptions.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_list_organization_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: Organization guid.
        :param str code: Organization business code.
        :param str oid: Organization oid.
        :param bool service_with_gd: Indicates if general description data should be attached within the service data.
        :param int page: The page to be fetched.
        :param bool show_header:
        :return: V11VmOpenApiServicesWithPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_list_organization_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_list_organization_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_list_organization_get_with_http_info(self, **kwargs):  # noqa: E501
        """Fetches all the information of the services related to certain organization. Either organizationId, code or oid needs to be added as a parameter.  User can also set serviceWithGD parameter to true to include possible attached general description data into the service data.  In this case general description related descriptions are marked with prefix 'GD_' to separate them from service related descriptions.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_list_organization_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: Organization guid.
        :param str code: Organization business code.
        :param str oid: Organization oid.
        :param bool service_with_gd: Indicates if general description data should be attached within the service data.
        :param int page: The page to be fetched.
        :param bool show_header:
        :return: V11VmOpenApiServicesWithPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'code', 'oid', 'service_with_gd', 'page', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_list_organization_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organization_id' in params:
            query_params.append(('organizationId', params['organization_id']))  # noqa: E501
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501
        if 'oid' in params:
            query_params.append(('oid', params['oid']))  # noqa: E501
        if 'service_with_gd' in params:
            query_params.append(('serviceWithGD', params['service_with_gd']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/list/organization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiServicesWithPaging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_post(self, **kwargs):  # noqa: E501
        """Creates a new service with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceNames\": [                      \"Type - Required value 'Name' was not found!\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V9VmOpenApiServiceIn body: The service data.
        :param bool attach_proposed_channels: Indicates if service channels attached into general description should automatically be attached into the service.
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new service with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceNames\": [                      \"Type - Required value 'Name' was not found!\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V9VmOpenApiServiceIn body: The service data.
        :param bool attach_proposed_channels: Indicates if service channels attached into general description should automatically be attached into the service.
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'attach_proposed_channels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'attach_proposed_channels' in params:
            query_params.append(('attachProposedChannels', params['attach_proposed_channels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiService',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_service_channel_service_channel_id_get(self, service_channel_id, **kwargs):  # noqa: E501
        """Gets a list of published services for defined service channel.  Services joined to service channel after certain date can be fetched by adding date as query string parameter.  Services joined to service channel before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_service_channel_service_channel_id_get(service_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_channel_id: Guid (required)
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_service_channel_service_channel_id_get_with_http_info(service_channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_service_channel_service_channel_id_get_with_http_info(service_channel_id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_service_channel_service_channel_id_get_with_http_info(self, service_channel_id, **kwargs):  # noqa: E501
        """Gets a list of published services for defined service channel.  Services joined to service channel after certain date can be fetched by adding date as query string parameter.  Services joined to service channel before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_service_channel_service_channel_id_get_with_http_info(service_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_channel_id: Guid (required)
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_channel_id', '_date', 'date_before', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_service_channel_service_channel_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_channel_id' is set
        if ('service_channel_id' not in params or
                params['service_channel_id'] is None):
            raise ValueError("Missing the required parameter `service_channel_id` when calling `api_v11_service_service_channel_service_channel_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_channel_id' in params:
            path_params['serviceChannelId'] = params['service_channel_id']  # noqa: E501

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/serviceChannel/{serviceChannelId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_service_class_get(self, **kwargs):  # noqa: E501
        """Gets a list of published services for defined service class.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_service_class_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Service class uri, e.g. http://urn.fi/URN:NBN:fi:au:ptvl:v1065
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_service_class_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_service_class_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_service_class_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of published services for defined service class.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_service_class_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Service class uri, e.g. http://urn.fi/URN:NBN:fi:au:ptvl:v1065
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', '_date', 'date_before', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_service_class_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/serviceClass', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_service_with_gd_id_get(self, id, **kwargs):  # noqa: E501
        """Fetches all the information related to a single service. If general description is attached also general description data is returned within the service data.  General description related descriptions are marked with prefix 'GD_' to separate them from service related descriptions.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_service_with_gd_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :param bool show_header:
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_service_with_gd_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_service_with_gd_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_service_with_gd_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Fetches all the information related to a single service. If general description is attached also general description data is returned within the service data.  General description related descriptions are marked with prefix 'GD_' to separate them from service related descriptions.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_service_with_gd_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :param bool show_header:
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_service_with_gd_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_service_service_with_gd_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/serviceWithGD/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiService',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_service_with_gd_list_get(self, **kwargs):  # noqa: E501
        """Fetches all the information related to requests services. If general description is attached to a service also general description data is returned within the service data.  General description related descriptions are marked with prefix 'GD_' to separate them from service related descriptions.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_service_with_gd_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guids: Comma separated list of guids. Max 100 can be added into list.
        :param bool show_header:
        :return: list[V11VmOpenApiService]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_service_with_gd_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_service_with_gd_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_service_with_gd_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """Fetches all the information related to requests services. If general description is attached to a service also general description data is returned within the service data.  General description related descriptions are marked with prefix 'GD_' to separate them from service related descriptions.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_service_with_gd_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guids: Comma separated list of guids. Max 100 can be added into list.
        :param bool show_header:
        :return: list[V11VmOpenApiService]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guids', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_service_with_gd_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'guids' in params:
            query_params.append(('guids', params['guids']))  # noqa: E501
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/serviceWithGD/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[V11VmOpenApiService]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_source_id_source_id_put(self, source_id, **kwargs):  # noqa: E501
        """Updates the defined service with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceNames[0].Type\": [                      \"The Type field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_source_id_source_id_put(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: External source identifier (required)
        :param V9VmOpenApiServiceInBase body: The service data
        :param bool attach_proposed_channels: Indicates if service channels attached into general description should automatically be attached into the service.
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_source_id_source_id_put_with_http_info(source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_source_id_source_id_put_with_http_info(source_id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_source_id_source_id_put_with_http_info(self, source_id, **kwargs):  # noqa: E501
        """Updates the defined service with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceNames[0].Type\": [                      \"The Type field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_source_id_source_id_put_with_http_info(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: External source identifier (required)
        :param V9VmOpenApiServiceInBase body: The service data
        :param bool attach_proposed_channels: Indicates if service channels attached into general description should automatically be attached into the service.
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id', 'body', 'attach_proposed_channels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_source_id_source_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params or
                params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `api_v11_service_source_id_source_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']  # noqa: E501

        query_params = []
        if 'attach_proposed_channels' in params:
            query_params.append(('attachProposedChannels', params['attach_proposed_channels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/sourceId/{sourceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiService',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_target_group_get(self, **kwargs):  # noqa: E501
        """Gets a list of published services for defined target group.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_target_group_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Target group uri, e.g. http://urn.fi/URN:NBN:fi:au:ptvl:v2001
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_target_group_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_target_group_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_target_group_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of published services for defined target group.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_target_group_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Target group uri, e.g. http://urn.fi/URN:NBN:fi:au:ptvl:v2001
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', '_date', 'date_before', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_target_group_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/targetGroup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_type_type_get(self, type, **kwargs):  # noqa: E501
        """Gets a list of published services of defined service type.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_type_type_get(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Service type (required)
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_type_type_get_with_http_info(type, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_type_type_get_with_http_info(type, **kwargs)  # noqa: E501
            return data

    def api_v11_service_type_type_get_with_http_info(self, type, **kwargs):  # noqa: E501
        """Gets a list of published services of defined service type.  Services created/modified after certain date can be fetched by adding date as query string parameter.  Services created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_type_type_get_with_http_info(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Service type (required)
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', '_date', 'date_before', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_type_type_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `api_v11_service_type_type_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Service/type/{type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
