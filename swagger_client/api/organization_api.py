# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OrganizationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v11_organization_area_area_code_code_get(self, area, code, **kwargs):  # noqa: E501
        """Gets a list of published organizations related to defined area and code.  Organizations created/modified after certain date can be fetched by adding date as query string parameter.  Organizations created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_area_area_code_code_get(area, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area: The area type. (required)
        :param str code: The code related to area (required)
        :param bool include_whole_country: Indicates if organizations marked to provide services for whole country (or whole country except Åland) should be included.
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V8VmOpenApiOrganizationGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_organization_area_area_code_code_get_with_http_info(area, code, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_organization_area_area_code_code_get_with_http_info(area, code, **kwargs)  # noqa: E501
            return data

    def api_v11_organization_area_area_code_code_get_with_http_info(self, area, code, **kwargs):  # noqa: E501
        """Gets a list of published organizations related to defined area and code.  Organizations created/modified after certain date can be fetched by adding date as query string parameter.  Organizations created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_area_area_code_code_get_with_http_info(area, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area: The area type. (required)
        :param str code: The code related to area (required)
        :param bool include_whole_country: Indicates if organizations marked to provide services for whole country (or whole country except Åland) should be included.
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V8VmOpenApiOrganizationGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['area', 'code', 'include_whole_country', '_date', 'date_before', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_organization_area_area_code_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'area' is set
        if ('area' not in params or
                params['area'] is None):
            raise ValueError("Missing the required parameter `area` when calling `api_v11_organization_area_area_code_code_get`")  # noqa: E501
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `api_v11_organization_area_area_code_code_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'area' in params:
            path_params['area'] = params['area']  # noqa: E501
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []
        if 'include_whole_country' in params:
            query_params.append(('includeWholeCountry', params['include_whole_country']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Organization/area/{area}/code/{code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V8VmOpenApiOrganizationGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_organization_businesscode_code_get(self, code, **kwargs):  # noqa: E501
        """Fetches all the information related to organizations with defined business identity code.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"code\": [                   \"The field code must match the regular expression '^[0-9]{7}-[0-9]{1}$'.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_businesscode_code_get(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: Finnish business identity code (Y-tunnus). (required)
        :param bool show_header:
        :return: list[V10VmOpenApiOrganization]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_organization_businesscode_code_get_with_http_info(code, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_organization_businesscode_code_get_with_http_info(code, **kwargs)  # noqa: E501
            return data

    def api_v11_organization_businesscode_code_get_with_http_info(self, code, **kwargs):  # noqa: E501
        """Fetches all the information related to organizations with defined business identity code.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"code\": [                   \"The field code must match the regular expression '^[0-9]{7}-[0-9]{1}$'.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_businesscode_code_get_with_http_info(code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: Finnish business identity code (Y-tunnus). (required)
        :param bool show_header:
        :return: list[V10VmOpenApiOrganization]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_organization_businesscode_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `api_v11_organization_businesscode_code_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Organization/businesscode/{code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[V10VmOpenApiOrganization]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_organization_get(self, **kwargs):  # noqa: E501
        """Gets all the published organizations within PTV as a list of organization ids and names.  Organizations created/modified after certain date can be fetched by adding date as query string parameter.  Organizations created/modified before certain date can be fetched by adding dateBefore as query string parameter.  Archived items can be fetched by setting status parameter as 'Archived' and withdrawn items can be fetched by setting status parameter as 'Withdrawn'.  # noqa: E501

        NOTICE! When fetching published organizations, only organizations that have published services or published channels attached are returned!                <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.<code>  {     \"date\": [       \"The value '-2' is not valid for Nullable`1.\",       \"The date parameter is invalid.\"     ]  }  </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :param str status: Set status to get items either in published, archived or withdrawn state.
        :return: V8VmOpenApiOrganizationGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_organization_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_organization_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_organization_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets all the published organizations within PTV as a list of organization ids and names.  Organizations created/modified after certain date can be fetched by adding date as query string parameter.  Organizations created/modified before certain date can be fetched by adding dateBefore as query string parameter.  Archived items can be fetched by setting status parameter as 'Archived' and withdrawn items can be fetched by setting status parameter as 'Withdrawn'.  # noqa: E501

        NOTICE! When fetching published organizations, only organizations that have published services or published channels attached are returned!                <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.<code>  {     \"date\": [       \"The value '-2' is not valid for Nullable`1.\",       \"The date parameter is invalid.\"     ]  }  </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :param str status: Set status to get items either in published, archived or withdrawn state.
        :return: V8VmOpenApiOrganizationGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'date_before', 'page', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_organization_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Organization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V8VmOpenApiOrganizationGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_organization_hierarchy_get(self, **kwargs):  # noqa: E501
        """Gets a list of published organizations that do not have a parent organization.  Organizations created/modified after certain date can be fetched by adding date as query string parameter.  Organizations created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_hierarchy_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_organization_hierarchy_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_organization_hierarchy_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_organization_hierarchy_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of published organizations that do not have a parent organization.  Organizations created/modified after certain date can be fetched by adding date as query string parameter.  Organizations created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_hierarchy_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page number to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'date_before', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_organization_hierarchy_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Organization/Hierarchy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_organization_hierarchy_id_get(self, id, **kwargs):  # noqa: E501
        """Get a single organization hierarchy. Returns the complete hierarchy starting from  the root organization and including all the child and grandchild organizations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_hierarchy_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :return: VmOpenApiOrganizationHierarchy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_organization_hierarchy_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_organization_hierarchy_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_organization_hierarchy_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a single organization hierarchy. Returns the complete hierarchy starting from  the root organization and including all the child and grandchild organizations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_hierarchy_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :return: VmOpenApiOrganizationHierarchy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_organization_hierarchy_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_organization_hierarchy_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Organization/Hierarchy/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmOpenApiOrganizationHierarchy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_organization_id_get(self, id, **kwargs):  # noqa: E501
        """Fetches all the information related to a single organization.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"id\": [                   \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :param bool show_header:
        :return: V10VmOpenApiOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_organization_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_organization_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_organization_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Fetches all the information related to a single organization.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"id\": [                   \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :param bool show_header:
        :return: V10VmOpenApiOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_organization_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_organization_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Organization/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V10VmOpenApiOrganization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_organization_id_put(self, id, **kwargs):  # noqa: E501
        """Updates organization.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"propertyname\": [                   \"The field propertyname has invalid characters.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: organization entity id (required)
        :param V9VmOpenApiOrganizationInBase body: organization values
        :return: V10VmOpenApiOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_organization_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_organization_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_organization_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates organization.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"propertyname\": [                   \"The field propertyname has invalid characters.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: organization entity id (required)
        :param V9VmOpenApiOrganizationInBase body: organization values
        :return: V10VmOpenApiOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_organization_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_organization_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Organization/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V10VmOpenApiOrganization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_organization_list_area_area_code_code_get(self, area, code, **kwargs):  # noqa: E501
        """Fetches all the information of the organizations related to certain area.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"id\": [                   \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_list_area_area_code_code_get(area, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area: The area type. (required)
        :param str code: The code related to area (required)
        :param bool include_whole_country: Indicates if organizations marked to provide services for whole country (or whole country except Åland) should be included.
        :param int page: The page number to be fetched.
        :param bool show_header:
        :return: V10VmOpenApiOrganizationsWithPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_organization_list_area_area_code_code_get_with_http_info(area, code, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_organization_list_area_area_code_code_get_with_http_info(area, code, **kwargs)  # noqa: E501
            return data

    def api_v11_organization_list_area_area_code_code_get_with_http_info(self, area, code, **kwargs):  # noqa: E501
        """Fetches all the information of the organizations related to certain area.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"id\": [                   \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_list_area_area_code_code_get_with_http_info(area, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area: The area type. (required)
        :param str code: The code related to area (required)
        :param bool include_whole_country: Indicates if organizations marked to provide services for whole country (or whole country except Åland) should be included.
        :param int page: The page number to be fetched.
        :param bool show_header:
        :return: V10VmOpenApiOrganizationsWithPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['area', 'code', 'include_whole_country', 'page', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_organization_list_area_area_code_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'area' is set
        if ('area' not in params or
                params['area'] is None):
            raise ValueError("Missing the required parameter `area` when calling `api_v11_organization_list_area_area_code_code_get`")  # noqa: E501
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `api_v11_organization_list_area_area_code_code_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'area' in params:
            path_params['area'] = params['area']  # noqa: E501
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []
        if 'include_whole_country' in params:
            query_params.append(('includeWholeCountry', params['include_whole_country']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Organization/list/area/{area}/code/{code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V10VmOpenApiOrganizationsWithPaging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_organization_list_get(self, **kwargs):  # noqa: E501
        """Fetches all the information related to requested organizations.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"id\": [                   \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guids: Comma separated list of guids. Max 100 can be added into list.
        :param bool show_header:
        :return: list[V10VmOpenApiOrganization]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_organization_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_organization_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_organization_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """Fetches all the information related to requested organizations.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"id\": [                   \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guids: Comma separated list of guids. Max 100 can be added into list.
        :param bool show_header:
        :return: list[V10VmOpenApiOrganization]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guids', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_organization_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'guids' in params:
            query_params.append(('guids', params['guids']))  # noqa: E501
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Organization/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[V10VmOpenApiOrganization]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_organization_oid_oid_get(self, oid, **kwargs):  # noqa: E501
        """Fetches all the information related to a single organization with defined Oid.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"oid\": [                   \"The field oid must match the regular expression '^[A-Za-z0-9.-]*$'.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_oid_oid_get(oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str oid: Oid identifier (required)
        :param bool show_header:
        :return: V10VmOpenApiOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_organization_oid_oid_get_with_http_info(oid, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_organization_oid_oid_get_with_http_info(oid, **kwargs)  # noqa: E501
            return data

    def api_v11_organization_oid_oid_get_with_http_info(self, oid, **kwargs):  # noqa: E501
        """Fetches all the information related to a single organization with defined Oid.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"oid\": [                   \"The field oid must match the regular expression '^[A-Za-z0-9.-]*$'.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_oid_oid_get_with_http_info(oid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str oid: Oid identifier (required)
        :param bool show_header:
        :return: V10VmOpenApiOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['oid', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_organization_oid_oid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'oid' is set
        if ('oid' not in params or
                params['oid'] is None):
            raise ValueError("Missing the required parameter `oid` when calling `api_v11_organization_oid_oid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'oid' in params:
            path_params['oid'] = params['oid']  # noqa: E501

        query_params = []
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Organization/oid/{oid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V10VmOpenApiOrganization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_organization_post(self, **kwargs):  # noqa: E501
        """Creates a new organization with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Addresses[1].StreetAddress\": [                      \"The StreetAddress field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V9VmOpenApiOrganizationIn body: The organization data.
        :return: V10VmOpenApiOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_organization_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_organization_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_organization_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new organization with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Addresses[1].StreetAddress\": [                      \"The StreetAddress field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V9VmOpenApiOrganizationIn body: The organization data.
        :return: V10VmOpenApiOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_organization_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Organization', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V10VmOpenApiOrganization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_organization_saha_get(self, **kwargs):  # noqa: E501
        """Gets main organizations and two sub levels of organizations. Returns both published and archived organizations.  NOTE! This is a restricted endpoint.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"date\": [                   \"The value '-2' is not valid for Nullable`1.\",                   \"The date parameter is invalid.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_saha_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC)
        :param int page: The page number to be fetched.
        :return: VmOpenApiOrganizationSahaGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_organization_saha_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_organization_saha_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_organization_saha_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets main organizations and two sub levels of organizations. Returns both published and archived organizations.  NOTE! This is a restricted endpoint.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"date\": [                   \"The value '-2' is not valid for Nullable`1.\",                   \"The date parameter is invalid.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_saha_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC)
        :param int page: The page number to be fetched.
        :return: VmOpenApiOrganizationSahaGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'date_before', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_organization_saha_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Organization/saha', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmOpenApiOrganizationSahaGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_organization_saha_id_get(self, id, **kwargs):  # noqa: E501
        """Fetches Saha related information of a single organization.  NOTE! This is a restricted endpoint.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"id\": [                   \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_saha_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :return: VmOpenApiOrganizationSaha
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_organization_saha_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_organization_saha_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_organization_saha_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Fetches Saha related information of a single organization.  NOTE! This is a restricted endpoint.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"id\": [                   \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_saha_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :return: VmOpenApiOrganizationSaha
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_organization_saha_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_organization_saha_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Organization/saha/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VmOpenApiOrganizationSaha',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_organization_source_id_source_id_put(self, source_id, **kwargs):  # noqa: E501
        """Updates organization.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"propertyname\": [                   \"The field propertyname has invalid characters.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_source_id_source_id_put(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: organization external id (required)
        :param V9VmOpenApiOrganizationInBase body: organization values
        :return: V10VmOpenApiOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_organization_source_id_source_id_put_with_http_info(source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_organization_source_id_source_id_put_with_http_info(source_id, **kwargs)  # noqa: E501
            return data

    def api_v11_organization_source_id_source_id_put_with_http_info(self, source_id, **kwargs):  # noqa: E501
        """Updates organization.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"propertyname\": [                   \"The field propertyname has invalid characters.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_organization_source_id_source_id_put_with_http_info(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: organization external id (required)
        :param V9VmOpenApiOrganizationInBase body: organization values
        :return: V10VmOpenApiOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_organization_source_id_source_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params or
                params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `api_v11_organization_source_id_source_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Organization/sourceId/{sourceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V10VmOpenApiOrganization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
