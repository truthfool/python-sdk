# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ServiceChannelApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v11_service_channel_active_get(self, **kwargs):  # noqa: E501
        """Gets all service channels within PTV as a list of service channel ids and names. Also service channels with draft and modified versions are included.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  Certain type of service channels can be fetched by setting query string parameter type.  NOTE! This is a restricted endpoint.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"date\": [                   \"The value '-5' is not valid for Nullable`1.\",                   \"The date parameter is invalid.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_active_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param str type: Service channel type
        :param int page: The page to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_active_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_active_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_active_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets all service channels within PTV as a list of service channel ids and names. Also service channels with draft and modified versions are included.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  Certain type of service channels can be fetched by setting query string parameter type.  NOTE! This is a restricted endpoint.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"date\": [                   \"The value '-5' is not valid for Nullable`1.\",                   \"The date parameter is invalid.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_active_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param str type: Service channel type
        :param int page: The page to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'date_before', 'type', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_active_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/active', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_active_id_get(self, id, **kwargs):  # noqa: E501
        """Fetches all the information related to a single service channel. Also service channels with only draft or modified versions are returned.  NOTE! This is a restricted endpoint.  # noqa: E501

        <br>Notice! The returned object is one of the following: <i>V11VmOpenApiElectronicChannel</i> or <i>V11VmOpenApiPhoneChannel</i> or               <i>V11VmOpenApiPrintableFormChannel</i> or <i>V11VmOpenApiServiceLocationChannel</i> or <i>V11mOpenApiWebPageChannel</i>  <br>The returned object depends on the type of the channel. For example if the channel is phone channel then V11VmOpenApiPhoneChannel object is returned.  <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"id\": [                     \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_active_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :param bool show_header:
        :return: V11VmOpenApiServiceChannels
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_active_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_active_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_active_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Fetches all the information related to a single service channel. Also service channels with only draft or modified versions are returned.  NOTE! This is a restricted endpoint.  # noqa: E501

        <br>Notice! The returned object is one of the following: <i>V11VmOpenApiElectronicChannel</i> or <i>V11VmOpenApiPhoneChannel</i> or               <i>V11VmOpenApiPrintableFormChannel</i> or <i>V11VmOpenApiServiceLocationChannel</i> or <i>V11mOpenApiWebPageChannel</i>  <br>The returned object depends on the type of the channel. For example if the channel is phone channel then V11VmOpenApiPhoneChannel object is returned.  <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"id\": [                     \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_active_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :param bool show_header:
        :return: V11VmOpenApiServiceChannels
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_active_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_service_channel_active_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/active/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiServiceChannels',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_archived_list_get(self, archiving_type, organization_id, take, **kwargs):  # noqa: E501
        """Fetches automatically/manually archived service channels  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_archived_list_get(archiving_type, organization_id, take, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArchivingType archiving_type: How channel was archived. (required)
        :param str organization_id: Return only channels belonging to this organization. (required)
        :param int take: How many channels to return. (required)
        :param datetime min_archiving_date: Return only channels archived after this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00).
        :param datetime max_archiving_date: Return only channels archived before this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00).
        :param int skip: Skip the first n channels.
        :return: list[VmOpenApiArchivedServiceChannelBase]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_archived_list_get_with_http_info(archiving_type, organization_id, take, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_archived_list_get_with_http_info(archiving_type, organization_id, take, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_archived_list_get_with_http_info(self, archiving_type, organization_id, take, **kwargs):  # noqa: E501
        """Fetches automatically/manually archived service channels  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"id\": [                      \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_archived_list_get_with_http_info(archiving_type, organization_id, take, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArchivingType archiving_type: How channel was archived. (required)
        :param str organization_id: Return only channels belonging to this organization. (required)
        :param int take: How many channels to return. (required)
        :param datetime min_archiving_date: Return only channels archived after this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00).
        :param datetime max_archiving_date: Return only channels archived before this time.  ISO 8601 format (e.g. 2020-10-26T05:24:11+00:00).
        :param int skip: Skip the first n channels.
        :return: list[VmOpenApiArchivedServiceChannelBase]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['archiving_type', 'organization_id', 'take', 'min_archiving_date', 'max_archiving_date', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_archived_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'archiving_type' is set
        if ('archiving_type' not in params or
                params['archiving_type'] is None):
            raise ValueError("Missing the required parameter `archiving_type` when calling `api_v11_service_channel_archived_list_get`")  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `api_v11_service_channel_archived_list_get`")  # noqa: E501
        # verify the required parameter 'take' is set
        if ('take' not in params or
                params['take'] is None):
            raise ValueError("Missing the required parameter `take` when calling `api_v11_service_channel_archived_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'archiving_type' in params:
            query_params.append(('ArchivingType', params['archiving_type']))  # noqa: E501
        if 'organization_id' in params:
            query_params.append(('OrganizationId', params['organization_id']))  # noqa: E501
        if 'min_archiving_date' in params:
            query_params.append(('MinArchivingDate', params['min_archiving_date']))  # noqa: E501
        if 'max_archiving_date' in params:
            query_params.append(('MaxArchivingDate', params['max_archiving_date']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('Skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('Take', params['take']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/archived/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VmOpenApiArchivedServiceChannelBase]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_area_area_code_code_get(self, area, code, **kwargs):  # noqa: E501
        """Gets a list of service channels related to defined area and code.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"type\": [                     \"The field is invalid. Please use one of these: 'EChannel, WebPage, PrintableForm, Phone, ServiceLocation'.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_area_area_code_code_get(area, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area: The area type (required)
        :param str code: The area code (required)
        :param bool include_whole_country: Indicates if service channels marked for whole country (or whole country except Åland) should be included.
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_area_area_code_code_get_with_http_info(area, code, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_area_area_code_code_get_with_http_info(area, code, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_area_area_code_code_get_with_http_info(self, area, code, **kwargs):  # noqa: E501
        """Gets a list of service channels related to defined area and code.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"type\": [                     \"The field is invalid. Please use one of these: 'EChannel, WebPage, PrintableForm, Phone, ServiceLocation'.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_area_area_code_code_get_with_http_info(area, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area: The area type (required)
        :param str code: The area code (required)
        :param bool include_whole_country: Indicates if service channels marked for whole country (or whole country except Åland) should be included.
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['area', 'code', 'include_whole_country', '_date', 'date_before', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_area_area_code_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'area' is set
        if ('area' not in params or
                params['area'] is None):
            raise ValueError("Missing the required parameter `area` when calling `api_v11_service_channel_area_area_code_code_get`")  # noqa: E501
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `api_v11_service_channel_area_area_code_code_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'area' in params:
            path_params['area'] = params['area']  # noqa: E501
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []
        if 'include_whole_country' in params:
            query_params.append(('includeWholeCountry', params['include_whole_country']))  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/area/{area}/code/{code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_e_channel_id_put(self, id, **kwargs):  # noqa: E501
        """Updates electronic channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_e_channel_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: electronic channel id (required)
        :param V11VmOpenApiElectronicChannelInBase body: electronic channel data
        :return: V11VmOpenApiElectronicChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_e_channel_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_e_channel_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_e_channel_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates electronic channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_e_channel_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: electronic channel id (required)
        :param V11VmOpenApiElectronicChannelInBase body: electronic channel data
        :return: V11VmOpenApiElectronicChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_e_channel_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_service_channel_e_channel_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/EChannel/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiElectronicChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_e_channel_post(self, **kwargs):  # noqa: E501
        """Creates a new electronic channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_e_channel_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V11VmOpenApiElectronicChannelIn body: The electronic channel data.
        :return: V11VmOpenApiElectronicChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_e_channel_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_e_channel_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_e_channel_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new electronic channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_e_channel_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V11VmOpenApiElectronicChannelIn body: The electronic channel data.
        :return: V11VmOpenApiElectronicChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_e_channel_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/EChannel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiElectronicChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_e_channel_source_id_source_id_put(self, source_id, **kwargs):  # noqa: E501
        """Updates electronic channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_e_channel_source_id_source_id_put(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: electronic channel external source id (required)
        :param V11VmOpenApiElectronicChannelInBase body: electronic channel data
        :return: V11VmOpenApiElectronicChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_e_channel_source_id_source_id_put_with_http_info(source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_e_channel_source_id_source_id_put_with_http_info(source_id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_e_channel_source_id_source_id_put_with_http_info(self, source_id, **kwargs):  # noqa: E501
        """Updates electronic channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_e_channel_source_id_source_id_put_with_http_info(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: electronic channel external source id (required)
        :param V11VmOpenApiElectronicChannelInBase body: electronic channel data
        :return: V11VmOpenApiElectronicChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_e_channel_source_id_source_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params or
                params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `api_v11_service_channel_e_channel_source_id_source_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/EChannel/sourceId/{sourceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiElectronicChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_get(self, **kwargs):  # noqa: E501
        """Gets all published service channels within PTV as a list of service channel ids and names.  Service channels created/modified after certain date can be fetched by adding date as query string parameter  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  Archived items can be fetched by setting status parameter as 'Archived' and withdrawn items can be fetched by setting status parameter as 'Withdrawn'.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"date\": [                   \"The value '-5' is not valid for Nullable`1.\",                   \"The date parameter is invalid.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC)
        :param str organization_id: You can restrict the result set by setting organization guid.
        :param str code: You can restrict the result set by setting organization business code.
        :param str oid: You can restrict the result set by setting organization oid.
        :param bool is_visible_for_all: When set to true only service channels marked as isVisibleForAll are returned.
        :param int page: The page to be fetched.
        :param str status: Set status to get items either in published, archived or withdrawn state.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets all published service channels within PTV as a list of service channel ids and names.  Service channels created/modified after certain date can be fetched by adding date as query string parameter  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  Archived items can be fetched by setting status parameter as 'Archived' and withdrawn items can be fetched by setting status parameter as 'Withdrawn'.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages. Below sample response.  <code>              {                 \"date\": [                   \"The value '-5' is not valid for Nullable`1.\",                   \"The date parameter is invalid.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC)
        :param str organization_id: You can restrict the result set by setting organization guid.
        :param str code: You can restrict the result set by setting organization business code.
        :param str oid: You can restrict the result set by setting organization oid.
        :param bool is_visible_for_all: When set to true only service channels marked as isVisibleForAll are returned.
        :param int page: The page to be fetched.
        :param str status: Set status to get items either in published, archived or withdrawn state.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'date_before', 'organization_id', 'code', 'oid', 'is_visible_for_all', 'page', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'organization_id' in params:
            query_params.append(('organizationId', params['organization_id']))  # noqa: E501
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501
        if 'oid' in params:
            query_params.append(('oid', params['oid']))  # noqa: E501
        if 'is_visible_for_all' in params:
            query_params.append(('isVisibleForAll', params['is_visible_for_all']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_id_get(self, id, **kwargs):  # noqa: E501
        """Fetches all the information related to a single service channel.  # noqa: E501

        <br>Notice! The returned object is one of the following: <i>V11VmOpenApiElectronicChannel</i> or <i>V11VmOpenApiPhoneChannel</i> or               <i>V11VmOpenApiPrintableFormChannel</i> or <i>V11VmOpenApiServiceLocationChannel</i> or <i>V11VmOpenApiWebPageChannel</i>  <br>The returned object depends on the type of the channel. For example if the channel is phone channel then V11VmOpenApiPhoneChannel object is returned.  <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"id\": [                     \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :param bool show_header:
        :return: V11VmOpenApiServiceChannels
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Fetches all the information related to a single service channel.  # noqa: E501

        <br>Notice! The returned object is one of the following: <i>V11VmOpenApiElectronicChannel</i> or <i>V11VmOpenApiPhoneChannel</i> or               <i>V11VmOpenApiPrintableFormChannel</i> or <i>V11VmOpenApiServiceLocationChannel</i> or <i>V11VmOpenApiWebPageChannel</i>  <br>The returned object depends on the type of the channel. For example if the channel is phone channel then V11VmOpenApiPhoneChannel object is returned.  <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"id\": [                     \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Guid (required)
        :param bool show_header:
        :return: V11VmOpenApiServiceChannels
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_service_channel_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiServiceChannels',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_list_area_area_code_code_get(self, area, code, **kwargs):  # noqa: E501
        """Gets a list of service channels related to defined area and code.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        <br>Notice! The returned itemList object includes items which can be one of the following: <i>V11VmOpenApiElectronicChannel</i> or <i>V11VmOpenApiPhoneChannel</i> or               <i>V11VmOpenApiPrintableFormChannel</i> or <i>V11VmOpenApiServiceLocationChannel</i> or <i>V11VmOpenApiWebPageChannel</i>  <br>The returned item type within itemList depends on the type of the channel. For example if the channel is phone channel then V11VmOpenApiPhoneChannel object is returned.  <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"type\": [                     \"The field is invalid. Please use one of these: 'EChannel, WebPage, PrintableForm, Phone, ServiceLocation'.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_list_area_area_code_code_get(area, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area: The area type (required)
        :param str code: The area code (required)
        :param bool include_whole_country: Indicates if service channels marked for whole country (or whole country except Åland) should be included.
        :param int page: The page to be fetched.
        :param bool show_header:
        :return: V11VmOpenApiServiceChannelsWithPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_list_area_area_code_code_get_with_http_info(area, code, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_list_area_area_code_code_get_with_http_info(area, code, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_list_area_area_code_code_get_with_http_info(self, area, code, **kwargs):  # noqa: E501
        """Gets a list of service channels related to defined area and code.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        <br>Notice! The returned itemList object includes items which can be one of the following: <i>V11VmOpenApiElectronicChannel</i> or <i>V11VmOpenApiPhoneChannel</i> or               <i>V11VmOpenApiPrintableFormChannel</i> or <i>V11VmOpenApiServiceLocationChannel</i> or <i>V11VmOpenApiWebPageChannel</i>  <br>The returned item type within itemList depends on the type of the channel. For example if the channel is phone channel then V11VmOpenApiPhoneChannel object is returned.  <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"type\": [                     \"The field is invalid. Please use one of these: 'EChannel, WebPage, PrintableForm, Phone, ServiceLocation'.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_list_area_area_code_code_get_with_http_info(area, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str area: The area type (required)
        :param str code: The area code (required)
        :param bool include_whole_country: Indicates if service channels marked for whole country (or whole country except Åland) should be included.
        :param int page: The page to be fetched.
        :param bool show_header:
        :return: V11VmOpenApiServiceChannelsWithPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['area', 'code', 'include_whole_country', 'page', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_list_area_area_code_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'area' is set
        if ('area' not in params or
                params['area'] is None):
            raise ValueError("Missing the required parameter `area` when calling `api_v11_service_channel_list_area_area_code_code_get`")  # noqa: E501
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `api_v11_service_channel_list_area_area_code_code_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'area' in params:
            path_params['area'] = params['area']  # noqa: E501
        if 'code' in params:
            path_params['code'] = params['code']  # noqa: E501

        query_params = []
        if 'include_whole_country' in params:
            query_params.append(('includeWholeCountry', params['include_whole_country']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/list/area/{area}/code/{code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiServiceChannelsWithPaging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_list_get(self, **kwargs):  # noqa: E501
        """Fetches all the information related to requested service channels.  # noqa: E501

        <br>Notice! The returned object is one of the following: <i>V11VmOpenApiElectronicChannel</i> or <i>V11VmOpenApiPhoneChannel</i> or               <i>V11VmOpenApiPrintableFormChannel</i> or <i>V11VmOpenApiServiceLocationChannel</i> or <i>V11VmOpenApiWebPageChannel</i>  <br>The returned object depends on the type of the channel. For example if the channel is phone channel then V11VmOpenApiPhoneChannel object is returned.  <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"id\": [                     \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guids: Comma separated list of guids. Max 100 can be added into list.
        :param bool show_header:
        :return: list[V11VmOpenApiServiceChannels]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """Fetches all the information related to requested service channels.  # noqa: E501

        <br>Notice! The returned object is one of the following: <i>V11VmOpenApiElectronicChannel</i> or <i>V11VmOpenApiPhoneChannel</i> or               <i>V11VmOpenApiPrintableFormChannel</i> or <i>V11VmOpenApiServiceLocationChannel</i> or <i>V11VmOpenApiWebPageChannel</i>  <br>The returned object depends on the type of the channel. For example if the channel is phone channel then V11VmOpenApiPhoneChannel object is returned.  <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"id\": [                     \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guids: Comma separated list of guids. Max 100 can be added into list.
        :param bool show_header:
        :return: list[V11VmOpenApiServiceChannels]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guids', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'guids' in params:
            query_params.append(('guids', params['guids']))  # noqa: E501
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[V11VmOpenApiServiceChannels]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_list_organization_get(self, **kwargs):  # noqa: E501
        """Fetches all the information of service channels related to certain organization. Either organizationId, code or oid needs to be added as a parameter.  # noqa: E501

        <br>Notice! The returned itemList object includes items which can be one of the following: <i>V11VmOpenApiElectronicChannel</i> or <i>V11VmOpenApiPhoneChannel</i> or               <i>V11VmOpenApiPrintableFormChannel</i> or <i>V11VmOpenApiServiceLocationChannel</i> or <i>V11VmOpenApiWebPageChannel</i>  <br>The returned item type within itemList depends on the type of the channel. For example if the channel is phone channel then V11VmOpenApiPhoneChannel object is returned.  <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"id\": [                     \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_list_organization_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: Organization guid.
        :param str code: Organization business code.
        :param str oid: Organization oid.
        :param int page: The page to be fetched.
        :param bool show_header:
        :return: V11VmOpenApiServiceChannelsWithPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_list_organization_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_list_organization_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_list_organization_get_with_http_info(self, **kwargs):  # noqa: E501
        """Fetches all the information of service channels related to certain organization. Either organizationId, code or oid needs to be added as a parameter.  # noqa: E501

        <br>Notice! The returned itemList object includes items which can be one of the following: <i>V11VmOpenApiElectronicChannel</i> or <i>V11VmOpenApiPhoneChannel</i> or               <i>V11VmOpenApiPrintableFormChannel</i> or <i>V11VmOpenApiServiceLocationChannel</i> or <i>V11VmOpenApiWebPageChannel</i>  <br>The returned item type within itemList depends on the type of the channel. For example if the channel is phone channel then V11VmOpenApiPhoneChannel object is returned.  <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"id\": [                     \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_list_organization_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: Organization guid.
        :param str code: Organization business code.
        :param str oid: Organization oid.
        :param int page: The page to be fetched.
        :param bool show_header:
        :return: V11VmOpenApiServiceChannelsWithPaging
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'code', 'oid', 'page', 'show_header']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_list_organization_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organization_id' in params:
            query_params.append(('organizationId', params['organization_id']))  # noqa: E501
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501
        if 'oid' in params:
            query_params.append(('oid', params['oid']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'show_header' in params:
            query_params.append(('showHeader', params['show_header']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/list/organization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiServiceChannelsWithPaging',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_organization_organization_id_get(self, organization_id, **kwargs):  # noqa: E501
        """Gets a list of published service channels for defined organization.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"date\": [                     \"The value '-2' is not valid for Nullable`1.\",                     \"The date parameter is invalid.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_organization_organization_id_get(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: Guid (required)
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_organization_organization_id_get_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_organization_organization_id_get_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_organization_organization_id_get_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Gets a list of published service channels for defined organization.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"date\": [                     \"The value '-2' is not valid for Nullable`1.\",                     \"The date parameter is invalid.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_organization_organization_id_get_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: Guid (required)
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', '_date', 'date_before', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_organization_organization_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `api_v11_service_channel_organization_organization_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organizationId'] = params['organization_id']  # noqa: E501

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/organization/{organizationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_organization_organization_id_type_type_get(self, organization_id, type, **kwargs):  # noqa: E501
        """Gets a list of certain type of published service channels for defined organization.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"type\": [                     \"The field is invalid. Please use one of these: 'EChannel, WebPage, PrintableForm, Phone, ServiceLocation'.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_organization_organization_id_type_type_get(organization_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: Guid (required)
        :param str type: Service channel type (required)
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_organization_organization_id_type_type_get_with_http_info(organization_id, type, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_organization_organization_id_type_type_get_with_http_info(organization_id, type, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_organization_organization_id_type_type_get_with_http_info(self, organization_id, type, **kwargs):  # noqa: E501
        """Gets a list of certain type of published service channels for defined organization.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"type\": [                     \"The field is invalid. Please use one of these: 'EChannel, WebPage, PrintableForm, Phone, ServiceLocation'.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_organization_organization_id_type_type_get_with_http_info(organization_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: Guid (required)
        :param str type: Service channel type (required)
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'type', '_date', 'date_before', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_organization_organization_id_type_type_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `api_v11_service_channel_organization_organization_id_type_type_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `api_v11_service_channel_organization_organization_id_type_type_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organizationId'] = params['organization_id']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/organization/{organizationId}/type/{type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_phone_id_put(self, id, **kwargs):  # noqa: E501
        """Updates phone channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_phone_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: phone channel id (required)
        :param V11VmOpenApiPhoneChannelInBase body: phone channel data
        :return: V11VmOpenApiPhoneChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_phone_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_phone_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_phone_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates phone channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_phone_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: phone channel id (required)
        :param V11VmOpenApiPhoneChannelInBase body: phone channel data
        :return: V11VmOpenApiPhoneChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_phone_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_service_channel_phone_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/Phone/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiPhoneChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_phone_post(self, **kwargs):  # noqa: E501
        """Creates a new phone channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_phone_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V11VmOpenApiPhoneChannelIn body: The phone channel data.
        :return: V11VmOpenApiPhoneChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_phone_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_phone_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_phone_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new phone channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_phone_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V11VmOpenApiPhoneChannelIn body: The phone channel data.
        :return: V11VmOpenApiPhoneChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_phone_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/Phone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiPhoneChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_phone_source_id_source_id_put(self, source_id, **kwargs):  # noqa: E501
        """Updates phone channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_phone_source_id_source_id_put(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: phone channel external id (required)
        :param V11VmOpenApiPhoneChannelInBase body: phone channel data
        :return: V11VmOpenApiPhoneChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_phone_source_id_source_id_put_with_http_info(source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_phone_source_id_source_id_put_with_http_info(source_id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_phone_source_id_source_id_put_with_http_info(self, source_id, **kwargs):  # noqa: E501
        """Updates phone channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_phone_source_id_source_id_put_with_http_info(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: phone channel external id (required)
        :param V11VmOpenApiPhoneChannelInBase body: phone channel data
        :return: V11VmOpenApiPhoneChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_phone_source_id_source_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params or
                params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `api_v11_service_channel_phone_source_id_source_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/Phone/sourceId/{sourceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiPhoneChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_printable_form_id_put(self, id, **kwargs):  # noqa: E501
        """Updates printable form channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_printable_form_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: printable form channel id (required)
        :param V10VmOpenApiPrintableFormChannelInBase body: printable form channel data
        :return: V11VmOpenApiPrintableFormChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_printable_form_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_printable_form_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_printable_form_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates printable form channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_printable_form_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: printable form channel id (required)
        :param V10VmOpenApiPrintableFormChannelInBase body: printable form channel data
        :return: V11VmOpenApiPrintableFormChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_printable_form_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_service_channel_printable_form_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/PrintableForm/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiPrintableFormChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_printable_form_post(self, **kwargs):  # noqa: E501
        """Creates a new printable form channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_printable_form_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V10VmOpenApiPrintableFormChannelIn body: The printable form channel data.
        :return: V11VmOpenApiPrintableFormChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_printable_form_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_printable_form_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_printable_form_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new printable form channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_printable_form_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V10VmOpenApiPrintableFormChannelIn body: The printable form channel data.
        :return: V11VmOpenApiPrintableFormChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_printable_form_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/PrintableForm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiPrintableFormChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_printable_form_source_id_source_id_put(self, source_id, **kwargs):  # noqa: E501
        """Updates printable form channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_printable_form_source_id_source_id_put(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: printable form channel external source id (required)
        :param V10VmOpenApiPrintableFormChannelInBase body: printable form channel data
        :return: V11VmOpenApiPrintableFormChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_printable_form_source_id_source_id_put_with_http_info(source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_printable_form_source_id_source_id_put_with_http_info(source_id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_printable_form_source_id_source_id_put_with_http_info(self, source_id, **kwargs):  # noqa: E501
        """Updates printable form channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_printable_form_source_id_source_id_put_with_http_info(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: printable form channel external source id (required)
        :param V10VmOpenApiPrintableFormChannelInBase body: printable form channel data
        :return: V11VmOpenApiPrintableFormChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_printable_form_source_id_source_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params or
                params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `api_v11_service_channel_printable_form_source_id_source_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/PrintableForm/sourceId/{sourceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiPrintableFormChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_service_location_id_put(self, id, **kwargs):  # noqa: E501
        """Updates service location channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_service_location_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: service location channel id (required)
        :param V11VmOpenApiServiceLocationChannelInBase body: service location channel data.
        :return: V11VmOpenApiServiceLocationChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_service_location_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_service_location_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_service_location_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates service location channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_service_location_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: service location channel id (required)
        :param V11VmOpenApiServiceLocationChannelInBase body: service location channel data.
        :return: V11VmOpenApiServiceLocationChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_service_location_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_service_channel_service_location_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/ServiceLocation/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiServiceLocationChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_service_location_post(self, **kwargs):  # noqa: E501
        """Creates a new service location channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_service_location_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V11VmOpenApiServiceLocationChannelIn body: The service location channel data.
        :return: V11VmOpenApiServiceLocationChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_service_location_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_service_location_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_service_location_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new service location channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_service_location_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V11VmOpenApiServiceLocationChannelIn body: The service location channel data.
        :return: V11VmOpenApiServiceLocationChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_service_location_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/ServiceLocation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiServiceLocationChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_service_location_source_id_source_id_put(self, source_id, **kwargs):  # noqa: E501
        """Updates service location channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_service_location_source_id_source_id_put(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: service location channel external source id (required)
        :param V11VmOpenApiServiceLocationChannelInBase body: service location channel data
        :return: V11VmOpenApiServiceLocationChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_service_location_source_id_source_id_put_with_http_info(source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_service_location_source_id_source_id_put_with_http_info(source_id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_service_location_source_id_source_id_put_with_http_info(self, source_id, **kwargs):  # noqa: E501
        """Updates service location channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_service_location_source_id_source_id_put_with_http_info(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: service location channel external source id (required)
        :param V11VmOpenApiServiceLocationChannelInBase body: service location channel data
        :return: V11VmOpenApiServiceLocationChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_service_location_source_id_source_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params or
                params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `api_v11_service_channel_service_location_source_id_source_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/ServiceLocation/sourceId/{sourceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiServiceLocationChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_type_type_get(self, type, **kwargs):  # noqa: E501
        """Gets a list of certain type of published service channels.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"type\": [                     \"The field is invalid. Please use one of these: 'EChannel, WebPage, PrintableForm, Phone, ServiceLocation'.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_type_type_get(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Service channel type (required)
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_type_type_get_with_http_info(type, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_type_type_get_with_http_info(type, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_type_type_get_with_http_info(self, type, **kwargs):  # noqa: E501
        """Gets a list of certain type of published service channels.  Service channels created/modified after certain date can be fetched by adding date as query string parameter.  Service channels created/modified before certain date can be fetched by adding dateBefore as query string parameter.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                 \"type\": [                     \"The field is invalid. Please use one of these: 'EChannel, WebPage, PrintableForm, Phone, ServiceLocation'.\"                 ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_type_type_get_with_http_info(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Service channel type (required)
        :param datetime _date: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param datetime date_before: Supports only format \"yyyy-MM-ddTHH:mm:ss\" (UTC).
        :param int page: The page to be fetched.
        :return: V3VmOpenApiGuidPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', '_date', 'date_before', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_type_type_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `api_v11_service_channel_type_type_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'date_before' in params:
            query_params.append(('dateBefore', params['date_before']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/type/{type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3VmOpenApiGuidPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_web_page_id_put(self, id, **kwargs):  # noqa: E501
        """Updates webpage channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_web_page_id_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: web page channel id (required)
        :param V10VmOpenApiWebPageChannelInBase body: web page channel data
        :return: V11VmOpenApiWebPageChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_web_page_id_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_web_page_id_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_web_page_id_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates webpage channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_web_page_id_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: web page channel id (required)
        :param V10VmOpenApiWebPageChannelInBase body: web page channel data
        :return: V11VmOpenApiWebPageChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_web_page_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v11_service_channel_web_page_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/WebPage/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiWebPageChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_web_page_post(self, **kwargs):  # noqa: E501
        """Creates a new web page channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_web_page_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V10VmOpenApiWebPageChannelIn body: The web page channel data.
        :return: V11VmOpenApiWebPageChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_web_page_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_web_page_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_web_page_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new web page channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_web_page_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V10VmOpenApiWebPageChannelIn body: The web page channel data.
        :return: V11VmOpenApiWebPageChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_web_page_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/WebPage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiWebPageChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_service_channel_web_page_source_id_source_id_put(self, source_id, **kwargs):  # noqa: E501
        """Updates webpage channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_web_page_source_id_source_id_put(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: web page channel external source id (required)
        :param V10VmOpenApiWebPageChannelInBase body: web page channel data
        :return: V11VmOpenApiWebPageChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_service_channel_web_page_source_id_source_id_put_with_http_info(source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_service_channel_web_page_source_id_source_id_put_with_http_info(source_id, **kwargs)  # noqa: E501
            return data

    def api_v11_service_channel_web_page_source_id_source_id_put_with_http_info(self, source_id, **kwargs):  # noqa: E501
        """Updates webpage channel with the data provided as input.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"ServiceChannelNames\":[                      \"The ServiceChannelNames field is required.\"                  ]              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_service_channel_web_page_source_id_source_id_put_with_http_info(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: web page channel external source id (required)
        :param V10VmOpenApiWebPageChannelInBase body: web page channel data
        :return: V11VmOpenApiWebPageChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_service_channel_web_page_source_id_source_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params or
                params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `api_v11_service_channel_web_page_source_id_source_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/ServiceChannel/WebPage/sourceId/{sourceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiWebPageChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
