# coding: utf-8

"""
    PTV Open Api version 11

    Here you can see listed all the PTV Open Api methods.  # noqa: E501

    OpenAPI spec version: v11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ConnectionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v11_connection_asti_service_channel_id_service_channel_id_put(self, service_channel_id, **kwargs):  # noqa: E501
        """Updates connections between a service channel and services with extra data.  Request includes services for one certain service channel and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI connections for a service channel set 'deleteAllServiceRelations' property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Service with id '00000000-0000-0000-0000-00000000' not found!\"              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_connection_asti_service_channel_id_service_channel_id_put(service_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_channel_id: Service channel identifier (required)
        :param V11VmOpenApiChannelServicesIn body: A list of service channels.
        :return: V11VmOpenApiServiceChannels
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_connection_asti_service_channel_id_service_channel_id_put_with_http_info(service_channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_connection_asti_service_channel_id_service_channel_id_put_with_http_info(service_channel_id, **kwargs)  # noqa: E501
            return data

    def api_v11_connection_asti_service_channel_id_service_channel_id_put_with_http_info(self, service_channel_id, **kwargs):  # noqa: E501
        """Updates connections between a service channel and services with extra data.  Request includes services for one certain service channel and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI connections for a service channel set 'deleteAllServiceRelations' property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Service with id '00000000-0000-0000-0000-00000000' not found!\"              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_connection_asti_service_channel_id_service_channel_id_put_with_http_info(service_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_channel_id: Service channel identifier (required)
        :param V11VmOpenApiChannelServicesIn body: A list of service channels.
        :return: V11VmOpenApiServiceChannels
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_channel_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_connection_asti_service_channel_id_service_channel_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_channel_id' is set
        if ('service_channel_id' not in params or
                params['service_channel_id'] is None):
            raise ValueError("Missing the required parameter `service_channel_id` when calling `api_v11_connection_asti_service_channel_id_service_channel_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_channel_id' in params:
            path_params['serviceChannelId'] = params['service_channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Connection/ASTI/serviceChannelId/{serviceChannelId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiServiceChannels',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_connection_asti_service_id_service_id_put(self, service_id, **kwargs):  # noqa: E501
        """Updates connections between a service and service channels with extra data.  Request includes service channels for one certain service and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI service channel connections for a service, set 'deleteAllChannelRelations' property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Service with id '00000000-0000-0000-0000-00000000' not found!\"              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_connection_asti_service_id_service_id_put(service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_id: Service identifier (required)
        :param V11VmOpenApiServiceAndChannelRelationAstiInBase body: A list of service channels.
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_connection_asti_service_id_service_id_put_with_http_info(service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_connection_asti_service_id_service_id_put_with_http_info(service_id, **kwargs)  # noqa: E501
            return data

    def api_v11_connection_asti_service_id_service_id_put_with_http_info(self, service_id, **kwargs):  # noqa: E501
        """Updates connections between a service and service channels with extra data.  Request includes service channels for one certain service and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI service channel connections for a service, set 'deleteAllChannelRelations' property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Service with id '00000000-0000-0000-0000-00000000' not found!\"              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_connection_asti_service_id_service_id_put_with_http_info(service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_id: Service identifier (required)
        :param V11VmOpenApiServiceAndChannelRelationAstiInBase body: A list of service channels.
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_connection_asti_service_id_service_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_id' is set
        if ('service_id' not in params or
                params['service_id'] is None):
            raise ValueError("Missing the required parameter `service_id` when calling `api_v11_connection_asti_service_id_service_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_id' in params:
            path_params['serviceId'] = params['service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Connection/ASTI/serviceId/{serviceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiService',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_connection_asti_service_source_id_service_source_id_put(self, service_source_id, **kwargs):  # noqa: E501
        """Updates connections between a service and service channels with extra data. External source ids are used.  Request includes service channels for one certain service and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI service channel connections for a service set 'deleteAllChannelRelations' property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Service with id '00000000-0000-0000-0000-00000000' not found!\"              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_connection_asti_service_source_id_service_source_id_put(service_source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_source_id: External source identifier for service (required)
        :param V11VmOpenApiServiceAndChannelRelationBySourceAsti body: A list of service channels.
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_connection_asti_service_source_id_service_source_id_put_with_http_info(service_source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_connection_asti_service_source_id_service_source_id_put_with_http_info(service_source_id, **kwargs)  # noqa: E501
            return data

    def api_v11_connection_asti_service_source_id_service_source_id_put_with_http_info(self, service_source_id, **kwargs):  # noqa: E501
        """Updates connections between a service and service channels with extra data. External source ids are used.  Request includes service channels for one certain service and missing ASTI connections are removed. Regular connections are left as they are.  To delete all ASTI service channel connections for a service set 'deleteAllChannelRelations' property to true.  This is special endpoint for ASTI and users need to have special access right to be able use it.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Service with id '00000000-0000-0000-0000-00000000' not found!\"              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_connection_asti_service_source_id_service_source_id_put_with_http_info(service_source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_source_id: External source identifier for service (required)
        :param V11VmOpenApiServiceAndChannelRelationBySourceAsti body: A list of service channels.
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_source_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_connection_asti_service_source_id_service_source_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_source_id' is set
        if ('service_source_id' not in params or
                params['service_source_id'] is None):
            raise ValueError("Missing the required parameter `service_source_id` when calling `api_v11_connection_asti_service_source_id_service_source_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_source_id' in params:
            path_params['serviceSourceId'] = params['service_source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Connection/ASTI/serviceSourceId/{serviceSourceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiService',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_connection_post(self, **kwargs):  # noqa: E501
        """Creates a connections between services and service channels with extra data.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Service with id '00000000-0000-0000-0000-00000000' not found!\"              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_connection_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[V11VmOpenApiServiceAndChannelIn] body: A list of services and service channels.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_connection_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_connection_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_connection_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a connections between services and service channels with extra data.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Service with id '00000000-0000-0000-0000-00000000' not found!\"              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_connection_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[V11VmOpenApiServiceAndChannelIn] body: A list of services and service channels.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_connection_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Connection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_connection_service_id_service_id_put(self, service_id, **kwargs):  # noqa: E501
        """Updates connections between a service and service channels with extra data.  Request includes service channels for one certain service so regular connections missing from request are removed.  ASTI connections are left as they are.  To delete all regular service channel connections for a service, set 'deleteAllChannelRelations' property to true.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Service with id '00000000-0000-0000-0000-00000000' not found!\"              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_connection_service_id_service_id_put(service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_id: Service identifier (required)
        :param V11VmOpenApiServiceAndChannelRelationInBase body: A list of service channels.
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_connection_service_id_service_id_put_with_http_info(service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_connection_service_id_service_id_put_with_http_info(service_id, **kwargs)  # noqa: E501
            return data

    def api_v11_connection_service_id_service_id_put_with_http_info(self, service_id, **kwargs):  # noqa: E501
        """Updates connections between a service and service channels with extra data.  Request includes service channels for one certain service so regular connections missing from request are removed.  ASTI connections are left as they are.  To delete all regular service channel connections for a service, set 'deleteAllChannelRelations' property to true.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Service with id '00000000-0000-0000-0000-00000000' not found!\"              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_connection_service_id_service_id_put_with_http_info(service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_id: Service identifier (required)
        :param V11VmOpenApiServiceAndChannelRelationInBase body: A list of service channels.
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_connection_service_id_service_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_id' is set
        if ('service_id' not in params or
                params['service_id'] is None):
            raise ValueError("Missing the required parameter `service_id` when calling `api_v11_connection_service_id_service_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_id' in params:
            path_params['serviceId'] = params['service_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Connection/serviceId/{serviceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiService',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_connection_service_source_id_service_source_id_put(self, service_source_id, **kwargs):  # noqa: E501
        """Updates connections between a service and service channels with extra data. External source ids are used.  Request includes service channels for one certain service so service channels missing from request are removed.  To delete all service channel connections for a service set 'deleteAllChannelRelations' property to true.  ASTI connections are not removed - data for those connections can be updated though.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Service with id '00000000-0000-0000-0000-00000000' not found!\"              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_connection_service_source_id_service_source_id_put(service_source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_source_id: External source identifier for service (required)
        :param V11VmOpenApiServiceAndChannelRelationBySourceInBase body: A list of service channels.
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_connection_service_source_id_service_source_id_put_with_http_info(service_source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_connection_service_source_id_service_source_id_put_with_http_info(service_source_id, **kwargs)  # noqa: E501
            return data

    def api_v11_connection_service_source_id_service_source_id_put_with_http_info(self, service_source_id, **kwargs):  # noqa: E501
        """Updates connections between a service and service channels with extra data. External source ids are used.  Request includes service channels for one certain service so service channels missing from request are removed.  To delete all service channel connections for a service set 'deleteAllChannelRelations' property to true.  ASTI connections are not removed - data for those connections can be updated though.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Service with id '00000000-0000-0000-0000-00000000' not found!\"              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_connection_service_source_id_service_source_id_put_with_http_info(service_source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_source_id: External source identifier for service (required)
        :param V11VmOpenApiServiceAndChannelRelationBySourceInBase body: A list of service channels.
        :return: V11VmOpenApiService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_source_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_connection_service_source_id_service_source_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_source_id' is set
        if ('service_source_id' not in params or
                params['service_source_id'] is None):
            raise ValueError("Missing the required parameter `service_source_id` when calling `api_v11_connection_service_source_id_service_source_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_source_id' in params:
            path_params['serviceSourceId'] = params['service_source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Connection/serviceSourceId/{serviceSourceId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V11VmOpenApiService',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v11_connection_source_post(self, **kwargs):  # noqa: E501
        """Creates a connections between services and service channels with extra data. External source ids are used.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Service with id '00000000-0000-0000-0000-00000000' not found!\"              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_connection_source_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[V11VmOpenApiServiceAndChannelRelationBySource] body: A list of services and service channels.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v11_connection_source_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v11_connection_source_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v11_connection_source_post_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a connections between services and service channels with extra data. External source ids are used.  # noqa: E501

        <br>HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.  <code>              {                  \"Service with id '00000000-0000-0000-0000-00000000' not found!\"              }              </code>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v11_connection_source_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[V11VmOpenApiServiceAndChannelRelationBySource] body: A list of services and service channels.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v11_connection_source_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/v11/Connection/Source', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
